diff --git a/java_case_studies/reference_repos/aws/conflict2/desired.java b/java_case_studies/demo_results/MethodUnion/aws-conflict2.java
index c9df083..e96f8b7 100644
--- a/java_case_studies/reference_repos/aws/conflict2/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/aws-conflict2.java
@@ -13,66 +13,72 @@
  * permissions and limitations under the License.
  */
 package com.amazonaws.services.dynamodb.sessionmanager;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
+import static com.amazonaws.util.BinaryUtils.copyAllBytesFrom;
 import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
 import java.nio.ByteBuffer;
 import java.util.Collections;
 import java.util.HashSet;
-import java.util.List;
+import java.util.Map;
 import java.util.Set;
-
-import org.apache.catalina.Container;
-import org.apache.catalina.Loader;
+import org.apache.catalina.Context;
 import org.apache.catalina.Session;
 import org.apache.catalina.session.StandardSession;
 import org.apache.catalina.session.StoreBase;
 import org.apache.catalina.util.CustomObjectInputStream;
-
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import org.apache.juli.logging.Log;
+import java.io.ByteArrayOutputStream;
+import org.apache.juli.logging.LogFactory;
 import com.amazonaws.services.dynamodb.sessionmanager.util.DynamoUtils;
+import java.io.ObjectOutputStream;
 import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
+import com.amazonaws.services.dynamodbv2.model.AttributeValue;
 import com.amazonaws.services.dynamodbv2.model.DescribeTableRequest;
+import java.util.List;
 import com.amazonaws.services.dynamodbv2.model.TableDescription;
+import com.amazonaws.util.IOUtils;
+import org.apache.catalina.Container;
+import org.apache.catalina.Loader;
 
-/**
- * Session store implementation that loads and stores HTTP sessions from Amazon
- * DynamoDB.
- */
-public class DynamoDBSessionStore extends StoreBase {
-
-	private static final String name = "AmazonDynamoDBSessionStore";
-	private static final String info = name + "/1.0";
-
-	private AmazonDynamoDBClient dynamo;
-	private String sessionTableName;
+public class DynamoDBSessionStore extends StoreBase{
 
-	private Set<String> keys = Collections.synchronizedSet(new HashSet<String>());
-	private long keysTimestamp=0;
+    private static final String name = "AmazonDynamoDBSessionStore";,
+    private static final String info = name + "/1.0";,
+    private AmazonDynamoDBClient dynamo;,
+    private String sessionTableName;,
+    private final Set<String> keys = Collections.synchronizedSet(new HashSet<String>());,
+    private long keysTimestamp=0;,
+    private static final Log logger = LogFactory.getLog(DynamoDBSessionStore.class);,
 
-	@Override
+    <<<<<<< left_content.java
+@Override
 	public String getInfo() {
 		return info;
 	}
+=======
+public String getInfo() {
+        return info;
+    }
+>>>>>>> right_content.java
+
 
-	@Override
+    @Override
 	public String getStoreName() {
 		return name;
 	}
 
-	public void setDynamoClient(AmazonDynamoDBClient dynamo) {
+    public void setDynamoClient(AmazonDynamoDBClient dynamo) {
 		this.dynamo = dynamo;
 	}
 
-	public void setSessionTableName(String tableName) {
+    public void setSessionTableName(String tableName) {
 		this.sessionTableName = tableName;
 	}
 
-	@Override
+    @Override
 	public void clear() throws IOException {
 		final Set<String> keysCopy = new HashSet<String>();
 		keysCopy.addAll(keys);
@@ -88,7 +94,15 @@ public class DynamoDBSessionStore extends StoreBase {
 
 	}
 
-	@Override
+    @Override
+			public void run() {
+				for (String sessionId : keysCopy) {
+					remove(sessionId);
+				}
+			}
+
+    @Override
+<<<<<<< left_content.java
 	public int getSize() throws IOException {
 		TableDescription table = dynamo.describeTable(new DescribeTableRequest().withTableName(sessionTableName))
 				.getTable();
@@ -96,8 +110,19 @@ public class DynamoDBSessionStore extends StoreBase {
 
 		return (int) itemCount;
 	}
+=======
+    public int getSize() throws IOException {
+        // The item count from describeTable is updated every ~6 hours
+        TableDescription table = dynamo.describeTable(new DescribeTableRequest().withTableName(sessionTableName))
+                .getTable();
+        long itemCount = table.getItemCount();
 
-	@Override
+        return (int) itemCount;
+    }
+>>>>>>> right_content.java
+
+
+    @Override
 	public String[] keys() throws IOException {
 		// refresh the keys stored in memory in every hour.
 		if(keysTimestamp<System.currentTimeMillis()-1000L*60*60) {
@@ -112,7 +137,8 @@ public class DynamoDBSessionStore extends StoreBase {
 
 	}
 
-	@Override
+    @Override
+<<<<<<< left_content.java
 	public Session load(String id) throws ClassNotFoundException, IOException {
 
 		ByteBuffer byteBuffer = DynamoUtils.loadItemBySessionId(dynamo, sessionTableName, id);
@@ -174,8 +200,73 @@ public class DynamoDBSessionStore extends StoreBase {
 			}
 		}
 	}
+=======
+    public Session load(String id) throws ClassNotFoundException, IOException {
+        Map<String, AttributeValue> item = DynamoUtils.loadItemBySessionId(dynamo, sessionTableName, id);
+        if (item == null || !item.containsKey(SessionTableAttributes.SESSION_ID_KEY)
+                || !item.containsKey(SessionTableAttributes.SESSION_DATA_ATTRIBUTE)) {
+            logger.warn("Unable to load session attributes for session " + id);
+            return null;
+        }
+
+        Session session = getManager().createSession(id);
+        session.setCreationTime(Long.parseLong(item.get(SessionTableAttributes.CREATED_AT_ATTRIBUTE).getN()));
+
+        ByteBuffer byteBuffer = item.get(SessionTableAttributes.SESSION_DATA_ATTRIBUTE).getB();
+        ByteArrayInputStream inputStream = new ByteArrayInputStream(copyAllBytesFrom(byteBuffer));
+
+        Object readObject;
+        ObjectInputStream objectInputStream = null;
+        try {
+            Context webapp = getAssociatedContext();
+            objectInputStream = new CustomObjectInputStream(inputStream, webapp.getLoader().getClassLoader());
 
-	@Override
+            readObject = objectInputStream.readObject();
+        } finally {
+            IOUtils.closeQuietly(objectInputStream, null);
+        }
+
+        if (readObject instanceof Map<?, ?>) {
+            @SuppressWarnings("unchecked")
+            Map<String, Object> sessionAttributeMap = (Map<String, Object>) readObject;
+
+            for (String s : sessionAttributeMap.keySet()) {
+                ((StandardSession) session).setAttribute(s, sessionAttributeMap.get(s));
+            }
+        } else {
+            throw new RuntimeException("Error: Unable to unmarshall session attributes from DynamoDB store");
+        }
+
+        keys.add(id);
+        manager.add(session);
+
+        return session;
+    }
+>>>>>>> right_content.java
+
+
+    /**
+     * To be compatible with Tomcat7 we have to call the getContainer method rather than getContext.
+     * The cast is safe as it only makes sense to use a session manager within the context of a
+     * webapp, the Tomcat 8 version of getContainer just delegates to getContext. When Tomcat7 is no
+     * longer supported this can be changed to getContext
+     * 
+     * @return The context this manager is associated with
+     */
+
+    // TODO Inline this method with getManager().getContext() when Tomcat7 is no longer supported
+
+    private Context getAssociatedContext() {
+        try {
+            return (Context) getManager().getContainer();
+        } catch (ClassCastException e) {
+            logger.fatal("Unable to cast " + getManager().getClass().getName() + " to a Context."
+                    + " DynamoDB SessionManager can only be used with a Context");
+            throw new IllegalStateException(e);
+        }
+    }
+
+    @Override
 	public void save(Session session) throws IOException {
 
 		String id = session.getIdInternal();
@@ -206,7 +297,7 @@ public class DynamoDBSessionStore extends StoreBase {
 		keys.add(id);
 	}
 
-	@Override
+    @Override
 	public void remove(String id) {
 		if (manager.getContainer().getLogger().isDebugEnabled()) {
 			manager.getContainer().getLogger().debug(sm.getString(getStoreName() + ".removing", id, sessionTableName));
@@ -214,4 +305,5 @@ public class DynamoDBSessionStore extends StoreBase {
 		DynamoUtils.deleteSession(dynamo, sessionTableName, id);
 		keys.remove(id);
 	}
+
 }
\ No newline at end of file
