diff --git a/java_case_studies/reference_repos/aws/conflict1/desired.java b/java_case_studies/demo_results/MethodUnion/aws-conflict1.java
index 0a098b1..7b8b505 100644
--- a/java_case_studies/reference_repos/aws/conflict1/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/aws-conflict1.java
@@ -13,14 +13,13 @@
  * permissions and limitations under the License.
  */
 package com.amazonaws.services.dynamodb.sessionmanager;
-
 import java.io.File;
-
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.session.PersistentManagerBase;
 import org.apache.juli.logging.Log;
-
+import org.apache.juli.logging.LogFactory;
 import com.amazonaws.AmazonClientException;
+import com.amazonaws.ClientConfiguration;
 import com.amazonaws.auth.AWSCredentialsProvider;
 import com.amazonaws.auth.BasicAWSCredentials;
 import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
@@ -29,32 +28,26 @@ import com.amazonaws.internal.StaticCredentialsProvider;
 import com.amazonaws.regions.RegionUtils;
 import com.amazonaws.services.dynamodb.sessionmanager.util.DynamoUtils;
 import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
-
-/**
- * Tomcat 7.0 persistent session manager implementation that uses Amazon
- * DynamoDB to store HTTP session data.
- */
-public class DynamoDBSessionManager extends PersistentManagerBase {
-
-    private static final String DEFAULT_TABLE_NAME = "Tomcat_SessionState";
-
-    private static final String name = "AmazonDynamoDBSessionManager";
-    private static final String info = name + "/2.0";
-
-    private String regionId = "us-east-1";
-    private String endpoint;
-    private File credentialsFile;
-    private String accessKey;
-    private String secretKey;
-    private long readCapacityUnits = 10;
-    private long writeCapacityUnits = 5;
-    private boolean createIfNotExist = true;
-    private String tableName = DEFAULT_TABLE_NAME;
-
-    private final DynamoDBSessionStore dynamoSessionStore;
-
-    private static Log logger;
-
+import com.amazonaws.util.StringUtils;
+
+public class DynamoDBSessionManager extends PersistentManagerBase{
+
+    private static final String DEFAULT_TABLE_NAME = "Tomcat_SessionState";,
+    private static final String name = "AmazonDynamoDBSessionManager";,
+    private static final String info = name + "/2.0";,
+    private String regionId = "us-east-1";,
+    private String endpoint;,
+    private File credentialsFile;,
+    private String accessKey;,
+    private String secretKey;,
+    private long readCapacityUnits = 10;,
+    private long writeCapacityUnits = 5;,
+    private boolean createIfNotExist = true;,
+    private String proxyHost;,
+    private Integer proxyPort;,
+    private final DynamoDBSessionStore dynamoSessionStore;,
+    private ExpiredSessionReaper expiredSessionReaper;,
+    private static final Log logger = LogFactory.getLog(DynamoDBSessionManager.class);,
 
     public DynamoDBSessionManager() {
         dynamoSessionStore = new DynamoDBSessionStore();
@@ -68,7 +61,6 @@ public class DynamoDBSessionManager extends PersistentManagerBase {
         setMaxIdleBackup(30); // 30 seconds
     }
 
-    @Override
     public String getInfo() {
         return info;
     }
@@ -79,8 +71,8 @@ public class DynamoDBSessionManager extends PersistentManagerBase {
     }
 
     //
+
     // Context.xml Configuration Members
-    //
 
     public void setRegionId(String regionId) {
         this.regionId = regionId;
@@ -118,31 +110,43 @@ public class DynamoDBSessionManager extends PersistentManagerBase {
         this.createIfNotExist = createIfNotExist;
     }
 
+    public void setProxyHost(String proxyHost) {
+        this.proxyHost = proxyHost;
+    }
+
+    public void setProxyPort(Integer proxyPort) {
+        this.proxyPort = proxyPort;
+    }
 
-    //
     // Private Interface
-    //
 
     @Override
     protected void initInternal() throws LifecycleException {
         this.setDistributable(true);
 
-        // Grab the container's logger
-        logger = getContainer().getLogger();
-
         AWSCredentialsProvider credentialsProvider = initCredentials();
-        AmazonDynamoDBClient dynamo = new AmazonDynamoDBClient(credentialsProvider);
-        if (this.regionId != null) dynamo.setRegion(RegionUtils.getRegion(this.regionId));
-        if (this.endpoint != null) dynamo.setEndpoint(this.endpoint);
+        ClientConfiguration clientConfiguration = initClientConfiguration();
+
+        AmazonDynamoDBClient dynamo = new AmazonDynamoDBClient(credentialsProvider, clientConfiguration);
+        if (this.regionId != null) {
+            dynamo.setRegion(RegionUtils.getRegion(this.regionId));
+        }
+        if (this.endpoint != null) {
+            dynamo.setEndpoint(this.endpoint);
+        }
 
         initDynamoTable(dynamo);
 
         // init session store
         dynamoSessionStore.setDynamoClient(dynamo);
         dynamoSessionStore.setSessionTableName(this.tableName);
+<<<<<<< left_content.java
 
+=======
+>>>>>>> right_content.java
     }
 
+
     @Override
     protected synchronized void stopInternal() throws LifecycleException {
         super.stopInternal();
@@ -156,53 +160,87 @@ public class DynamoDBSessionManager extends PersistentManagerBase {
                     + "and automatic table creation has been disabled in context.xml");
         }
 
-        if (!tableExists) DynamoUtils.createSessionTable(dynamo, this.tableName,
-                this.readCapacityUnits, this.writeCapacityUnits);
+        if (!tableExists) {
+            DynamoUtils.createSessionTable(dynamo, this.tableName, this.readCapacityUnits, this.writeCapacityUnits);
+        }
 
         DynamoUtils.waitForTableToBecomeActive(dynamo, this.tableName);
     }
 
     private AWSCredentialsProvider initCredentials() {
-        // Attempt to use any explicitly specified credentials first
-        if (accessKey != null || secretKey != null) {
-            getContainer().getLogger().debug("Reading security credentials from context.xml");
-            if (accessKey == null || secretKey == null) {
+        // Attempt to use any credentials specified in context.xml first
+        if (credentialsExistInContextConfig()) {
+            // Fail fast if credentials aren't valid as user has likely made a configuration mistake
+            if (credentialsInContextConfigAreValid()) {
                 throw new AmazonClientException("Incomplete AWS security credentials specified in context.xml.");
             }
-            getContainer().getLogger().debug("Using AWS access key ID and secret key from context.xml");
+            debug("Using AWS access key ID and secret key from context.xml");
             return new StaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey));
         }
 
         // Use any explicitly specified credentials properties file next
         if (credentialsFile != null) {
             try {
-                getContainer().getLogger().debug("Reading security credentials from properties file: " + credentialsFile);
+                debug("Reading security credentials from properties file: " + credentialsFile);
                 PropertiesCredentials credentials = new PropertiesCredentials(credentialsFile);
-                getContainer().getLogger().debug("Using AWS credentials from file: " + credentialsFile);
+                debug("Using AWS credentials from file: " + credentialsFile);
                 return new StaticCredentialsProvider(credentials);
             } catch (Exception e) {
                 throw new AmazonClientException(
-                        "Unable to read AWS security credentials from file specified in context.xml: " + credentialsFile, e);
+                        "Unable to read AWS security credentials from file specified in context.xml: "
+                                + credentialsFile, e);
             }
         }
 
         // Fall back to the default credentials chain provider if credentials weren't explicitly set
         AWSCredentialsProvider defaultChainProvider = new DefaultAWSCredentialsProviderChain();
         if (defaultChainProvider.getCredentials() == null) {
-            getContainer().getLogger().debug("Loading security credentials from default credentials provider chain.");
+            debug("Loading security credentials from default credentials provider chain.");
             throw new AmazonClientException(
-                    "Unable find AWS security credentials.  " +
-                    "Searched JVM system properties, OS env vars, and EC2 instance roles.  " +
-                    "Specify credentials in Tomcat's context.xml file or put them in one of the places mentioned above.");
+                    "Unable find AWS security credentials.  "
+                            + "Searched JVM system properties, OS env vars, and EC2 instance roles.  "
+                            + "Specify credentials in Tomcat's context.xml file or put them in one of the places mentioned above.");
         }
-        getContainer().getLogger().debug("Using default AWS credentials provider chain to load credentials");
+        debug("Using default AWS credentials provider chain to load credentials");
         return defaultChainProvider;
     }
 
+    /**
+     * @return True if the user has set their AWS credentials either partially or completely in
+     *         context.xml. False otherwise
+     */
+
+    private boolean credentialsExistInContextConfig() {
+        return accessKey != null || secretKey != null;
+    }
+
+    /**
+     * @return True if both the access key and secret key were set in context.xml config. False
+     *         otherwise
+     */
+
+    private boolean credentialsInContextConfigAreValid() {
+        return StringUtils.isNullOrEmpty(accessKey) || StringUtils.isNullOrEmpty(secretKey);
+    }
+
+    private ClientConfiguration initClientConfiguration() {
+        ClientConfiguration clientConfiguration = new ClientConfiguration();
+
+        // Attempt to use an explicit proxy configuration
+        if (proxyHost != null || proxyPort != null) {
+            debug("Reading proxy settings from context.xml");
+            if (proxyHost == null || proxyPort == null) {
+                throw new AmazonClientException("Incomplete proxy settings specified in context.xml."
+                        + " Both proxy hot and proxy port needs to be specified");
+            }
+            debug("Using proxy host and port from context.xml");
+            clientConfiguration.withProxyHost(proxyHost).withProxyPort(proxyPort);
+        }
+
+        return clientConfiguration;
+    }
 
-    //
     // Logger Utility Functions
-    //
 
     public static void debug(String s) {
         logger.debug(s);
@@ -223,4 +261,5 @@ public class DynamoDBSessionManager extends PersistentManagerBase {
     public static void error(String s, Exception e) {
         logger.error(s, e);
     }
-}
+
+}
\ No newline at end of file
