diff --git a/java_case_studies/reference_repos/stateless4j/conflict3/desired.java b/java_case_studies/demo_results/MethodUnion/stateless4j-conflict3.java
index 64d4dcb..9325efc 100644
--- a/java_case_studies/reference_repos/stateless4j/conflict3/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/stateless4j-conflict3.java
@@ -1,19 +1,29 @@
 package com.github.oxo42.stateless4j;
-
 import com.github.oxo42.stateless4j.delegates.*;
 import com.github.oxo42.stateless4j.transitions.Transition;
 import com.github.oxo42.stateless4j.transitions.TransitioningTriggerBehaviour;
 import com.github.oxo42.stateless4j.triggers.*;
+import com.github.oxo42.stateless4j.validation.Enforce;
+
+public class StateConfiguration <TState , TTrigger >{
 
-public class StateConfiguration<TState , TTrigger > {
     private static final FuncBoolean NO_GUARD = new FuncBoolean() {
         @Override
         public boolean call() {
             return true;
         }
-    };
-    private final StateRepresentation<TState, TTrigger> representation;
-    private final Func2<TState, StateRepresentation<TState, TTrigger>> lookup;
+    };,
+
+    <<<<<<< left_content.java
+=======
+@Override
+        public boolean call() {
+            return true;
+        }
+>>>>>>> right_content.java
+
+    private final StateRepresentation<TState, TTrigger> representation;,
+    private final Func2<TState, StateRepresentation<TState, TTrigger>> lookup;,
 
     public StateConfiguration(final StateRepresentation<TState, TTrigger> representation, final Func2<TState, StateRepresentation<TState, TTrigger>> lookup) {
         assert representation != null : "representation is null";
@@ -22,6 +32,10 @@ public class StateConfiguration<TState , TTrigger > {
         this.lookup = lookup;
     }
 
+    public StateConfiguration(StateRepresentation<TState, TTrigger> representation, Func2<TState, StateRepresentation<TState, TTrigger>> lookup) {
+        this.representation = Enforce.argumentNotNull(representation, "representation");
+        this.lookup = Enforce.argumentNotNull(lookup, "lookup");
+    }
 
     /**
      * Accept the specified trigger and transition to the destination state
@@ -30,12 +44,12 @@ public class StateConfiguration<TState , TTrigger > {
      * @param destinationState The state that the trigger will cause a transition to
      * @return The reciever
      */
+
     public StateConfiguration<TState, TTrigger> permit(TTrigger trigger, TState destinationState) {
         enforceNotIdentityTransition(destinationState);
         return publicPermit(trigger, destinationState);
     }
 
-
     /**
      * Accept the specified trigger and transition to the destination state
      *
@@ -44,11 +58,16 @@ public class StateConfiguration<TState , TTrigger > {
      * @param guard            Function that must return true in order for the trigger to be accepted
      * @return The reciever
      */
+
     public StateConfiguration<TState, TTrigger> permitIf(TTrigger trigger, TState destinationState, FuncBoolean guard) {
         enforceNotIdentityTransition(destinationState);
         return publicPermitIf(trigger, destinationState, guard);
     }
 
+    public StateConfiguration<TState, TTrigger> permitIf(TTrigger trigger, TState destinationState, Func<Boolean> guard) {
+        enforceNotIdentityTransition(destinationState);
+        return publicPermitIf(trigger, destinationState, guard);
+    }
 
     /**
      * Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the
@@ -60,11 +79,11 @@ public class StateConfiguration<TState , TTrigger > {
      * @param trigger The accepted trigger
      * @return The reciever
      */
+
     public StateConfiguration<TState, TTrigger> permitReentry(TTrigger trigger) {
         return publicPermit(trigger, representation.getUnderlyingState());
     }
 
-
     /**
      * Accept the specified trigger, execute exit actions and re-execute entry actions. Reentry behaves as though the
      * configured state transitions to an identical sibling state
@@ -76,10 +95,14 @@ public class StateConfiguration<TState , TTrigger > {
      * @param guard   Function that must return true in order for the trigger to be accepted
      * @return The reciever
      */
+
     public StateConfiguration<TState, TTrigger> permitReentryIf(TTrigger trigger, FuncBoolean guard) {
         return publicPermitIf(trigger, representation.getUnderlyingState(), guard);
     }
 
+    public StateConfiguration<TState, TTrigger> permitReentryIf(TTrigger trigger, Func<Boolean> guard) {
+        return publicPermitIf(trigger, representation.getUnderlyingState(), guard);
+    }
 
     /**
      * ignore the specified trigger when in the configured state
@@ -87,11 +110,11 @@ public class StateConfiguration<TState , TTrigger > {
      * @param trigger The trigger to ignore
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> ignore(TTrigger trigger) {
         return ignoreIf(trigger, NO_GUARD);
     }
 
-
     /**
      * ignore the specified trigger when in the configured state, if the guard returns true
      *
@@ -99,19 +122,26 @@ public class StateConfiguration<TState , TTrigger > {
      * @param guard   Function that must return true in order for the trigger to be ignored
      * @return The receiver
      */
+
+    public StateConfiguration<TState, TTrigger> ignoreIf(TTrigger trigger, FuncBoolean guard) {
+        Enforce.argumentNotNull(guard, "guard");
+        representation.addTriggerBehaviour(new IgnoredTriggerBehaviour<TState, TTrigger>(trigger, guard));
+        return this;
+    }
+
     public StateConfiguration<TState, TTrigger> ignoreIf(TTrigger trigger, Func<Boolean> guard) {
         assert guard != null : "guard is null";
         representation.addTriggerBehaviour(new IgnoredTriggerBehaviour<TState, TTrigger>(trigger, guard));
         return this;
     }
 
-
     /**
      * Specify an action that will execute when transitioning into the configured state
      *
      * @param entryAction Action to execute
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> onEntry(final Action entryAction) {
         assert entryAction != null : "entryAction is null";
         return onEntry(new Action1<Transition<TState, TTrigger>>() {
@@ -121,6 +151,9 @@ public class StateConfiguration<TState , TTrigger > {
         });
     }
 
+    public void doIt(Transition<TState, TTrigger> t) {
+                entryAction.doIt();
+            }
 
     /**
      * Specify an action that will execute when transitioning into the configured state
@@ -128,6 +161,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param entryAction Action to execute, providing details of the transition
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> onEntry(final Action1<Transition<TState, TTrigger>> entryAction) {
         assert entryAction != null : "entryAction is null";
         representation.addEntryAction(new Action2<Transition<TState, TTrigger>, Object[]>() {
@@ -138,6 +172,9 @@ public class StateConfiguration<TState , TTrigger > {
         return this;
     }
 
+    public void doIt(Transition<TState, TTrigger> arg1, Object[] arg2) {
+                entryAction.doIt(arg1);
+            }
 
     /**
      * Specify an action that will execute when transitioning into the configured state
@@ -146,6 +183,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param entryAction Action to execute
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> onEntryFrom(TTrigger trigger, final Action entryAction) {
         assert entryAction != null : "entryAction is null";
         return onEntryFrom(trigger, new Action1<Transition<TState, TTrigger>>() {
@@ -155,6 +193,7 @@ public class StateConfiguration<TState , TTrigger > {
         });
     }
 
+    
 
     /**
      * Specify an action that will execute when transitioning into the configured state
@@ -163,6 +202,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param entryAction Action to execute, providing details of the transition
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> onEntryFrom(TTrigger trigger, final Action1<Transition<TState, TTrigger>> entryAction) {
         assert entryAction != null : "entryAction is null";
         representation.addEntryAction(trigger, new Action2<Transition<TState, TTrigger>, Object[]>() {
@@ -173,7 +213,6 @@ public class StateConfiguration<TState , TTrigger > {
         return this;
     }
 
-
     /**
      * Specify an action that will execute when transitioning into the configured state
      *
@@ -183,6 +222,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg0>     Type of the first trigger argument
      * @return The receiver
      */
+
     public <TArg0> StateConfiguration<TState, TTrigger> onEntryFrom(TriggerWithParameters1<TArg0, TState, TTrigger> trigger, final Action1<TArg0> entryAction, final Class<TArg0> classe0) {
         assert entryAction != null : "entryAction is null";
         return onEntryFrom(trigger, new Action2<TArg0, Transition<TState, TTrigger>>() {
@@ -192,16 +232,10 @@ public class StateConfiguration<TState , TTrigger > {
         }, classe0);
     }
 
+    public void doIt(TArg0 arg1, Transition<TState, TTrigger> arg2) {
+                entryAction.doIt(arg1);
+            }
 
-    /**
-     * Specify an action that will execute when transitioning into the configured state
-     *
-     * @param trigger     The trigger by which the state must be entered in order for the action to execute
-     * @param entryAction Action to execute, providing details of the transition
-     * @param classe0     Class argument
-     * @param <TArg0>     Type of the first trigger argument
-     * @return The receiver
-     */
     public <TArg0> StateConfiguration<TState, TTrigger> onEntryFrom(TriggerWithParameters1<TArg0, TState, TTrigger> trigger, final Action2<TArg0, Transition<TState, TTrigger>> entryAction, final Class<TArg0> classe0) {
         assert trigger != null : "trigger is null";
         assert entryAction != null : "entryAction is null";
@@ -214,6 +248,10 @@ public class StateConfiguration<TState , TTrigger > {
         return this;
     }
 
+    @SuppressWarnings("unchecked")
+            public void doIt(Transition<TState, TTrigger> t, Object[] arg2) {
+                entryAction.doIt((TArg0) arg2[0], t);
+            }
 
     /**
      * Specify an action that will execute when transitioning into the configured state
@@ -226,6 +264,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg1>     Type of the second trigger argument
      * @return The receiver
      */
+
     public <TArg0, TArg1> StateConfiguration<TState, TTrigger> onEntryFrom(TriggerWithParameters2<TArg0, TArg1, TState, TTrigger> trigger, final Action2<TArg0, TArg1> entryAction, final Class<TArg0> classe0, final Class<TArg1> classe1) {
         assert entryAction != null : "entryAction is null";
         return onEntryFrom(trigger, new Action3<TArg0, TArg1, Transition<TState, TTrigger>>() {
@@ -235,18 +274,10 @@ public class StateConfiguration<TState , TTrigger > {
         }, classe0, classe1);
     }
 
+    public void doIt(TArg0 a0, TArg1 a1, Transition<TState, TTrigger> t) {
+                entryAction.doIt(a0, a1);
+            }
 
-    /**
-     * Specify an action that will execute when transitioning into the configured state
-     *
-     * @param trigger     The trigger by which the state must be entered in order for the action to execute
-     * @param entryAction Action to execute, providing details of the transition
-     * @param classe0     Class argument
-     * @param classe1     Class argument
-     * @param <TArg0>     Type of the first trigger argument
-     * @param <TArg1>     Type of the second trigger argument
-     * @return The receiver
-     */
     public <TArg0, TArg1> StateConfiguration<TState, TTrigger> onEntryFrom(TriggerWithParameters2<TArg0, TArg1, TState, TTrigger> trigger, final Action3<TArg0, TArg1, Transition<TState, TTrigger>> entryAction, final Class<TArg0> classe0, final Class<TArg1> classe1) {
         assert trigger != null : "trigger is null";
         assert entryAction != null : "entryAction is null";
@@ -261,6 +292,7 @@ public class StateConfiguration<TState , TTrigger > {
         return this;
     }
 
+    
 
     /**
      * Specify an action that will execute when transitioning into the configured state
@@ -275,6 +307,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg2>     Type of the third trigger argument
      * @return The receiver
      */
+
     public <TArg0, TArg1, TArg2> StateConfiguration<TState, TTrigger> onEntryFrom(TriggerWithParameters3<TArg0, TArg1, TArg2, TState, TTrigger> trigger, final Action3<TArg0, TArg1, TArg2> entryAction, final Class<TArg0> classe0, final Class<TArg1> classe1, final Class<TArg2> classe2) {
         assert entryAction != null : "entryAction is null";
         return onEntryFrom(trigger, new Action4<TArg0, TArg1, TArg2, Transition<TState, TTrigger>>() {
@@ -284,20 +317,10 @@ public class StateConfiguration<TState , TTrigger > {
         }, classe0, classe1, classe2);
     }
 
+    public void doIt(TArg0 a0, TArg1 a1, TArg2 a2, Transition<TState, TTrigger> t) {
+                entryAction.doIt(a0, a1, a2);
+            }
 
-    /**
-     * Specify an action that will execute when transitioning into the configured state
-     *
-     * @param trigger     The trigger by which the state must be entered in order for the action to execute
-     * @param entryAction Action to execute, providing details of the transition
-     * @param classe0     Class argument
-     * @param classe1     Class argument
-     * @param classe2     Class argument
-     * @param <TArg0>     Type of the first trigger argument
-     * @param <TArg1>     Type of the second trigger argument
-     * @param <TArg2>     Type of the third trigger argument
-     * @return The receiver
-     */
     public <TArg0, TArg1, TArg2> StateConfiguration<TState, TTrigger> onEntryFrom(TriggerWithParameters3<TArg0, TArg1, TArg2, TState, TTrigger> trigger, final Action4<TArg0, TArg1, TArg2, Transition<TState, TTrigger>> entryAction, final Class<TArg0> classe0, final Class<TArg1> classe1, final Class<TArg2> classe2) {
         assert trigger != null : "trigger is null";
         assert entryAction != null : "entryAction is null";
@@ -313,13 +336,13 @@ public class StateConfiguration<TState , TTrigger > {
         return this;
     }
 
-
     /**
      * Specify an action that will execute when transitioning from the configured state
      *
      * @param exitAction Action to execute
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> onExit(final Action exitAction) {
         assert exitAction != null : "exitAction is null";
         return onExit(new Action1<Transition<TState, TTrigger>>() {
@@ -329,20 +352,12 @@ public class StateConfiguration<TState , TTrigger > {
         });
     }
 
-
-    /**
-     * Specify an action that will execute when transitioning from the configured state
-     *
-     * @param exitAction Action to execute
-     * @return The receiver
-     */
     public StateConfiguration<TState, TTrigger> onExit(Action1<Transition<TState, TTrigger>> exitAction) {
         assert exitAction != null : "exitAction is null";
         representation.addExitAction(exitAction);
         return this;
     }
 
-
     /**
      * Sets the superstate that the configured state is a substate of
      * <p/>
@@ -355,6 +370,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param superstate The superstate
      * @return The receiver
      */
+
     public StateConfiguration<TState, TTrigger> substateOf(TState superstate) {
         StateRepresentation<TState, TTrigger> superRepresentation = lookup.call(superstate);
         representation.setSuperstate(superRepresentation);
@@ -362,7 +378,6 @@ public class StateConfiguration<TState , TTrigger > {
         return this;
     }
 
-
     /**
      * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied
      * function
@@ -371,11 +386,11 @@ public class StateConfiguration<TState , TTrigger > {
      * @param destinationStateSelector Function to calculate the state that the trigger will cause a transition to
      * @return The reciever
      */
+
     public StateConfiguration<TState, TTrigger> permitDynamic(TTrigger trigger, final Func<TState> destinationStateSelector) {
         return permitDynamicIf(trigger, destinationStateSelector, NO_GUARD);
     }
 
-
     /**
      * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied
      * function
@@ -385,11 +400,11 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg0>                  Type of the first trigger argument
      * @return The receiver
      */
+
     public <TArg0> StateConfiguration<TState, TTrigger> permitDynamic(TriggerWithParameters1<TArg0, TState, TTrigger> trigger, Func2<TArg0, TState> destinationStateSelector) {
         return permitDynamicIf(trigger, destinationStateSelector, NO_GUARD);
     }
 
-
     /**
      * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied
      * function
@@ -400,6 +415,7 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg1>                  Type of the second trigger argument
      * @return The receiver
      */
+
     public <TArg0, TArg1> StateConfiguration<TState, TTrigger> permitDynamic(
             TriggerWithParameters2<TArg0, TArg1, TState, TTrigger> trigger,
             Func3<TArg0, TArg1, TState> destinationStateSelector) {
@@ -417,11 +433,11 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg2>                  Type of the third trigger argument
      * @return The receiver
      */
+
     public <TArg0, TArg1, TArg2> StateConfiguration<TState, TTrigger> permitDynamic(TriggerWithParameters3<TArg0, TArg1, TArg2, TState, TTrigger> trigger, final Func4<TArg0, TArg1, TArg2, TState> destinationStateSelector) {
         return permitDynamicIf(trigger, destinationStateSelector, NO_GUARD);
     }
 
-
     /**
      * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied
      * function
@@ -431,13 +447,18 @@ public class StateConfiguration<TState , TTrigger > {
      * @param guard                    Function that must return true in order for the  trigger to be accepted
      * @return The reciever
      */
-<<<<<<< HEAD
+
     public StateConfiguration<TState, TTrigger> permitDynamicIf(TTrigger trigger, final Func<TState> destinationStateSelector, FuncBoolean guard) {
         Enforce.argumentNotNull(destinationStateSelector, "destinationStateSelector");
-=======
+        return publicPermitDynamicIf(trigger, new Func2<Object[], TState>() {
+            public TState call(Object[] arg0) {
+                return destinationStateSelector.call();
+            }
+        }, guard);
+    }
+
     public StateConfiguration<TState, TTrigger> permitDynamicIf(TTrigger trigger, final Func<TState> destinationStateSelector, Func<Boolean> guard) {
         assert destinationStateSelector != null : "destinationStateSelector is null";
->>>>>>> 6ba3bc5f65b7182fa6a45cac78f141c43eda5378
         return publicPermitDynamicIf(trigger, new Func2<Object[], TState>() {
             public TState call(Object[] arg0) {
                 return destinationStateSelector.call();
@@ -445,6 +466,9 @@ public class StateConfiguration<TState , TTrigger > {
         }, guard);
     }
 
+    public TState call(Object[] arg0) {
+                return destinationStateSelector.call();
+            }
 
     /**
      * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied
@@ -456,15 +480,25 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg0>                  Type of the first trigger argument
      * @return The reciever
      */
-<<<<<<< HEAD
+
     public <TArg0> StateConfiguration<TState, TTrigger> permitDynamicIf(TriggerWithParameters1<TArg0, TState, TTrigger> trigger, final Func2<TArg0, TState> destinationStateSelector, FuncBoolean guard) {
         Enforce.argumentNotNull(trigger, "trigger");
         Enforce.argumentNotNull(destinationStateSelector, "destinationStateSelector");
-=======
+        return publicPermitDynamicIf(
+                trigger.getTrigger(), new Func2<Object[], TState>() {
+                    @SuppressWarnings("unchecked")
+                    public TState call(Object[] args) {
+                        return destinationStateSelector.call((TArg0) args[0]);
+
+                    }
+                },
+                guard
+        );
+    }
+
     public <TArg0> StateConfiguration<TState, TTrigger> permitDynamicIf(TriggerWithParameters1<TArg0, TState, TTrigger> trigger, final Func2<TArg0, TState> destinationStateSelector, Func<Boolean> guard) {
         assert trigger != null : "trigger is null";
         assert destinationStateSelector != null : "destinationStateSelector is null";
->>>>>>> 6ba3bc5f65b7182fa6a45cac78f141c43eda5378
         return publicPermitDynamicIf(
                 trigger.getTrigger(), new Func2<Object[], TState>() {
                     @SuppressWarnings("unchecked")
@@ -477,6 +511,8 @@ public class StateConfiguration<TState , TTrigger > {
         );
     }
 
+    
+
     /**
      * Accept the specified trigger and transition to the destination state, calculated dynamically by the supplied
      * function
@@ -488,15 +524,27 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg1>                  Type of the second trigger argument
      * @return The reciever
      */
-<<<<<<< HEAD
+
     public <TArg0, TArg1> StateConfiguration<TState, TTrigger> permitDynamicIf(TriggerWithParameters2<TArg0, TArg1, TState, TTrigger> trigger, final Func3<TArg0, TArg1, TState> destinationStateSelector, FuncBoolean guard) {
         Enforce.argumentNotNull(trigger, "trigger");
         Enforce.argumentNotNull(destinationStateSelector, "destinationStateSelector");
-=======
+        return publicPermitDynamicIf(
+                trigger.getTrigger(), new Func2<Object[], TState>() {
+                    @SuppressWarnings("unchecked")
+
+                    public TState call(Object[] args) {
+                        return destinationStateSelector.call(
+                                (TArg0) args[0],
+                                (TArg1) args[1]);
+                    }
+                },
+                guard
+        );
+    }
+
     public <TArg0, TArg1> StateConfiguration<TState, TTrigger> permitDynamicIf(TriggerWithParameters2<TArg0, TArg1, TState, TTrigger> trigger, final Func3<TArg0, TArg1, TState> destinationStateSelector, Func<Boolean> guard) {
         assert trigger != null : "trigger is null";
         assert destinationStateSelector != null : "destinationStateSelector is null";
->>>>>>> 6ba3bc5f65b7182fa6a45cac78f141c43eda5378
         return publicPermitDynamicIf(
                 trigger.getTrigger(), new Func2<Object[], TState>() {
                     @SuppressWarnings("unchecked")
@@ -523,15 +571,28 @@ public class StateConfiguration<TState , TTrigger > {
      * @param <TArg2>                  Type of the third trigger argument
      * @return The reciever
      */
-<<<<<<< HEAD
+
     public <TArg0, TArg1, TArg2> StateConfiguration<TState, TTrigger> permitDynamicIf(TriggerWithParameters3<TArg0, TArg1, TArg2, TState, TTrigger> trigger, final Func4<TArg0, TArg1, TArg2, TState> destinationStateSelector, FuncBoolean guard) {
         Enforce.argumentNotNull(trigger, "trigger");
         Enforce.argumentNotNull(destinationStateSelector, "destinationStateSelector");
-=======
+        return publicPermitDynamicIf(
+                trigger.getTrigger(), new Func2<Object[], TState>() {
+                    @SuppressWarnings("unchecked")
+
+                    public TState call(Object[] args) {
+                        return destinationStateSelector.call(
+                                (TArg0) args[0],
+                                (TArg1) args[1],
+                                (TArg2) args[2]
+                        );
+                    }
+                }, guard
+        );
+    }
+
     public <TArg0, TArg1, TArg2> StateConfiguration<TState, TTrigger> permitDynamicIf(TriggerWithParameters3<TArg0, TArg1, TArg2, TState, TTrigger> trigger, final Func4<TArg0, TArg1, TArg2, TState> destinationStateSelector, Func<Boolean> guard) {
         assert trigger != null : "trigger is null";
         assert destinationStateSelector != null : "destinationStateSelector is null";
->>>>>>> 6ba3bc5f65b7182fa6a45cac78f141c43eda5378
         return publicPermitDynamicIf(
                 trigger.getTrigger(), new Func2<Object[], TState>() {
                     @SuppressWarnings("unchecked")
@@ -557,6 +618,12 @@ public class StateConfiguration<TState , TTrigger > {
         return publicPermitIf(trigger, destinationState, NO_GUARD);
     }
 
+    StateConfiguration<TState, TTrigger> publicPermitIf(TTrigger trigger, TState destinationState, FuncBoolean guard) {
+        Enforce.argumentNotNull(guard, "guard");
+        representation.addTriggerBehaviour(new TransitioningTriggerBehaviour<>(trigger, destinationState, guard));
+        return this;
+    }
+
     StateConfiguration<TState, TTrigger> publicPermitIf(TTrigger trigger, TState destinationState, Func<Boolean> guard) {
         assert guard != null : "guard is null";
         representation.addTriggerBehaviour(new TransitioningTriggerBehaviour<>(trigger, destinationState, guard));
@@ -567,10 +634,18 @@ public class StateConfiguration<TState , TTrigger > {
         return publicPermitDynamicIf(trigger, destinationStateSelector, NO_GUARD);
     }
 
+    StateConfiguration<TState, TTrigger> publicPermitDynamicIf(TTrigger trigger, Func2<Object[], TState> destinationStateSelector, FuncBoolean guard) {
+        Enforce.argumentNotNull(destinationStateSelector, "destinationStateSelector");
+        Enforce.argumentNotNull(guard, "guard");
+        representation.addTriggerBehaviour(new DynamicTriggerBehaviour<>(trigger, destinationStateSelector, guard));
+        return this;
+    }
+
     StateConfiguration<TState, TTrigger> publicPermitDynamicIf(TTrigger trigger, Func2<Object[], TState> destinationStateSelector, Func<Boolean> guard) {
         assert destinationStateSelector != null : "destinationStateSelector is null";
         assert guard != null : "guard is null";
         representation.addTriggerBehaviour(new DynamicTriggerBehaviour<>(trigger, destinationStateSelector, guard));
         return this;
     }
-}
+
+}
\ No newline at end of file
