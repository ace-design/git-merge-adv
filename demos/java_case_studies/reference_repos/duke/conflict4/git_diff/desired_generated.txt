diff --git a/java_case_studies/reference_repos/duke/conflict4/desired.java b/java_case_studies/demo_results/MethodUnion/duke-conflict4.java
index 3560559..5ffe9f3 100644
--- a/java_case_studies/reference_repos/duke/conflict4/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/duke-conflict4.java
@@ -1,63 +1,66 @@
-
 package no.priv.garshol.duke;
-
 import java.util.Map;
 import java.util.List;
 import java.util.HashMap;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-
 import no.priv.garshol.duke.utils.Utils;
 import no.priv.garshol.duke.utils.ObjectUtils;
 
-/**
- * Holds the configuration details for a dataset.
- */
-public class ConfigurationImpl implements Configuration {
+public class ConfigurationImpl implements Configuration{
+
 
-  // there are two modes: deduplication and record linkage. in
-  // deduplication mode all sources are in 'datasources'. in record
-  // linkage mode they are in 'group1' and 'group2'. couldn't think
-  // of a better solution. sorry.
-  private Collection<DataSource> datasources;
-  private Collection<DataSource> group1;
-  private Collection<DataSource> group2;
+    // there are two modes: deduplication and record linkage. in
 
-  private double threshold;
-  private double thresholdMaybe;
+    // deduplication mode all sources are in 'datasources'. in record
 
-  private Map<String, Property> properties;
-  private List<Property> proplist; // duplicate to preserve order
-  private Collection<Property> lookups; // subset of properties
+    // linkage mode they are in 'group1' and 'group2'. couldn't think
 
-  private Database database1;
-  private Database database2; // used for record linkage, if necessary
+    // of a better solution. sorry.
+    private Collection<DataSource> datasources;,
+    private Collection<DataSource> group1;,
+    private Collection<DataSource> group2;,
+    private double threshold;,
+    private double thresholdMaybe;,
+    private Map<String, Property> properties;,
 
-  private List<Comparator> customComparators;
+    // duplicate to preserve order
+    private List<Property> proplist;,
 
-  public ConfigurationImpl() {
+    // subset of properties
+    private Collection<Property> lookups;,
+    private List<Comparator> customComparators;,
+    private Database database1;,
+
+    // used for record linkage, if necessary
+    private Database database2;,
+    private Database database;,
+
+    public ConfigurationImpl() {
     this.datasources = new ArrayList();
     this.group1 = new ArrayList();
     this.group2 = new ArrayList();
     this.customComparators = new ArrayList<Comparator>();
   }
 
-  /**
+    /**
    * Returns the data sources to use (in deduplication mode; don't use
    * this method in record linkage mode).
    */
-  public Collection<DataSource> getDataSources() {
+
+    public Collection<DataSource> getDataSources() {
     return datasources;
   }
 
-  /**
+    /**
    * Returns the data sources belonging to a particular group of data
    * sources. Data sources are grouped in record linkage mode, but not
    * in deduplication mode, so only use this method in record linkage
    * mode.
    */
-  public Collection<DataSource> getDataSources(int groupno) {
+
+    public Collection<DataSource> getDataSources(int groupno) {
     if (groupno == 1)
       return group1;
     else if (groupno == 2)
@@ -66,12 +69,13 @@ public class ConfigurationImpl implements Configuration {
       throw new DukeConfigException("Invalid group number: " + groupno);
   }
 
-  /**
+    /**
    * Adds a data source to the configuration. If in deduplication mode
    * groupno == 0, otherwise it gives the number of the group to which
    * the data source belongs.
    */
-  public void addDataSource(int groupno, DataSource datasource) {
+
+    public void addDataSource(int groupno, DataSource datasource) {
     // the loader takes care of validation
     if (groupno == 0)
       datasources.add(datasource);
@@ -81,11 +85,11 @@ public class ConfigurationImpl implements Configuration {
       group2.add(datasource);
   }
 
-  public Database getDatabase(boolean overwrite) {
+    public Database getDatabase(boolean overwrite) {
     return getDatabase(1, overwrite);
   }
 
-  public Database getDatabase(int groupno, boolean overwrite) {
+    public Database getDatabase(int groupno, boolean overwrite) {
     Database thedb;
     if (groupno == 1) {
       if (database1 == null) // not set, so use default
@@ -103,7 +107,11 @@ public class ConfigurationImpl implements Configuration {
     return thedb;
   }
 
-  public void addDatabase(Database database) {
+    public void setDatabase(Database database) {
+    this.database = database;
+  }
+
+    public void addDatabase(Database database) {
     if (database1 == null)
       database1 = database;
     else if (database2 == null)
@@ -112,53 +120,59 @@ public class ConfigurationImpl implements Configuration {
       throw new DukeConfigException("Too many database objects configured");
   }
 
-  /**
+    /**
    * The probability threshold used to decide whether two records
    * represent the same entity. If the probability is higher than this
    * value, the two records are considered to represent the same
    * entity.
    */
-  public double getThreshold() {
+
+    public double getThreshold() {
     return threshold;
   }
 
-  /**
+    /**
    * Sets the probability threshold for considering two records
    * equivalent.
    */
-  public void setThreshold(double threshold) {
+
+    public void setThreshold(double threshold) {
     this.threshold = threshold;
   }
 
-  /**
+    /**
    * The probability threshold used to decide whether two records may
    * represent the same entity. If the probability is higher than this
    * value, the two records are considered possible matches. Can be 0,
    * in which case no records are considered possible matches.
    */
-  public double getMaybeThreshold() {
+
+    public double getMaybeThreshold() {
     return thresholdMaybe;
   }
 
-  /**
+    /**
    * Returns true iff we are in deduplication mode.
    */
-  public boolean isDeduplicationMode() {
+
+    public boolean isDeduplicationMode() {
     return !getDataSources().isEmpty();
   }
 
-  /**
+    /**
    * Sets the probability threshold for considering two records
    * possibly equivalent. Does not have to be set.
    */
-  public void setMaybeThreshold(double thresholdMaybe) {
+
+    public void setMaybeThreshold(double thresholdMaybe) {
     this.thresholdMaybe = thresholdMaybe;
   }
 
-  /**
+    /**
    * The set of properties Duke is to work with.
    */
-  public void setProperties(List<Property> props) {
+
+    public void setProperties(List<Property> props) {
     this.proplist = props;
     this.properties = new HashMap(props.size());
     for (Property prop : props)
@@ -168,19 +182,21 @@ public class ConfigurationImpl implements Configuration {
     findLookupProperties();
   }
 
-  /**
+    /**
    * The set of properties Duke records can have, and their associated
    * cleaners, comparators, and probabilities.
    */
-  public List<Property> getProperties() {
+
+    public List<Property> getProperties() {
     return proplist;
   }
 
-  /**
+    /**
    * The properties which are used to identify records, rather than
    * compare them.
    */
-  public Collection<Property> getIdentityProperties() {
+
+    public Collection<Property> getIdentityProperties() {
     Collection<Property> ids = new ArrayList();
     for (Property p : getProperties())
       if (p.isIdProperty())
@@ -188,28 +204,31 @@ public class ConfigurationImpl implements Configuration {
     return ids;
   }
 
-  /**
+    /**
    * Returns the property with the given name, or null if there is no
    * such property.
    */
-  public Property getPropertyByName(String name) {
+
+    public Property getPropertyByName(String name) {
     return properties.get(name);
   }
 
-  /**
+    /**
    * Returns the properties Duke queries for in the Lucene index. This
    * is a subset of getProperties(), and is computed based on the
    * probabilities and the threshold.
    */
-  public Collection<Property> getLookupProperties() {
+
+    public Collection<Property> getLookupProperties() {
     return lookups;
   }
 
-  /**
+    /**
    * Validates the configuration to verify that it makes sense.
    * Rejects configurations that will fail during runtime.
    */
-  public void validate() {
+
+    public void validate() {
     // verify that we do have properties
     if (properties == null || properties.isEmpty())
       throw new DukeConfigException("Configuration has no properties at all");
@@ -236,7 +255,7 @@ public class ConfigurationImpl implements Configuration {
       throw new DukeConfigException("No ID properties.");
   }
 
-  private void findLookupProperties() {
+    private void findLookupProperties() {
     List<Property> candidates = new ArrayList();
     for (Property prop : properties.values())
       // leave out properties that are either not used for comparisons,
@@ -282,8 +301,10 @@ public class ConfigurationImpl implements Configuration {
     }
   }
 
-  private static class HighComparator implements java.util.Comparator<Property> {
-    public int compare(Property p1, Property p2) {
+    private static class HighComparator implements java.util.Comparator<Property>{
+
+
+        public int compare(Property p1, Property p2) {
       if (p1.getHighProbability() < p2.getHighProbability())
         return 1;
       else if (p1.getHighProbability() == p2.getHighProbability())
@@ -291,9 +312,9 @@ public class ConfigurationImpl implements Configuration {
       else
         return -1;
     }
-  }
 
-  public Configuration copy() {
+    }
+    public Configuration copy() {
     ConfigurationImpl copy = new ConfigurationImpl();
     for (DataSource src : datasources)
       copy.addDataSource(0, src);
@@ -316,14 +337,14 @@ public class ConfigurationImpl implements Configuration {
     return copy;
   }
 
-
-  @Override
-  public List<Comparator> getCustomComparators() {
+    @Override
+  public List<Comparator> getCustomComparators() {	
 	return this.customComparators;
   }
 
-  @Override
-  public void addCustomComparator(Comparator comparator) {
+    @Override
+  public void addCustomComparator(Comparator comparator) { 
 	this.customComparators.add(comparator);
   }
-}
+
+}
\ No newline at end of file
