diff --git a/java_case_studies/reference_repos/duke/conflict4/desired.java b/java_case_studies/reference_repos/duke/conflict4/spork_result.java
index 3560559..d48be07 100644
--- a/java_case_studies/reference_repos/duke/conflict4/desired.java
+++ b/java_case_studies/reference_repos/duke/conflict4/spork_result.java
@@ -1,40 +1,51 @@
-
 package no.priv.garshol.duke;
 
-import java.util.Map;
-import java.util.List;
-import java.util.HashMap;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-
-import no.priv.garshol.duke.utils.Utils;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 import no.priv.garshol.duke.utils.ObjectUtils;
+import no.priv.garshol.duke.utils.Utils;
+
 
 /**
  * Holds the configuration details for a dataset.
  */
 public class ConfigurationImpl implements Configuration {
-
+  // there are two modes: deduplication and record linkage. in
+  // deduplication mode all sources are in 'datasources'. in record
+  // linkage mode they are in 'group1' and 'group2'. couldn't think
+  // of a better solution. sorry.
   // there are two modes: deduplication and record linkage. in
   // deduplication mode all sources are in 'datasources'. in record
   // linkage mode they are in 'group1' and 'group2'. couldn't think
   // of a better solution. sorry.
   private Collection<DataSource> datasources;
+
   private Collection<DataSource> group1;
+
   private Collection<DataSource> group2;
 
   private double threshold;
+
   private double thresholdMaybe;
 
   private Map<String, Property> properties;
+
+  // duplicate to preserve order
   private List<Property> proplist; // duplicate to preserve order
+
+  // subset of properties
   private Collection<Property> lookups; // subset of properties
 
+  private List<Comparator> customComparators;
+
   private Database database1;
-  private Database database2; // used for record linkage, if necessary
 
-  private List<Comparator> customComparators;
+  // used for record linkage, if necessary
+  private Database database2; // used for record linkage, if necessary
 
   public ConfigurationImpl() {
     this.datasources = new ArrayList();
@@ -78,7 +89,7 @@ public class ConfigurationImpl implements Configuration {
     else if (groupno == 1)
       group1.add(datasource);
     else if (groupno == 2)
-      group2.add(datasource);
+      group2.add(datasource);    
   }
 
   public Database getDatabase(boolean overwrite) {
@@ -88,28 +99,33 @@ public class ConfigurationImpl implements Configuration {
   public Database getDatabase(int groupno, boolean overwrite) {
     Database thedb;
     if (groupno == 1) {
-      if (database1 == null) // not set, so use default
+    // not set, so use default
+      if (database1 == null) {
         database1 = new no.priv.garshol.duke.databases.LuceneDatabase();
+      }
       thedb = database1;
-    } else if (groupno == 2)
-      thedb = database2; // no default for no 2
-    else
+    } else if (groupno == 2) {
+      thedb = database2;
+    } else // no default for no 2
+    {
       throw new DukeException("Can only have two databases");
-
+    }
     if (thedb != null) {
       thedb.setConfiguration(this);
-      thedb.setOverwrite(overwrite); // hmmm?
+    // hmmm?
+      thedb.setOverwrite(overwrite);
     }
     return thedb;
   }
 
   public void addDatabase(Database database) {
-    if (database1 == null)
+    if (database1 == null) {
       database1 = database;
-    else if (database2 == null)
+    } else if (database2 == null) {
       database2 = database;
-    else
+    } else {
       throw new DukeConfigException("Too many database objects configured");
+    }
   }
 
   /**
@@ -213,7 +229,7 @@ public class ConfigurationImpl implements Configuration {
     // verify that we do have properties
     if (properties == null || properties.isEmpty())
       throw new DukeConfigException("Configuration has no properties at all");
-
+    
     // check if max prob is below threshold
     // this code duplicates code in findLookupProperties(), but prefer
     // that to creating an attribute
@@ -262,7 +278,7 @@ public class ConfigurationImpl implements Configuration {
         break;
       }
     }
-
+    
     if (last == -1)
       lookups = new ArrayList();
     else
@@ -284,46 +300,48 @@ public class ConfigurationImpl implements Configuration {
 
   private static class HighComparator implements java.util.Comparator<Property> {
     public int compare(Property p1, Property p2) {
-      if (p1.getHighProbability() < p2.getHighProbability())
+      if (p1.getHighProbability() < p2.getHighProbability()) {
         return 1;
-      else if (p1.getHighProbability() == p2.getHighProbability())
+      } else if (p1.getHighProbability() == p2.getHighProbability()) {
         return 0;
-      else
+      } else {
         return -1;
+      }
     }
   }
 
   public Configuration copy() {
     ConfigurationImpl copy = new ConfigurationImpl();
-    for (DataSource src : datasources)
+    for (DataSource src : datasources) {
       copy.addDataSource(0, src);
-    for (DataSource src : group1)
+    }
+    for (DataSource src : group1) {
       copy.addDataSource(1, src);
-    for (DataSource src : group2)
+    }
+    for (DataSource src : group2) {
       copy.addDataSource(2, src);
-
+    }
     copy.setThreshold(threshold);
     copy.setMaybeThreshold(thresholdMaybe);
     copy.addDatabase(database1);
-    if (database2 != null)
+    if (database2 != null) {
       copy.addDatabase(database2);
-
+    }
     List<Property> newprops = new ArrayList();
-    for (Property p : proplist)
+    for (Property p : proplist) {
       newprops.add(p.copy());
+    }
     copy.setProperties(newprops);
-
     return copy;
   }
 
-
   @Override
-  public List<Comparator> getCustomComparators() {
-	return this.customComparators;
+  public List<Comparator> getCustomComparators() {	
+  	return this.customComparators;
   }
 
   @Override
-  public void addCustomComparator(Comparator comparator) {
-	this.customComparators.add(comparator);
+  public void addCustomComparator(Comparator comparator) { 
+  	this.customComparators.add(comparator);
   }
 }
