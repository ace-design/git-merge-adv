diff --git a/java_case_studies/reference_repos/duke/conflict4/left.java b/java_case_studies/reference_repos/duke/conflict4/right.java
index 1f22613..e6a0c43 100644
--- a/java_case_studies/reference_repos/duke/conflict4/left.java
+++ b/java_case_studies/reference_repos/duke/conflict4/right.java
@@ -30,14 +30,15 @@ public class ConfigurationImpl implements Configuration {
   private Map<String, Property> properties;
   private List<Property> proplist; // duplicate to preserve order
   private Collection<Property> lookups; // subset of properties
-
-  private Database database1;
-  private Database database2; // used for record linkage, if necessary
-
+  private List<Comparator> customComparators;
+  
+  private Database database;
+  
   public ConfigurationImpl() {
     this.datasources = new ArrayList();
     this.group1 = new ArrayList();
     this.group2 = new ArrayList();
+    this.customComparators = new ArrayList<Comparator>();
   }
 
   /**
@@ -75,40 +76,22 @@ public class ConfigurationImpl implements Configuration {
     else if (groupno == 1)
       group1.add(datasource);
     else if (groupno == 2)
-      group2.add(datasource);
+      group2.add(datasource);    
   }
 
   public Database getDatabase(boolean overwrite) {
-    return getDatabase(1, overwrite);
-  }
-
-  public Database getDatabase(int groupno, boolean overwrite) {
-    Database thedb;
-    if (groupno == 1) {
-      if (database1 == null) // not set, so use default
-        database1 = new no.priv.garshol.duke.databases.LuceneDatabase();
-      thedb = database1;
-    } else if (groupno == 2)
-      thedb = database2; // no default for no 2
-    else
-      throw new DukeException("Can only have two databases");
-
-    if (thedb != null) {
-      thedb.setConfiguration(this);
-      thedb.setOverwrite(overwrite); // hmmm?
-    }
-    return thedb;
+    if (database == null) // not set, so use default
+      database = new no.priv.garshol.duke.databases.LuceneDatabase();
+    
+    database.setConfiguration(this);
+    database.setOverwrite(overwrite); // hmmm?
+    return database;
   }
 
-  public void addDatabase(Database database) {
-    if (database1 == null)
-      database1 = database;
-    else if (database2 == null)
-      database2 = database;
-    else
-      throw new DukeConfigException("Too many database objects configured");
+  public void setDatabase(Database database) {
+    this.database = database;
   }
-
+  
   /**
    * The probability threshold used to decide whether two records
    * represent the same entity. If the probability is higher than this
@@ -143,7 +126,7 @@ public class ConfigurationImpl implements Configuration {
   public boolean isDeduplicationMode() {
     return !getDataSources().isEmpty();
   }
-
+  
   /**
    * Sets the probability threshold for considering two records
    * possibly equivalent. Does not have to be set.
@@ -192,7 +175,7 @@ public class ConfigurationImpl implements Configuration {
   public Property getPropertyByName(String name) {
     return properties.get(name);
   }
-
+  
   /**
    * Returns the properties Duke queries for in the Lucene index. This
    * is a subset of getProperties(), and is computed based on the
@@ -210,7 +193,7 @@ public class ConfigurationImpl implements Configuration {
     // verify that we do have properties
     if (properties == null || properties.isEmpty())
       throw new DukeConfigException("Configuration has no properties at all");
-
+    
     // check if max prob is below threshold
     // this code duplicates code in findLookupProperties(), but prefer
     // that to creating an attribute
@@ -259,7 +242,7 @@ public class ConfigurationImpl implements Configuration {
         break;
       }
     }
-
+    
     if (last == -1)
       lookups = new ArrayList();
     else
@@ -277,7 +260,7 @@ public class ConfigurationImpl implements Configuration {
 
       lookups.add(p);
     }
-  }
+  }  
 
   private static class HighComparator implements java.util.Comparator<Property> {
     public int compare(Property p1, Property p2) {
@@ -298,12 +281,10 @@ public class ConfigurationImpl implements Configuration {
       copy.addDataSource(1, src);
     for (DataSource src : group2)
       copy.addDataSource(2, src);
-
+    
     copy.setThreshold(threshold);
     copy.setMaybeThreshold(thresholdMaybe);
-    copy.addDatabase(database1);
-    if (database2 != null)
-      copy.addDatabase(database2);
+    copy.setDatabase(database);
 
     List<Property> newprops = new ArrayList();
     for (Property p : proplist)
@@ -312,4 +293,15 @@ public class ConfigurationImpl implements Configuration {
 
     return copy;
   }
-}
+
+  
+  @Override
+  public List<Comparator> getCustomComparators() {	
+	return this.customComparators;
+  }
+
+  @Override
+  public void addCustomComparator(Comparator comparator) { 
+	this.customComparators.add(comparator);
+  }
+}
\ No newline at end of file
