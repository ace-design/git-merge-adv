diff --git a/java_case_studies/reference_repos/duke/conflict2/desired.java b/java_case_studies/demo_results/MethodUnion/duke-conflict2.java
index 1d2ce86..03cbccf 100644
--- a/java_case_studies/reference_repos/duke/conflict2/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/duke-conflict2.java
@@ -1,23 +1,10 @@
-
 package no.priv.garshol.duke.databases;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-
-import no.priv.garshol.duke.Comparator;
-import no.priv.garshol.duke.Configuration;
-import no.priv.garshol.duke.Database;
-import no.priv.garshol.duke.DukeConfigException;
-import no.priv.garshol.duke.DukeException;
-import no.priv.garshol.duke.Property;
-import no.priv.garshol.duke.Record;
-import no.priv.garshol.duke.comparators.GeopositionComparator;
-import no.priv.garshol.duke.utils.Utils;
-
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.core.KeywordAnalyzer;
@@ -25,55 +12,64 @@ import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.index.DirectoryReader;
-import org.apache.lucene.index.IndexNotFoundException;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.IndexableField;
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.IndexNotFoundException;
+import org.apache.lucene.index.DirectoryReader;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.BooleanClause.Occur;
-import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Filter;
-import org.apache.lucene.search.FuzzyQuery;
+import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.IndexSearcher;
-import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.FuzzyQuery;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
-import org.apache.lucene.store.NIOFSDirectory;
 import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.store.NIOFSDirectory;
 import org.apache.lucene.util.Version;
+import no.priv.garshol.duke.Record;
+import no.priv.garshol.duke.Property;
+import no.priv.garshol.duke.Database;
+import no.priv.garshol.duke.Comparator;
+import no.priv.garshol.duke.Configuration;
+import no.priv.garshol.duke.DukeException;
+import no.priv.garshol.duke.DukeConfigException;
+import no.priv.garshol.duke.utils.Utils;
+import no.priv.garshol.duke.comparators.GeopositionComparator;
+
+public class LuceneDatabase implements Database{
+
+    private Configuration config;,
+    private EstimateResultTracker maintracker;,
+    private IndexWriter iwriter;,
+    private Directory directory;,
+    private IndexReader reader;,
+    private IndexSearcher searcher;,
+    private Analyzer analyzer;,
+
+    // Deichman case:
+
+    //  1 = 40 minutes
 
-/**
- * Represents the Lucene index, and implements record linkage services
- * on top of it.
- */
-public class LuceneDatabase implements Database {
-  private Configuration config;
-  private EstimateResultTracker maintracker;
-  private IndexWriter iwriter;
-  private Directory directory;
-  private IndexReader reader;
-  private IndexSearcher searcher;
-  private Analyzer analyzer;
-  // Deichman case:
-  //  1 = 40 minutes
-  //  4 = 48 minutes
-  private final static int SEARCH_EXPANSION_FACTOR = 1;
-  private int max_search_hits;
-  private float min_relevance;
-  private boolean overwrite;
-  private String path;
-  private boolean fuzzy_search;
-  public BoostMode boost_mode;
-
-  // helper for geostuff
-  private GeoProperty geoprop;
-  
-  public LuceneDatabase() {
+    //  4 = 48 minutes
+    private final static int SEARCH_EXPANSION_FACTOR = 1;,
+    private int max_search_hits;,
+    private float min_relevance;,
+    private boolean overwrite;,
+    private String path;,
+    private boolean fuzzy_search;,
+    public BoostMode boost_mode;,
+
+    // helper for geostuff
+    private GeoProperty geoprop;,
+
+    public LuceneDatabase() {
     this.analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);
     this.maintracker = new EstimateResultTracker();
     this.max_search_hits = 1000000;
@@ -81,67 +77,73 @@ public class LuceneDatabase implements Database {
     this.boost_mode = BoostMode.QUERY;
   }
 
-  public void setConfiguration(Configuration config) {
+    public void setConfiguration(Configuration config) {
     this.config = config;
   }
 
-  public void setOverwrite(boolean overwrite) {
+    public void setOverwrite(boolean overwrite) {
     this.overwrite = overwrite;
   }
 
-  public void setMaxSearchHits(int max_search_hits) {
+    public void setMaxSearchHits(int max_search_hits) {
     this.max_search_hits = max_search_hits;
   }
 
-  public void setMinRelevance(float min_relevance) {
+    public void setMinRelevance(float min_relevance) {
     this.min_relevance = min_relevance;
   }
 
-  /**
+    /**
    * Controls whether to use fuzzy searches for properties that have
    * fuzzy comparators. True by default.
    */
-  public void setFuzzySearch(boolean fuzzy_search) {
+
+    public void setFuzzySearch(boolean fuzzy_search) {
     this.fuzzy_search = fuzzy_search;
   }
 
-  /**
+    /**
    * Returns the path to the Lucene index directory. If null, it means
    * the Lucene index is kept in-memory.
    */
-  public String getPath() {
+
+    public String getPath() {
     return path;
   }
-  
-  /**
+
+    /**
    * The path to the Lucene index directory. If null or not set, it
    * means the Lucene index is kept in-memory.
    */
-  public void setPath(String path) {
+
+    public void setPath(String path) {
     this.path = path;
   }
-  
-  /**
+
+    /**
+   * Returns true iff the Lucene index is held in memory rather than
+   * on disk.
+   */
+
+    /**
    * Tells the database to boost Lucene fields when searching for
    * candidate matches, depending on their probabilities. This can
    * help Lucene better pick the most interesting candidates.
    */
-  public void setBoostMode(BoostMode boost_mode) {
-    this.boost_mode = boost_mode;
-  }
-  
-  /**
-   * Returns true iff the Lucene index is held in memory rather than
-   * on disk.
-   */
-  public boolean isInMemory() {
+
+    public boolean isInMemory() {
     return (directory instanceof RAMDirectory);
   }
 
-  /**
+    public void setBoostMode(BoostMode boost_mode) {
+    this.boost_mode = boost_mode;
+  }
+
+    /**
    * Add the record to the index.
    */
-  public void index(Record record) {
+
+    public void index(Record record) {
     if (directory == null)
       init();
 
@@ -201,7 +203,7 @@ public class LuceneDatabase implements Database {
     }
   }
 
-  private void delete(Record record) {
+    private void delete(Record record) {
     // removes previous copy of this record from the index, if it's there
     Property idprop = config.getIdentityProperties().iterator().next();
     Query q = parseTokens(idprop.getName(), record.getValue(idprop.getName()));
@@ -212,10 +214,11 @@ public class LuceneDatabase implements Database {
     }
   }
 
-  /**
+    /**
    * Flushes all changes to disk.
    */
-  public void commit() {
+
+    public void commit() {
     if (directory == null)
       return;
     
@@ -236,10 +239,11 @@ public class LuceneDatabase implements Database {
     }
   }
 
-  /**
+    /**
    * Look up record by identity.
    */
-  public Record findRecordById(String id) {
+
+    public Record findRecordById(String id) {
     if (directory == null)
       init();
     
@@ -251,10 +255,11 @@ public class LuceneDatabase implements Database {
     return null; // not found
   }
 
-  /**
+    /**
    * Look up potentially matching records.
    */
-  public Collection<Record> findCandidateMatches(Record record) {
+
+    public Collection<Record> findCandidateMatches(Record record) {
     // if we have a geoprop it means that's the only way to search
     if (geoprop != null) {
       String value = record.getValue(geoprop.getName());
@@ -280,11 +285,12 @@ public class LuceneDatabase implements Database {
     // do the query
     return maintracker.doQuery(query);
   }
-  
-  /**
+
+    /**
    * Stores state to disk and closes all open resources.
    */
-  public void close() {
+
+    public void close() {
     if (directory == null)
       return;
     
@@ -298,15 +304,9 @@ public class LuceneDatabase implements Database {
     }
   }
 
-  public String toString() {
-    return "LuceneDatabase, max-search-hits: " + max_search_hits +
-      ", min-relevance: " + min_relevance + ", fuzzy: " + fuzzy_search +
-      ", boost-mode: " + boost_mode + "\n  " + directory;
-  }
-  
-  // ----- INTERNALS
+    // ----- INTERNALS
 
-  private void init() {
+    private void init() {
     try {
       openIndexes(overwrite);
       openSearchers();
@@ -315,8 +315,14 @@ public class LuceneDatabase implements Database {
       throw new DukeException(e);
     }
   }
-  
-  private void openIndexes(boolean overwrite) {
+
+    public String toString() {
+    return "LuceneDatabase, max-search-hits: " + max_search_hits +
+      ", min-relevance: " + min_relevance + ", fuzzy: " + fuzzy_search +
+      ", boost-mode: " + boost_mode + "\n  " + directory;
+  }
+
+    private void openIndexes(boolean overwrite) {
     if (directory == null) {
       try {
         if (path == null)
@@ -350,12 +356,12 @@ public class LuceneDatabase implements Database {
     }
   }
 
-  public void openSearchers() throws IOException {
+    public void openSearchers() throws IOException {
     reader = DirectoryReader.open(directory);
     searcher = new IndexSearcher(reader);
   }
-    
-  /** 
+
+    /** 
    * Parses the query. Using this instead of a QueryParser in order
    * to avoid thread-safety issues with Lucene's query parser.
    * 
@@ -363,7 +369,8 @@ public class LuceneDatabase implements Database {
    * @param value the value of the field
    * @return the parsed query
    */
-  private Query parseTokens(String fieldName, String value) {
+
+    private Query parseTokens(String fieldName, String value) {
     BooleanQuery searchQuery = new BooleanQuery();
     if (value != null) {
       Analyzer analyzer = new KeywordAnalyzer();
@@ -389,11 +396,40 @@ public class LuceneDatabase implements Database {
     return searchQuery;
   }
 
-  /**
+    /**
    * Parses Lucene query.
    * @param required Iff true, return only records matching this value.
    */
-  private void parseTokens(BooleanQuery parent, String fieldName,
+
+    protected void parseTokens(BooleanQuery parent, String fieldName,
+                             String value, boolean required) {
+    value = escapeLucene(value);
+    if (value.length() == 0)
+      return;
+
+    try {
+      TokenStream tokenStream =
+        analyzer.tokenStream(fieldName, new StringReader(value));
+      tokenStream.reset();
+      CharTermAttribute attr =
+        tokenStream.getAttribute(CharTermAttribute.class);
+			
+      while (tokenStream.incrementToken()) {
+        String term = attr.toString();
+        Query termQuery;
+        if (fuzzy_search && isFuzzy(fieldName))
+          termQuery = new FuzzyQuery(new Term(fieldName, term));
+        else
+          termQuery = new TermQuery(new Term(fieldName, term));
+        parent.add(termQuery, required ? Occur.MUST : Occur.SHOULD);
+      }
+    } catch (IOException e) {
+      throw new DukeException("Error parsing input string '"+value+"' "+
+                              "in field " + fieldName);
+    }
+  }
+
+    private void parseTokens(BooleanQuery parent, String fieldName,
                              String value, boolean required, double probability) {
     value = escapeLucene(value);
     if (value.length() == 0)
@@ -426,12 +462,12 @@ public class LuceneDatabase implements Database {
     }
   }
 
-  private boolean isFuzzy(String fieldName) {
+    private boolean isFuzzy(String fieldName) {
     Comparator c = config.getPropertyByName(fieldName).getComparator();
     return c != null && c.isTokenized();
   }
 
-  private String escapeLucene(String query) {
+    private String escapeLucene(String query) {
     char[] tmp = new char[query.length() * 2];
     int count = 0;
     for (int ix = 0; ix < query.length(); ix++) {
@@ -447,12 +483,12 @@ public class LuceneDatabase implements Database {
     return new String(tmp, 0, count).trim();
   }
 
-  public Collection<Record> lookup(Property property, String value) {
+    public Collection<Record> lookup(Property property, String value) {
     Query query = parseTokens(property.getName(), value);
     return maintracker.doQuery(query);
   }
-  
-  /**
+
+    /**
    * The tracker is used to estimate the size of the query result
    * we should ask Lucene for. This parameter is the single biggest
    * influence on search performance, but setting it too low causes
@@ -462,25 +498,30 @@ public class LuceneDatabase implements Database {
    * The tracker uses a ring buffer of recent result sizes to
    * estimate the result size.
    */
-  class EstimateResultTracker {
-    private int limit;
-    /**
+
+    class EstimateResultTracker{
+
+        private int limit;,
+
+        /**
      * Ring buffer containing n last search result sizes, except for
      * searches which found nothing.
      */
-    private int[] prevsizes;
-    private int sizeix; // position in prevsizes
+        private int[] prevsizes;,
 
-    public EstimateResultTracker() {
+        // position in prevsizes
+        private int sizeix;,
+
+        public EstimateResultTracker() {
       this.limit = 100;
       this.prevsizes = new int[10];
     }
 
-    public Collection<Record> doQuery(Query query) {
+        public Collection<Record> doQuery(Query query) {
       return doQuery(query, null);
     }
-    
-    public Collection<Record> doQuery(Query query, Filter filter) {
+
+        public Collection<Record> doQuery(Query query, Filter filter) {
       List<Record> matches;
       try {
         ScoreDoc[] hits;
@@ -513,22 +554,23 @@ public class LuceneDatabase implements Database {
         throw new DukeException(e);
       }
       return matches;
-    }    
-    
-    private double average() {
+    }
+
+        private double average() {
       int sum = 0;
       int ix = 0;
       for (; ix < prevsizes.length && prevsizes[ix] != 0; ix++)
         sum += prevsizes[ix];
       return sum / (double) ix;
     }
-  }
 
-  /**
+    }
+    /**
    * Checks to see if we need the spatial support, and if so creates
    * the necessary context objects.
    */
-  private void initSpatial() {
+
+    private void initSpatial() {
     // FIXME: for now, we only use geosearch if that's the only way to
     // find suitable records, since we don't know how to combine
     // geosearch ranking with normal search ranking.
@@ -541,27 +583,32 @@ public class LuceneDatabase implements Database {
     
     geoprop = new GeoProperty(prop);
   }
-  
-  public enum BoostMode {
-    /**
+
+    public enum BoostMode{
+
+
+        /**
      * Boost fields at query time.
      */
-    QUERY,
-    /**
+        QUERY,
+
+        /**
      * Boost fields at index time. This means records must be
      * reindexed to change the boosting.
      */
-    INDEX,
-    /**
+        INDEX,
+
+        /**
      * Don't boost fields.
      */
-    NONE;
-  }
-  
-  private Float getBoostFactor(double probability, BoostMode phase) {
+        NONE,
+
+    }
+    private Float getBoostFactor(double probability, BoostMode phase) {
     Float boost = null;
     if (phase == boost_mode)
       boost = (float) Math.sqrt(1.0 / ((1.0 - probability) * 2.0));
     return boost;
   }
-}
+
+}
\ No newline at end of file
