diff --git a/java_case_studies/reference_repos/TwelveMonkeys/importC1/desired.java b/java_case_studies/reference_repos/TwelveMonkeys/importC1/spork_result.java
index 08dfc2a..f604db4 100644
--- a/java_case_studies/reference_repos/TwelveMonkeys/importC1/desired.java
+++ b/java_case_studies/reference_repos/TwelveMonkeys/importC1/spork_result.java
@@ -27,7 +27,6 @@
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package com.twelvemonkeys.imageio.metadata.tiff;
 
 import com.twelvemonkeys.imageio.metadata.CompoundDirectory;
@@ -35,17 +34,20 @@ import com.twelvemonkeys.imageio.metadata.Directory;
 import com.twelvemonkeys.imageio.metadata.Entry;
 import com.twelvemonkeys.imageio.metadata.MetadataWriter;
 import com.twelvemonkeys.lang.Validate;
-
-import javax.imageio.IIOException;
-import javax.imageio.stream.ImageOutputStream;
 import java.io.IOException;
 import java.nio.ByteOrder;
 import java.nio.charset.StandardCharsets;
-import java.util.*;
-
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import javax.imageio.IIOException;
+import javax.imageio.stream.ImageOutputStream;
 import static com.twelvemonkeys.imageio.metadata.tiff.TIFFEntry.getType;
 import static com.twelvemonkeys.imageio.metadata.tiff.TIFFEntry.getValueLength;
 
+
 /**
  * TIFFWriter
  *
@@ -54,14 +56,18 @@ import static com.twelvemonkeys.imageio.metadata.tiff.TIFFEntry.getValueLength;
  * @version $Id: TIFFWriter.java,v 1.0 17.07.13 10:20 haraldk Exp$
  */
 public final class TIFFWriter extends MetadataWriter {
-
     private static final int WORD_LENGTH = 2;
+
     private static final int LONGWORD_LENGTH = 4;
 
+    // TODO: We probably want to gloss over client code writing IFDs in BigTIFF (or vice versa) somehow... Silently convert IFD -> IFD8
     // TODO: We probably want to gloss over client code writing IFDs in BigTIFF (or vice versa) somehow... Silently convert IFD -> IFD8
     private final boolean longOffsets;
-    private final int offsetSize;
+
+    private final long offsetSize;
+
     private final long entryLength;
+
     private final int directoryCountLength;
 
     public TIFFWriter() {
@@ -69,11 +75,10 @@ public final class TIFFWriter extends MetadataWriter {
     }
 
     public TIFFWriter(int offsetSize) {
-        this.offsetSize = Validate.isTrue(offsetSize == 4 || offsetSize == 8, offsetSize, "offsetSize must be 4 for TIFF or 8 for BigTIFF");
-
+        this.offsetSize = Validate.isTrue((offsetSize == 4) || (offsetSize == 8), offsetSize, "offsetSize must be 4 for TIFF or 8 for BigTIFF");
         longOffsets = offsetSize == 8;
-        directoryCountLength = longOffsets ? 8 : WORD_LENGTH;
-        entryLength = 2 * WORD_LENGTH + 2 * offsetSize;
+        directoryCountLength = (longOffsets) ? 8 : WORD_LENGTH;
+        entryLength = (2 * WORD_LENGTH) + (2 * offsetSize);
     }
 
     public boolean write(final Collection<? extends Entry> entries, final ImageOutputStream stream) throws IOException {
@@ -84,27 +89,20 @@ public final class TIFFWriter extends MetadataWriter {
     public boolean write(final Directory directory, final ImageOutputStream stream) throws IOException {
         Validate.notNull(directory);
         Validate.notNull(stream);
-
         // TODO: Should probably validate that the directory contains only valid TIFF entries...
         // the writer will crash on non-Integer ids and unsupported types
         // TODO: Implement the above validation in IFD constructor?
-
         writeTIFFHeader(stream);
-
         if (directory instanceof CompoundDirectory) {
-            CompoundDirectory compoundDirectory = (CompoundDirectory) directory;
-
+            CompoundDirectory compoundDirectory = ((CompoundDirectory) (directory));
             for (int i = 0; i < compoundDirectory.directoryCount(); i++) {
                 writeIFD(compoundDirectory.getDirectory(i), stream, false);
             }
-        }
-        else {
+        } else {
             writeIFD(directory, stream, false);
         }
-
         // Offset to next IFD (EOF)
         writeOffset(stream, 0);
-
         return true;
     }
 
@@ -113,9 +111,9 @@ public final class TIFFWriter extends MetadataWriter {
         ByteOrder byteOrder = stream.getByteOrder();
         stream.writeShort(byteOrder == ByteOrder.BIG_ENDIAN ? TIFF.BYTE_ORDER_MARK_BIG_ENDIAN : TIFF.BYTE_ORDER_MARK_LITTLE_ENDIAN);
         stream.writeShort(longOffsets ? TIFF.BIGTIFF_MAGIC : TIFF.TIFF_MAGIC);
-
         if (longOffsets) {
-            stream.writeShort(offsetSize); // Always 8 in this case
+            stream.writeShort(offsetSize);// Always 8 in this case
+
             stream.writeShort(0);
         }
     }
@@ -123,44 +121,35 @@ public final class TIFFWriter extends MetadataWriter {
     public long writeIFD(final Collection<Entry> entries, final ImageOutputStream stream) throws IOException {
         Validate.notNull(entries);
         Validate.notNull(stream);
-
         return writeIFD(new IFD(entries), stream, false);
     }
 
     private long writeIFD(final Directory original, final ImageOutputStream stream, final boolean isSubIFD) throws IOException {
         // TIFF spec says tags should be in increasing order, enforce that when writing
         Directory ordered = ensureOrderedDirectory(original);
-
         // Compute space needed for extra storage first, then write the offset to the IFD, so that the layout is:
         // IFD offset
         // <data including sub-IFDs>
         // IFD entries (values/offsets)
         long dataOffset = stream.getStreamPosition();
         long dataSize = computeDataSize(ordered);
-
         // Offset to this IFD
-        final long ifdOffset = stream.getStreamPosition() + dataSize + offsetSize;
-
+        final long ifdOffset = (stream.getStreamPosition() + dataSize) + offsetSize;
         if (!isSubIFD) {
             writeOffset(stream, ifdOffset);
             dataOffset += offsetSize;
-
             // Seek to offset
             stream.seek(ifdOffset);
+        } else {
+            dataOffset += directoryCountLength + (ordered.size() * entryLength);
         }
-        else {
-            dataOffset += directoryCountLength + ordered.size() * entryLength;
-        }
-
         // Write directory
         writeDirectoryCount(stream, ordered.size());
-
         for (Entry entry : ordered) {
             // Write tag id, type & value count
-            stream.writeShort((Integer) entry.getIdentifier());
+            stream.writeShort(((Integer) (entry.getIdentifier())));
             stream.writeShort(getType(entry));
             writeValueCount(stream, getCount(entry));
-
             // Write value
             Object value = entry.getValue();
             if (value instanceof Directory) {
@@ -168,22 +157,19 @@ public final class TIFFWriter extends MetadataWriter {
                     // Can't have both nested and linked IFDs
                     throw new AssertionError("SubIFD cannot contain linked IFDs");
                 }
-
                 // We can't write offset here, we need to write value, as both LONG/IFD and LONG8/IFD8 is allowed
                 // TODO: Or possibly gloss over, by always writing IFD8 for BigTIFF?
                 long streamPosition = stream.getStreamPosition() + offsetSize;
                 writeValueInline(dataOffset, getType(entry), stream);
                 stream.seek(dataOffset);
-                Directory subIFD = (Directory) value;
+                Directory subIFD = ((Directory) (value));
                 writeIFD(subIFD, stream, true);
                 dataOffset += computeDataSize(subIFD);
                 stream.seek(streamPosition);
-            }
-            else {
+            } else {
                 dataOffset += writeValue(entry, dataOffset, stream);
             }
         }
-
         return ifdOffset;
     }
 
@@ -206,50 +192,41 @@ public final class TIFFWriter extends MetadataWriter {
     }
 
     public long computeIFDSize(final Collection<? extends Entry> directory) {
-        return directoryCountLength + computeDataSize(new IFD(directory)) + directory.size() * entryLength;
+        return (directoryCountLength + computeDataSize(new IFD(directory))) + (directory.size() * entryLength);
     }
 
     private long computeDataSize(final Directory directory) {
         long dataSize = 0;
-
         for (Entry entry : directory) {
             long length = getValueLength(getType(entry), getCount(entry));
-
             if (length < 0) {
                 throw new IllegalArgumentException(String.format("Unknown size for entry %s", entry));
             }
-
             if (length > offsetSize) {
                 dataSize += length;
             }
-
             if (entry.getValue() instanceof Directory) {
-                Directory subIFD = (Directory) entry.getValue();
-                long subIFDSize = directoryCountLength + computeDataSize(subIFD) + subIFD.size() * entryLength;
+                Directory subIFD = ((Directory) (entry.getValue()));
+                long subIFDSize = (directoryCountLength + computeDataSize(subIFD)) + (subIFD.size() * entryLength);
                 dataSize += subIFDSize;
             }
         }
-
         return dataSize;
     }
 
     private Directory ensureOrderedDirectory(final Directory directory) {
         if (!isSorted(directory)) {
             List<Entry> entries = new ArrayList<>(directory.size());
-
             for (Entry entry : directory) {
                 entries.add(entry);
             }
-
             Collections.sort(entries, new Comparator<Entry>() {
                 public int compare(Entry left, Entry right) {
-                    return (Integer) left.getIdentifier() - (Integer) right.getIdentifier();
+                    return ((Integer) (left.getIdentifier())) - ((Integer) (right.getIdentifier()));
                 }
             });
-
             return new IFD(entries);
         }
-
         return directory;
     }
 
@@ -272,191 +249,152 @@ public final class TIFFWriter extends MetadataWriter {
     private long writeValue(final Entry entry, final long dataOffset, final ImageOutputStream stream) throws IOException {
         short type = getType(entry);
         long valueLength = getValueLength(type, getCount(entry));
-
         if (valueLength <= offsetSize) {
             writeValueInline(entry.getValue(), type, stream);
-
             // Pad
             for (long i = valueLength; i < offsetSize; i++) {
                 stream.write(0);
             }
-
             return 0;
-        }
-        else {
+        } else {
             writeValueAt(dataOffset, entry.getValue(), type, stream);
-
             return valueLength;
         }
     }
 
     private int getCount(final Entry entry) {
         Object value = entry.getValue();
-        return value instanceof String ? ((String) value).getBytes(StandardCharsets.UTF_8).length + 1 : entry.valueCount();
+        return value instanceof String ? ((String) (value)).getBytes(StandardCharsets.UTF_8).length + 1 : entry.valueCount();
     }
 
     private void writeValueInline(final Object value, final short type, final ImageOutputStream stream) throws IOException {
         if (value.getClass().isArray()) {
             switch (type) {
-                case TIFF.TYPE_UNDEFINED:
-                case TIFF.TYPE_BYTE:
-                case TIFF.TYPE_SBYTE:
-                    stream.write((byte[]) value);
+                case TIFF.TYPE_UNDEFINED :
+                case TIFF.TYPE_BYTE :
+                case TIFF.TYPE_SBYTE :
+                    stream.write(((byte[]) (value)));
                     break;
-
-                case TIFF.TYPE_SHORT:
-                case TIFF.TYPE_SSHORT:
+                case TIFF.TYPE_SHORT :
+                case TIFF.TYPE_SSHORT :
                     short[] shorts;
-
                     if (value instanceof short[]) {
-                        shorts = (short[]) value;
-                    }
-                    else if (value instanceof int[]) {
-                        int[] ints = (int[]) value;
+                        shorts = ((short[]) (value));
+                    } else if (value instanceof int[]) {
+                        int[] ints = ((int[]) (value));
                         shorts = new short[ints.length];
-
                         for (int i = 0; i < ints.length; i++) {
-                            shorts[i] = (short) ints[i];
+                            shorts[i] = ((short) (ints[i]));
                         }
-
-                    }
-                    else if (value instanceof long[]) {
-                        long[] longs = (long[]) value;
+                    } else if (value instanceof long[]) {
+                        long[] longs = ((long[]) (value));
                         shorts = new short[longs.length];
-
                         for (int i = 0; i < longs.length; i++) {
-                            shorts[i] = (short) longs[i];
+                            shorts[i] = ((short) (longs[i]));
                         }
-                    }
-                    else {
+                    } else {
                         throw new IllegalArgumentException("Unsupported type for TIFF SHORT: " + value.getClass());
                     }
-
                     stream.writeShorts(shorts, 0, shorts.length);
                     break;
-
-                case TIFF.TYPE_LONG:
-                case TIFF.TYPE_SLONG:
+                case TIFF.TYPE_LONG :
+                case TIFF.TYPE_SLONG :
                     int[] ints;
-
                     if (value instanceof int[]) {
-                        ints = (int[]) value;
-                    }
-                    else if (value instanceof long[]) {
-                        long[] longs = (long[]) value;
+                        ints = ((int[]) (value));
+                    } else if (value instanceof long[]) {
+                        long[] longs = ((long[]) (value));
                         ints = new int[longs.length];
-
                         for (int i = 0; i < longs.length; i++) {
-                            ints[i] = (int) longs[i];
+                            ints[i] = ((int) (longs[i]));
                         }
-                    }
-                    else {
+                    } else {
                         throw new IllegalArgumentException("Unsupported type for TIFF LONG: " + value.getClass());
                     }
-
                     stream.writeInts(ints, 0, ints.length);
                     break;
-
-                case TIFF.TYPE_RATIONAL:
-                case TIFF.TYPE_SRATIONAL:
-                    Rational[] rationals = (Rational[]) value;
+                case TIFF.TYPE_RATIONAL :
+                case TIFF.TYPE_SRATIONAL :
+                    Rational[] rationals = ((Rational[]) (value));
                     for (Rational rational : rationals) {
-                        stream.writeInt((int) rational.numerator());
-                        stream.writeInt((int) rational.denominator());
+                        stream.writeInt(((int) (rational.numerator())));
+                        stream.writeInt(((int) (rational.denominator())));
                     }
-
                     break;
-
-                case TIFF.TYPE_FLOAT:
+                case TIFF.TYPE_FLOAT :
                     float[] floats;
-
                     if (value instanceof float[]) {
-                        floats = (float[]) value;
-                    }
-                    else {
+                        floats = ((float[]) (value));
+                    } else {
                         throw new IllegalArgumentException("Unsupported type for TIFF FLOAT: " + value.getClass());
                     }
-
                     stream.writeFloats(floats, 0, floats.length);
-
                     break;
-
-                case TIFF.TYPE_DOUBLE:
+                case TIFF.TYPE_DOUBLE :
                     double[] doubles;
-
                     if (value instanceof double[]) {
-                        doubles = (double[]) value;
-                    }
-                    else {
+                        doubles = ((double[]) (value));
+                    } else {
                         throw new IllegalArgumentException("Unsupported type for TIFF DOUBLE: " + value.getClass());
                     }
-
                     stream.writeDoubles(doubles, 0, doubles.length);
-
                     break;
-                case TIFF.TYPE_LONG8:
-                case TIFF.TYPE_SLONG8:
+                case TIFF.TYPE_LONG8 :
+                case TIFF.TYPE_SLONG8 :
                     if (longOffsets) {
                         long[] longs;
-
                         if (value instanceof long[]) {
-                            longs = (long[]) value;
-                        }
-                        else {
+                            longs = ((long[]) (value));
+                        } else {
                             throw new IllegalArgumentException("Unsupported type for TIFF LONG8: " + value.getClass());
                         }
-
                         stream.writeLongs(longs, 0, longs.length);
-
                         break;
                     }
-
-                default:
+                default :
                     throw new IllegalArgumentException("Unsupported TIFF type: " + type);
             }
-        }
-        else {
+        } else {
             switch (type) {
-                case TIFF.TYPE_BYTE:
-                case TIFF.TYPE_SBYTE:
-                case TIFF.TYPE_UNDEFINED:
-                    stream.writeByte(((Number) value).intValue());
+                case TIFF.TYPE_BYTE :
+                case TIFF.TYPE_SBYTE :
+                case TIFF.TYPE_UNDEFINED :
+                    stream.writeByte(((Number) (value)).intValue());
                     break;
-                case TIFF.TYPE_ASCII:
-                    byte[] bytes = ((String) value).getBytes(StandardCharsets.UTF_8);
+                case TIFF.TYPE_ASCII :
+                    byte[] bytes = ((String) (value)).getBytes(StandardCharsets.UTF_8);
                     stream.write(bytes);
                     stream.write(0);
                     break;
-                case TIFF.TYPE_SHORT:
-                case TIFF.TYPE_SSHORT:
-                    stream.writeShort(((Number) value).intValue());
+                case TIFF.TYPE_SHORT :
+                case TIFF.TYPE_SSHORT :
+                    stream.writeShort(((Number) (value)).intValue());
                     break;
-                case TIFF.TYPE_LONG:
-                case TIFF.TYPE_SLONG:
-                case TIFF.TYPE_IFD:
-                    stream.writeInt(((Number) value).intValue());
+                case TIFF.TYPE_LONG :
+                case TIFF.TYPE_SLONG :
+                case TIFF.TYPE_IFD :
+                    stream.writeInt(((Number) (value)).intValue());
                     break;
-                case TIFF.TYPE_RATIONAL:
-                case TIFF.TYPE_SRATIONAL:
-                    Rational rational = (Rational) value;
-                    stream.writeInt((int) rational.numerator());
-                    stream.writeInt((int) rational.denominator());
+                case TIFF.TYPE_RATIONAL :
+                case TIFF.TYPE_SRATIONAL :
+                    Rational rational = ((Rational) (value));
+                    stream.writeInt(((int) (rational.numerator())));
+                    stream.writeInt(((int) (rational.denominator())));
                     break;
-                case TIFF.TYPE_FLOAT:
-                    stream.writeFloat(((Number) value).floatValue());
+                case TIFF.TYPE_FLOAT :
+                    stream.writeFloat(((Number) (value)).floatValue());
                     break;
-                case TIFF.TYPE_DOUBLE:
-                    stream.writeDouble(((Number) value).doubleValue());
+                case TIFF.TYPE_DOUBLE :
+                    stream.writeDouble(((Number) (value)).doubleValue());
                     break;
-                case TIFF.TYPE_LONG8:
-                case TIFF.TYPE_SLONG8:
-                case TIFF.TYPE_IFD8:
+                case TIFF.TYPE_LONG8 :
+                case TIFF.TYPE_SLONG8 :
+                case TIFF.TYPE_IFD8 :
                     if (longOffsets) {
-                        stream.writeLong(((Number) value).longValue());
+                        stream.writeLong(((Number) (value)).longValue());
                         break;
                     }
-
-                default:
+                default :
                     throw new IllegalArgumentException("Unsupported TIFF type: " + type);
             }
         }
@@ -473,9 +411,9 @@ public final class TIFFWriter extends MetadataWriter {
     public void writeOffset(final ImageOutputStream output, long offset) throws IOException {
         if (longOffsets) {
             output.writeLong(assertLongOffset(offset));
-        }
-        else {
-            output.writeInt(assertIntegerOffset(offset)); // Treated as unsigned
+        } else {
+            output.writeInt(assertIntegerOffset(offset));// Treated as unsigned
+
         }
     }
 
@@ -484,11 +422,10 @@ public final class TIFFWriter extends MetadataWriter {
     }
 
     private int assertIntegerOffset(final long offset) throws IIOException {
-        if (offset < 0 || offset > Integer.MAX_VALUE - (long) Integer.MIN_VALUE) {
+        if ((offset < 0) || (offset > (Integer.MAX_VALUE - ((long) (Integer.MIN_VALUE))))) {
             throw new IIOException("Integer overflow for TIFF stream");
         }
-
-        return (int) offset;
+        return ((int) (offset));
     }
 
     private long assertLongOffset(final long offset) throws IIOException {
