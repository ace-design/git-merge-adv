diff --git a/java_case_studies/reference_repos/mongojack/conflict1/desired.java b/java_case_studies/reference_repos/mongojack/conflict1/spork_result.java
index f79c24b..8143e77 100644
--- a/java_case_studies/reference_repos/mongojack/conflict1/desired.java
+++ b/java_case_studies/reference_repos/mongojack/conflict1/spork_result.java
@@ -41,6 +41,14 @@ import com.mongodb.client.model.UpdateOneModel;
 import com.mongodb.client.model.WriteModel;
 import com.mongodb.client.result.DeleteResult;
 import com.mongodb.client.result.UpdateResult;
+import java.lang.reflect.AnnotatedElement;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Optional;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.Collectors;
 import org.bson.BsonDocument;
 import org.bson.BsonValue;
 import org.bson.Document;
@@ -54,14 +62,6 @@ import org.mongojack.internal.util.DocumentSerializationUtils;
 import org.mongojack.internal.util.FindIterableDecorator;
 import org.mongojack.internal.util.MapReduceIterableDecorator;
 
-import java.lang.reflect.AnnotatedElement;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Optional;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.stream.Collectors;
 
 /**
  * A DBCollection that marshals/demarshals objects to/from Jackson annotated
@@ -94,34 +94,43 @@ import java.util.stream.Collectors;
  * @author James Roper
  * @since 1.0
  */
-@SuppressWarnings({"UnusedReturnValue"})
+@SuppressWarnings({ "UnusedReturnValue" })
 public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TResult> {
-
     private static final AtomicReference<ObjectMapper> DEFAULT_OBJECT_MAPPER = new AtomicReference<>();
+
     private final ObjectMapper objectMapper;
+
     private final JacksonCodecRegistry jacksonCodecRegistry;
+
     @SuppressWarnings("FieldCanBeLocal")
     private final Class<?> view;
+
     private final Class<TResult> valueClass;
+
     private final JavaType type;
+
     private final com.mongodb.client.MongoCollection<TResult> mongoCollection;
+
     private final SerializationOptions serializationOptions;
 
     /**
      * Private.
      */
-    private JacksonMongoCollection(
-        MongoCollection<TResult> mongoCollection,
-        ObjectMapper objectMapper,
-        Class<TResult> valueClass,
-        Class<?> view,
-        final SerializationOptions serializationOptions,
+    private JacksonMongoCollection(MongoCollection<TResult> mongoCollection, ObjectMapper objectMapper, Class<TResult> valueClass, Class<?> view, 
+<<<<<<< LEFT
         final UuidRepresentation uuidRepresentation
+=======
+        final SerializationOptions serializationOptions
+>>>>>>> RIGHT
     ) {
-        this.objectMapper = objectMapper != null ? objectMapper : getDefaultObjectMapper();
+        this.objectMapper = (objectMapper != null) ? objectMapper : getDefaultObjectMapper();
         this.view = view;
-        this.serializationOptions = serializationOptions;
+<<<<<<< LEFT
         final MongoCollection<TResult> underlyingCollection = mongoCollection.withDocumentClass(valueClass);
+=======
+        this.serializationOptions = serializationOptions;
+>>>>>>> RIGHT
+
         jacksonCodecRegistry = new JacksonCodecRegistry(this.objectMapper, underlyingCollection.getCodecRegistry(), this.view, uuidRepresentation);
         jacksonCodecRegistry.addCodecForClass(valueClass);
         this.mongoCollection = underlyingCollection.withCodecRegistry(jacksonCodecRegistry);
@@ -132,15 +141,7 @@ public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TR
     /**
      * Private.
      */
-    private JacksonMongoCollection(
-        final ObjectMapper objectMapper,
-        final JacksonCodecRegistry jacksonCodecRegistry,
-        final Class<?> view,
-        final Class<TResult> valueClass,
-        final JavaType type,
-        final MongoCollection<TResult> mongoCollection,
-        final SerializationOptions serializationOptions
-    ) {
+    private JacksonMongoCollection(final ObjectMapper objectMapper, final JacksonCodecRegistry jacksonCodecRegistry, final Class<?> view, final Class<TResult> valueClass, final JavaType type, final MongoCollection<TResult> mongoCollection, final SerializationOptions serializationOptions) {
         this.objectMapper = objectMapper;
         this.jacksonCodecRegistry = jacksonCodecRegistry;
         this.view = view;
@@ -567,15 +568,7 @@ public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TR
 
     @Override
     public <NewTDocument> JacksonMongoCollection<NewTDocument> withDocumentClass(final Class<NewTDocument> clazz) {
-        return new JacksonMongoCollection<>(
-            objectMapper,
-            jacksonCodecRegistry,
-            view,
-            clazz,
-            objectMapper.constructType(clazz),
-            mongoCollection.withDocumentClass(clazz),
-            serializationOptions
-        );
+        return new JacksonMongoCollection<>(objectMapper, jacksonCodecRegistry, view, clazz, objectMapper.constructType(clazz), mongoCollection.withDocumentClass(clazz), serializationOptions);
     }
 
     @Override
@@ -585,41 +578,17 @@ public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TR
 
     @Override
     public JacksonMongoCollection<TResult> withReadPreference(final ReadPreference readPreference) {
-        return new JacksonMongoCollection<>(
-            objectMapper,
-            jacksonCodecRegistry,
-            view,
-            valueClass,
-            type,
-            mongoCollection.withReadPreference(readPreference),
-            serializationOptions
-        );
+        return new JacksonMongoCollection<>(objectMapper, jacksonCodecRegistry, view, valueClass, type, mongoCollection.withReadPreference(readPreference), serializationOptions);
     }
 
     @Override
     public JacksonMongoCollection<TResult> withWriteConcern(final WriteConcern writeConcern) {
-        return new JacksonMongoCollection<>(
-            objectMapper,
-            jacksonCodecRegistry,
-            view,
-            valueClass,
-            type,
-            mongoCollection.withWriteConcern(writeConcern),
-            serializationOptions
-        );
+        return new JacksonMongoCollection<>(objectMapper, jacksonCodecRegistry, view, valueClass, type, mongoCollection.withWriteConcern(writeConcern), serializationOptions);
     }
 
     @Override
     public JacksonMongoCollection<TResult> withReadConcern(final ReadConcern readConcern) {
-        return new JacksonMongoCollection<>(
-            objectMapper,
-            jacksonCodecRegistry,
-            view,
-            valueClass,
-            type,
-            mongoCollection.withReadConcern(readConcern),
-            serializationOptions
-        );
+        return new JacksonMongoCollection<>(objectMapper, jacksonCodecRegistry, view, valueClass, type, mongoCollection.withReadConcern(readConcern), serializationOptions);
     }
 
     private void initializeIfNecessary(Object maybeInitializable) {
@@ -633,7 +602,9 @@ public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TR
      */
     public static final class JacksonMongoCollectionBuilder {
         private ObjectMapper objectMapper;
+
         private Class<?> view;
+
         private SerializationOptions serializationOptions = SerializationOptions.builder().build();
 
         private JacksonMongoCollectionBuilder() {
@@ -715,7 +686,7 @@ public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TR
          * @return A constructed collection meeting the MongoCollection interface.
          */
         public <CT> JacksonMongoCollection<CT> build(MongoDatabase database, Class<CT> valueType, final UuidRepresentation uuidRepresentation) {
-            final org.mongojack.MongoCollection annotation = valueType.getAnnotation(org.mongojack.MongoCollection.class);
+            final MongoCollection annotation = valueType.getAnnotation(MongoCollection.class);
             if (annotation == null) {
                 throw new IllegalArgumentException("You can only use the builder methods without explicit collection names if you have a class annotated with org.mongojack.MongoCollection");
             }
@@ -730,11 +701,14 @@ public class JacksonMongoCollection<TResult> extends MongoCollectionDecorator<TR
          * @param <CT>            The value type of the collection
          * @return                A constructed collection
          */
-        public <CT> JacksonMongoCollection<CT> build(com.mongodb.client.MongoCollection<CT> mongoCollection, Class<CT> valueType, final UuidRepresentation uuidRepresentation) {
-            return new JacksonMongoCollection<>(mongoCollection, this.objectMapper, valueType, view, serializationOptions, uuidRepresentation);
+        public <CT> JacksonMongoCollection<CT> build(MongoCollection<CT> mongoCollection, Class<CT> valueType, final UuidRepresentation uuidRepresentation) {
+            return new JacksonMongoCollection<>(mongoCollection, this.objectMapper, valueType, view, 
+<<<<<<< LEFT
+uuidRepresentation
+=======
+serializationOptions
+>>>>>>> RIGHT
+            );
         }
-
     }
-
 }
-
