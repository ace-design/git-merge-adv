diff --git a/java_case_studies/reference_repos/mongojack/conflict2/desired.java b/java_case_studies/reference_repos/mongojack/conflict2/spork_result.java
index 1b5ef5d..0fae98d 100644
--- a/java_case_studies/reference_repos/mongojack/conflict2/desired.java
+++ b/java_case_studies/reference_repos/mongojack/conflict2/spork_result.java
@@ -23,11 +23,11 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.runner.RunWith;
 
+
 /**
  * Base class for unit tests that run against MongoDB. Assumes there is a MongoDB instance listening on the default
  * port on localhost, and that we can do whatever we want to a database called "unittest".
@@ -35,14 +35,19 @@ import org.junit.runner.RunWith;
 @RunWith(MongoDBTestCaseRunner.class)
 public abstract class MongoDBTestBase {
     private static final Random rand = new Random();
+
     private static final String dbHostKey = "MONGOJACK_TESTDB_HOST";
+
     private static final Map<String, String> environment = System.getenv();
 
     private boolean useStreamParser = true;
+
     private boolean useStreamSerialiser = false;
 
     protected Mongo mongo;
+
     protected DB db;
+
     private Set<String> collections;
 
     @Before
@@ -51,7 +56,6 @@ public abstract class MongoDBTestBase {
         if (environment.containsKey(dbHostKey)) {
             testDbHost = environment.get(dbHostKey);
         }
-
         mongo = new Mongo(testDbHost);
         db = mongo.getDB("unittest");
         collections = new HashSet<String>();
@@ -84,14 +88,14 @@ public abstract class MongoDBTestBase {
     protected DBCollection getCollection() {
         StringBuilder name = new StringBuilder();
         while (name.length() < 8) {
-            char letter = (char) rand.nextInt(26);
+            char letter = ((char) (rand.nextInt(26)));
             if (rand.nextBoolean()) {
                 letter += 'a';
             } else {
                 letter += 'A';
             }
             name.append(letter);
-        }
+        } 
         return getCollection(name.toString());
     }
 
