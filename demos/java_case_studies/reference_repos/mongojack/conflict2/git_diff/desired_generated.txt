diff --git a/java_case_studies/reference_repos/mongojack/conflict2/desired.java b/java_case_studies/demo_results/MethodUnion/mongojack-conflict2.java
index 1b5ef5d..68315b3 100644
--- a/java_case_studies/reference_repos/mongojack/conflict2/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/mongojack-conflict2.java
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 package org.mongojack;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.mongodb.DB;
 import com.mongodb.DBCollection;
@@ -23,27 +22,22 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.runner.RunWith;
+import org.mongojack.JacksonDBCollection;
 
-/**
- * Base class for unit tests that run against MongoDB. Assumes there is a MongoDB instance listening on the default
- * port on localhost, and that we can do whatever we want to a database called "unittest".
- */
 @RunWith(MongoDBTestCaseRunner.class)
-public abstract class MongoDBTestBase {
-    private static final Random rand = new Random();
-    private static final String dbHostKey = "MONGOJACK_TESTDB_HOST";
-    private static final Map<String, String> environment = System.getenv();
+public abstract class MongoDBTestBase{
 
-    private boolean useStreamParser = true;
-    private boolean useStreamSerialiser = false;
-
-    protected Mongo mongo;
-    protected DB db;
-    private Set<String> collections;
+    private static final Random rand = new Random();,
+    private static final String dbHostKey = "MONGOJACK_TESTDB_HOST";,
+    private static final Map<String, String> environment = System.getenv();,
+    private boolean useStreamParser = true;,
+    private boolean useStreamSerialiser = false;,
+    protected Mongo mongo;,
+    protected DB db;,
+    private Set<String> collections;,
 
     @Before
     public void connectToDb() throws Exception {
@@ -71,6 +65,13 @@ public abstract class MongoDBTestBase {
      * @param name The name of the collection
      * @return The collection
      */
+
+    /**
+     * Get a collection with a random name.  Should grant some degree of isolation from tests running in parallel.
+     *
+     * @return The collection
+     */
+
     protected DBCollection getCollection(String name) {
         collections.add(name);
         return db.getCollection(name);
@@ -81,6 +82,7 @@ public abstract class MongoDBTestBase {
      *
      * @return The collection
      */
+
     protected DBCollection getCollection() {
         StringBuilder name = new StringBuilder();
         while (name.length() < 8) {
@@ -132,4 +134,5 @@ public abstract class MongoDBTestBase {
     public void setUseStreamSerialiser(boolean useStreamSerialiser) {
         this.useStreamSerialiser = useStreamSerialiser;
     }
-}
+
+}
\ No newline at end of file
