diff --git a/java_case_studies/reference_repos/mongojack/conflict2/base.java b/java_case_studies/reference_repos/mongojack/conflict2/left.java
index b2d1eef..1b5ef5d 100644
--- a/java_case_studies/reference_repos/mongojack/conflict2/base.java
+++ b/java_case_studies/reference_repos/mongojack/conflict2/left.java
@@ -15,25 +15,29 @@
  */
 package org.mongojack;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.mongodb.DB;
 import com.mongodb.DBCollection;
 import com.mongodb.Mongo;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.runner.RunWith;
-import org.mongojack.JacksonDBCollection;
-
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 
+import org.junit.After;
+import org.junit.Before;
+import org.junit.runner.RunWith;
+
 /**
- * Base class for unit tests that run against MongoDB.  Assumes there is a MongoDB instance listening on the default
+ * Base class for unit tests that run against MongoDB. Assumes there is a MongoDB instance listening on the default
  * port on localhost, and that we can do whatever we want to a database called "unittest".
  */
 @RunWith(MongoDBTestCaseRunner.class)
 public abstract class MongoDBTestBase {
     private static final Random rand = new Random();
+    private static final String dbHostKey = "MONGOJACK_TESTDB_HOST";
+    private static final Map<String, String> environment = System.getenv();
+
     private boolean useStreamParser = true;
     private boolean useStreamSerialiser = false;
 
@@ -43,7 +47,12 @@ public abstract class MongoDBTestBase {
 
     @Before
     public void connectToDb() throws Exception {
-        mongo = new Mongo();
+        String testDbHost = "localhost";
+        if (environment.containsKey(dbHostKey)) {
+            testDbHost = environment.get(dbHostKey);
+        }
+
+        mongo = new Mongo(testDbHost);
         db = mongo.getDB("unittest");
         collections = new HashSet<String>();
     }
@@ -68,7 +77,7 @@ public abstract class MongoDBTestBase {
     }
 
     /**
-     * Get a collection with a random name.  Should grant some degree of isolation from tests running in parallel.
+     * Get a collection with a random name. Should grant some degree of isolation from tests running in parallel.
      *
      * @return The collection
      */
@@ -99,7 +108,7 @@ public abstract class MongoDBTestBase {
         }
         return collection;
     }
-    
+
     protected <T, K> JacksonDBCollection<T, K> getCollection(Class<T> type, Class<K> keyType) {
         return configure(JacksonDBCollection.wrap(getCollection(), type, keyType));
     }
@@ -112,6 +121,10 @@ public abstract class MongoDBTestBase {
         return configure(JacksonDBCollection.wrap(getCollection(collectionName), type, keyType));
     }
 
+    protected <T, K> JacksonDBCollection<T, K> getCollection(Class<T> type, Class<K> keyType, ObjectMapper mapper) {
+        return configure(JacksonDBCollection.wrap(getCollection(), type, keyType, mapper));
+    }
+
     public void setUseStreamParser(boolean useStreamParser) {
         this.useStreamParser = useStreamParser;
     }
