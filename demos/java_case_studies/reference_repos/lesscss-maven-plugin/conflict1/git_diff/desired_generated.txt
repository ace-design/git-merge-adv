diff --git a/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/desired.java b/java_case_studies/demo_results/MethodUnion/lesscss-maven-plugin-conflict1.java
index 38ce619..b2879ad 100644
--- a/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/lesscss-maven-plugin-conflict1.java
@@ -13,12 +13,10 @@
  * limitations under the License.
  */
 package org.lesscss.mojo;
-
 import java.io.File;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.util.Arrays;
-
 import org.apache.maven.plugin.MojoExecutionException;
 import org.codehaus.plexus.util.StringUtils;
 import org.lesscss.LessCompiler;
@@ -26,79 +24,74 @@ import org.lesscss.LessException;
 import org.lesscss.LessSource;
 import org.sonatype.plexus.build.incremental.BuildContext;
 
-/**
- * Goal which compiles the LESS sources to CSS stylesheets.
- * 
- * @author Marcel Overdijk
- * @goal compile
- * @phase process-sources
- */
-public class CompileMojo extends AbstractLessCssMojo {
+public class CompileMojo extends AbstractLessCssMojo{
 
-	/**
+
+    /**
 	 * The directory for compiled CSS stylesheets.
 	 * 
 	 * @parameter expression="${lesscss.outputDirectory}" default-value="${project.build.directory}"
 	 * @required
 	 */
-	protected File outputDirectory;
+    protected File outputDirectory;,
 
-	/**
+    /**
 	 * When <code>true</code> the LESS compiler will compress the CSS stylesheets.
 	 * 
 	 * @parameter expression="${lesscss.compress}" default-value="false"
 	 */
-	private boolean compress;
+    private boolean compress;,
 
-	/**
+    /**
 	 * When <code>true</code> the plugin will watch for changes in LESS files and compile if it detects one.
 	 * 
 	 * @parameter expression="${lesscss.watch}" default-value="false"
 	 */
-	protected boolean watch=false;
+    protected boolean watch=false;,
 
-	/**
+    /**
 	 * When <code>true</code> the plugin will watch for changes in LESS files and compile if it detects one.
 	 * 
 	 * @parameter expression="${lesscss.watchInterval}" default-value="1000"
 	 */
-	private int watchInterval=1000;
+    private int watchInterval=1000;,
 
-	/**
+    /**
 	 * The character encoding the LESS compiler will use for writing the CSS stylesheets.
 	 * 
 	 * @parameter expression="${lesscss.encoding}" default-value="${project.build.sourceEncoding}"
 	 */
-	private String encoding;
+    private String encoding;,
 
-	/**
+    /**
 	 * When <code>true</code> forces the LESS compiler to always compile the LESS sources. By default LESS sources are only compiled when modified (including imports) or the CSS stylesheet does not exists.
 	 * 
 	 * @parameter expression="${lesscss.force}" default-value="false"
 	 */
-	private boolean force;
+    private boolean force;,
 
-	/**
+    /**
 	 * The location of the LESS JavasSript file.
 	 * 
 	 * @parameter
 	 */
-	private File lessJs;
+    private File lessJs;,
 
-	/**
+    /**
 	 * The location of the NodeJS executable.
 	 *
 	 * @parameter
 	 */
-	private String nodeExecutable;
+    private String nodeExecutable;,
 
-	/**
+    /**
 	 * Execute the MOJO.
 	 * 
 	 * @throws MojoExecutionException
 	 *             if something unexpected occurs.
 	 */
-	public void execute() throws MojoExecutionException {
+
+    public void execute() throws MojoExecutionException {
 
 		long start = System.currentTimeMillis();
 
@@ -127,6 +120,39 @@ public class CompileMojo extends AbstractLessCssMojo {
 					force=false;
 					getLog().info("Disabled the 'force' flag in watch mode.");
 				}
+<<<<<<< left_content.java
+			}
+
+			for (String file : files) {
+				File input = new File(sourceDirectory, file);
+
+				buildContext.removeMessages(input);
+
+				File output = new File(outputDirectory, file.replace(".less", ".css"));
+
+				if (!output.getParentFile().exists() && !output.getParentFile().mkdirs()) {
+					throw new MojoExecutionException("Cannot create output directory " + output.getParentFile());
+				}
+
+				try {
+					LessSource lessSource = new LessSource(input);
+
+					if (force || output.lastModified() < lessSource.getLastModifiedIncludingImports()) {
+						getLog().info("Compiling LESS source: " + file + "...");
+						lessCompiler.compile(lessSource, output, force);
+						buildContext.refresh(output);
+					}
+					else {
+						getLog().info("Bypassing LESS source: " + file + " (not modified)");
+					}
+				} catch (IOException e) {
+					buildContext.addMessage(input, 0, 0, "Error compiling LESS source", BuildContext.SEVERITY_ERROR, e);
+					throw new MojoExecutionException("Error while compiling LESS source: " + file, e);
+				} catch (LessException e) {
+					String message = e.getMessage();
+					if (StringUtils.isEmpty(message)) {
+						message = "Error compiling LESS source";
+=======
 				Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
 				while (watch && !Thread.currentThread().isInterrupted()){
 					compileIfChanged(files, lessCompiler);
@@ -134,6 +160,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 						Thread.sleep(watchInterval);
 					} catch (InterruptedException e) {
 						System.out.println("interrupted");
+>>>>>>> right_content.java
 					}
 				}
 			} else {
@@ -144,7 +171,8 @@ public class CompileMojo extends AbstractLessCssMojo {
 		}
 	}
 
-	private void compileIfChanged(String[] files, Object lessCompiler) throws MojoExecutionException {
+
+    private void compileIfChanged(String[] files, Object lessCompiler) throws MojoExecutionException {
 		try {
 			for (String file : files) {
 				File input = new File(sourceDirectory, file);
@@ -159,7 +187,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 
 				try {
 					LessSource lessSource = new LessSource(input);
-					if (force || output.lastModified() < lessSource.getLastModifiedIncludingImports()) {
+					if (output.lastModified() < lessSource.getLastModifiedIncludingImports() || force) {
 						long compilationStarted = System.currentTimeMillis();
 						getLog().info("Compiling LESS source: " + file + "...");
 						if (lessCompiler instanceof LessCompiler) {
@@ -195,7 +223,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 		}
 	}
 
-	private Object initLessCompiler() throws MojoExecutionException {
+    private Object initLessCompiler() throws MojoExecutionException {
 		if (nodeExecutable != null) {
 			NodeJsLessCompiler lessCompiler;
 			try {
@@ -223,4 +251,5 @@ public class CompileMojo extends AbstractLessCssMojo {
 			return lessCompiler;
 		}
 	}
-}
+
+}
\ No newline at end of file
