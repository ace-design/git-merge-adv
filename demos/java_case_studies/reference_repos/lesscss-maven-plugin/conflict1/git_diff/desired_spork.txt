diff --git a/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/desired.java b/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/spork_result.java
index 38ce619..3b08737 100644
--- a/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/desired.java
+++ b/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/spork_result.java
@@ -18,7 +18,6 @@ import java.io.File;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.util.Arrays;
-
 import org.apache.maven.plugin.MojoExecutionException;
 import org.codehaus.plexus.util.StringUtils;
 import org.lesscss.LessCompiler;
@@ -26,6 +25,7 @@ import org.lesscss.LessException;
 import org.lesscss.LessSource;
 import org.sonatype.plexus.build.incremental.BuildContext;
 
+
 /**
  * Goal which compiles the LESS sources to CSS stylesheets.
  * 
@@ -34,7 +34,6 @@ import org.sonatype.plexus.build.incremental.BuildContext;
  * @phase process-sources
  */
 public class CompileMojo extends AbstractLessCssMojo {
-
 	/**
 	 * The directory for compiled CSS stylesheets.
 	 * 
@@ -99,9 +98,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 	 *             if something unexpected occurs.
 	 */
 	public void execute() throws MojoExecutionException {
-
 		long start = System.currentTimeMillis();
-
 		if (getLog().isDebugEnabled()) {
 			getLog().debug("sourceDirectory = " + sourceDirectory);
 			getLog().debug("outputDirectory = " + outputDirectory);
@@ -110,37 +107,33 @@ public class CompileMojo extends AbstractLessCssMojo {
 			getLog().debug("force = " + force);
 			getLog().debug("lessJs = " + lessJs);
 		}
-
 		String[] files = getIncludedFiles();
-
-		if (files == null || files.length < 1) {
+		if ((files == null) || (files.length < 1)) {
 			getLog().info("Nothing to compile - no LESS sources found");
 		} else {
 			if (getLog().isDebugEnabled()) {
 				getLog().debug("included files = " + Arrays.toString(files));
 			}
-
 			Object lessCompiler = initLessCompiler();
-			if (watch){
-				getLog().info("Watching "+sourceDirectory);
-				if (force){
-					force=false;
+			if (watch) {
+				getLog().info("Watching " + sourceDirectory);
+				if (force) {
+					force = false;
 					getLog().info("Disabled the 'force' flag in watch mode.");
 				}
 				Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
-				while (watch && !Thread.currentThread().isInterrupted()){
+				while (watch && (!Thread.currentThread().isInterrupted())) {
 					compileIfChanged(files, lessCompiler);
 					try {
 						Thread.sleep(watchInterval);
-					} catch (InterruptedException e) {
+					} catch (java.lang.InterruptedException e) {
 						System.out.println("interrupted");
 					}
-				}
+				} 
 			} else {
 				compileIfChanged(files, lessCompiler);
 			}
-
-			getLog().info("Complete Less compile job finished in " + (System.currentTimeMillis() - start) + " ms");
+			getLog().info(("Complete Less compile job finished in " + (System.currentTimeMillis() - start)) + " ms");
 		}
 	}
 
@@ -148,19 +141,20 @@ public class CompileMojo extends AbstractLessCssMojo {
 		try {
 			for (String file : files) {
 				File input = new File(sourceDirectory, file);
-
 				buildContext.removeMessages(input);
-
 				File output = new File(outputDirectory, file.replace(".less", ".css"));
-
-				if (!output.getParentFile().exists() && !output.getParentFile().mkdirs()) {
+				if ((!output.getParentFile().exists()) && (!output.getParentFile().mkdirs())) {
 					throw new MojoExecutionException("Cannot create output directory " + output.getParentFile());
 				}
-
 				try {
 					LessSource lessSource = new LessSource(input);
-					if (force || output.lastModified() < lessSource.getLastModifiedIncludingImports()) {
+<<<<<<< LEFT
+					if (output.lastModified() < lessSource.getLastModifiedIncludingImports() || force) {
 						long compilationStarted = System.currentTimeMillis();
+=======
+
+					if (force || output.lastModified() < lessSource.getLastModifiedIncludingImports()) {
+>>>>>>> RIGHT
 						getLog().info("Compiling LESS source: " + file + "...");
 						if (lessCompiler instanceof LessCompiler) {
 							((LessCompiler) lessCompiler).compile(lessSource, output, force);
@@ -183,14 +177,14 @@ public class CompileMojo extends AbstractLessCssMojo {
 					}
 					buildContext.addMessage(input, 0, 0, "Error compiling LESS source", BuildContext.SEVERITY_ERROR, e);
 					throw new MojoExecutionException("Error while compiling LESS source: " + file, e);
-				} catch (InterruptedException e) {
+				} catch (java.lang.InterruptedException e) {
 					buildContext.addMessage(input, 0, 0, "Error compiling LESS source", BuildContext.SEVERITY_ERROR, e);
 					throw new MojoExecutionException("Error while compiling LESS source: " + file, e);
 				}
 			}
 		} finally {
 			if (lessCompiler instanceof NodeJsLessCompiler) {
-				((NodeJsLessCompiler) lessCompiler).close();
+				((NodeJsLessCompiler) (lessCompiler)).close();
 			}
 		}
 	}
@@ -204,8 +198,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 				throw new MojoExecutionException(e.getMessage(), e);
 			}
 			if (lessJs != null) {
-				throw new MojoExecutionException(
-						"Custom LESS JavaScript is not currently supported when using nodeExecutable");
+				throw new MojoExecutionException("Custom LESS JavaScript is not currently supported when using nodeExecutable");
 			}
 			return lessCompiler;
 		} else {
@@ -216,8 +209,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 				try {
 					lessCompiler.setLessJs(lessJs.toURI().toURL());
 				} catch (MalformedURLException e) {
-					throw new MojoExecutionException(
-							"Error while loading LESS JavaScript: " + lessJs.getAbsolutePath(), e);
+					throw new MojoExecutionException("Error while loading LESS JavaScript: " + lessJs.getAbsolutePath(), e);
 				}
 			}
 			return lessCompiler;
