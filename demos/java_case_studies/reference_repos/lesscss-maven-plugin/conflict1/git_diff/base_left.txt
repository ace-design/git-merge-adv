diff --git a/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/base.java b/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/left.java
index 9f8d495..eca317f 100644
--- a/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/base.java
+++ b/java_case_studies/reference_repos/lesscss-maven-plugin/conflict1/left.java
@@ -41,7 +41,7 @@ public class CompileMojo extends AbstractLessCssMojo {
 	 * @parameter expression="${lesscss.outputDirectory}" default-value="${project.build.directory}"
 	 * @required
 	 */
-	private File outputDirectory;
+	protected File outputDirectory;
 
 	/**
 	 * When <code>true</code> the LESS compiler will compress the CSS stylesheets.
@@ -50,6 +50,20 @@ public class CompileMojo extends AbstractLessCssMojo {
 	 */
 	private boolean compress;
 
+	/**
+	 * When <code>true</code> the plugin will watch for changes in LESS files and compile if it detects one.
+	 * 
+	 * @parameter expression="${lesscss.watch}" default-value="false"
+	 */
+	protected boolean watch=false;
+
+	/**
+	 * When <code>true</code> the plugin will watch for changes in LESS files and compile if it detects one.
+	 * 
+	 * @parameter expression="${lesscss.watchInterval}" default-value="1000"
+	 */
+	private int watchInterval=1000;
+
 	/**
 	 * The character encoding the LESS compiler will use for writing the CSS stylesheets.
 	 * 
@@ -71,6 +85,13 @@ public class CompileMojo extends AbstractLessCssMojo {
 	 */
 	private File lessJs;
 
+	/**
+	 * The location of the NodeJS executable.
+	 *
+	 * @parameter
+	 */
+	private String nodeExecutable;
+
 	/**
 	 * Execute the MOJO.
 	 * 
@@ -99,19 +120,32 @@ public class CompileMojo extends AbstractLessCssMojo {
 				getLog().debug("included files = " + Arrays.toString(files));
 			}
 
-			LessCompiler lessCompiler = new LessCompiler();
-			lessCompiler.setCompress(compress);
-			lessCompiler.setEncoding(encoding);
-
-			if (lessJs != null) {
-				try {
-					lessCompiler.setLessJs(lessJs.toURI().toURL());
-				} catch (MalformedURLException e) {
-					throw new MojoExecutionException(
-							"Error while loading LESS JavaScript: " + lessJs.getAbsolutePath(), e);
+			Object lessCompiler = initLessCompiler();
+			if (watch){
+				getLog().info("Watching "+sourceDirectory);
+				if (force){
+					force=false;
+					getLog().info("Disabled the 'force' flag in watch mode.");
+				}
+				Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
+				while (watch && !Thread.currentThread().isInterrupted()){
+					compileIfChanged(files, lessCompiler);
+					try {
+						Thread.sleep(watchInterval);
+					} catch (InterruptedException e) {
+						System.out.println("interrupted");
+					}
 				}
+			} else {
+				compileIfChanged(files, lessCompiler);
 			}
 
+			getLog().info("Complete Less compile job finished in " + (System.currentTimeMillis() - start) + " ms");
+		}
+	}
+
+	private void compileIfChanged(String[] files, Object lessCompiler) throws MojoExecutionException {
+		try {
 			for (String file : files) {
 				File input = new File(sourceDirectory, file);
 
@@ -125,13 +159,18 @@ public class CompileMojo extends AbstractLessCssMojo {
 
 				try {
 					LessSource lessSource = new LessSource(input);
-
-					if (output.lastModified() < lessSource.getLastModifiedIncludingImports()) {
+					if (output.lastModified() < lessSource.getLastModifiedIncludingImports() || force) {
+						long compilationStarted = System.currentTimeMillis();
 						getLog().info("Compiling LESS source: " + file + "...");
-						lessCompiler.compile(lessSource, output, force);
+						if (lessCompiler instanceof LessCompiler) {
+							((LessCompiler) lessCompiler).compile(lessSource, output, force);
+						} else {
+							((NodeJsLessCompiler) lessCompiler).compile(lessSource, output, force);
+						}
 						buildContext.refresh(output);
+						getLog().info("Finished compilation to "+outputDirectory+" in " + (System.currentTimeMillis() - compilationStarted) + " ms");
 					}
-					else {
+					else if (!watch) {
 						getLog().info("Bypassing LESS source: " + file + " (not modified)");
 					}
 				} catch (IOException e) {
@@ -144,10 +183,44 @@ public class CompileMojo extends AbstractLessCssMojo {
 					}
 					buildContext.addMessage(input, 0, 0, "Error compiling LESS source", BuildContext.SEVERITY_ERROR, e);
 					throw new MojoExecutionException("Error while compiling LESS source: " + file, e);
+				} catch (InterruptedException e) {
+					buildContext.addMessage(input, 0, 0, "Error compiling LESS source", BuildContext.SEVERITY_ERROR, e);
+					throw new MojoExecutionException("Error while compiling LESS source: " + file, e);
 				}
 			}
+		} finally {
+			if (lessCompiler instanceof NodeJsLessCompiler) {
+				((NodeJsLessCompiler) lessCompiler).close();
+			}
+		}
+	}
 
-			getLog().info("Compilation finished in " + (System.currentTimeMillis() - start) + " ms");
+	private Object initLessCompiler() throws MojoExecutionException {
+		if (nodeExecutable != null) {
+			NodeJsLessCompiler lessCompiler;
+			try {
+				lessCompiler = new NodeJsLessCompiler(nodeExecutable, compress, encoding, getLog());
+			} catch (IOException e) {
+				throw new MojoExecutionException(e.getMessage(), e);
+			}
+			if (lessJs != null) {
+				throw new MojoExecutionException(
+						"Custom LESS JavaScript is not currently supported when using nodeExecutable");
+			}
+			return lessCompiler;
+		} else {
+			LessCompiler lessCompiler = new LessCompiler();
+			lessCompiler.setCompress(compress);
+			lessCompiler.setEncoding(encoding);
+			if (lessJs != null) {
+				try {
+					lessCompiler.setLessJs(lessJs.toURI().toURL());
+				} catch (MalformedURLException e) {
+					throw new MojoExecutionException(
+							"Error while loading LESS JavaScript: " + lessJs.getAbsolutePath(), e);
+				}
+			}
+			return lessCompiler;
 		}
 	}
 }
