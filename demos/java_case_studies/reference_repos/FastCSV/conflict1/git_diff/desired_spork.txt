diff --git a/java_case_studies/reference_repos/FastCSV/conflict1/desired.java b/java_case_studies/reference_repos/FastCSV/conflict1/spork_result.java
index 418cccf..0c3dc55 100644
--- a/java_case_studies/reference_repos/FastCSV/conflict1/desired.java
+++ b/java_case_studies/reference_repos/FastCSV/conflict1/spork_result.java
@@ -1,12 +1,10 @@
 package blackbox.reader;
 
-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertNull;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
+import de.siegmar.fastcsv.reader.CloseableIterator;
+import de.siegmar.fastcsv.reader.CommentStrategy;
+import de.siegmar.fastcsv.reader.CsvReader;
+import de.siegmar.fastcsv.reader.CsvRow;
+import de.siegmar.fastcsv.reader.MalformedCsvException;
 import java.io.CharArrayReader;
 import java.io.IOException;
 import java.io.StringReader;
@@ -22,49 +20,38 @@ import java.util.function.Consumer;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
 import org.junit.jupiter.params.provider.ValueSource;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import de.siegmar.fastcsv.reader.CloseableIterator;
-import de.siegmar.fastcsv.reader.CommentStrategy;
-import de.siegmar.fastcsv.reader.CsvReader;
-import de.siegmar.fastcsv.reader.CsvRow;
-import de.siegmar.fastcsv.reader.MalformedCsvException;
 
-@SuppressWarnings({
-    "checkstyle:ClassFanOutComplexity",
-    "PMD.AvoidDuplicateLiterals",
-    "PMD.CloseResource"
-})
+@SuppressWarnings({ "checkstyle:ClassFanOutComplexity", "PMD.AvoidDuplicateLiterals", "PMD.CloseResource" })
 class CsvReaderTest {
-
     private final CsvReader.CsvReaderBuilder crb = CsvReader.builder();
 
     @ParameterizedTest
-    @ValueSource(chars = {'\r', '\n'})
+    @ValueSource(chars = { '\r', '\n' })
     void configBuilder(final char c) {
-        final IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () ->
-            CsvReader.builder().fieldSeparator(c).build("foo"));
+        final IllegalArgumentException e = assertThrows(java.lang.IllegalArgumentException.class, () -> CsvReader.builder().fieldSeparator(c).build("foo"));
         assertEquals("fieldSeparator must not be a newline char", e.getMessage());
-
-        final IllegalArgumentException e2 = assertThrows(IllegalArgumentException.class, () ->
-            CsvReader.builder().quoteCharacter(c).build("foo"));
+        final IllegalArgumentException e2 = assertThrows(java.lang.IllegalArgumentException.class, () -> CsvReader.builder().quoteCharacter(c).build("foo"));
         assertEquals("quoteCharacter must not be a newline char", e2.getMessage());
-
-        final IllegalArgumentException e3 = assertThrows(IllegalArgumentException.class, () ->
-            CsvReader.builder().commentCharacter(c).build("foo"));
+        final IllegalArgumentException e3 = assertThrows(java.lang.IllegalArgumentException.class, () -> CsvReader.builder().commentCharacter(c).build("foo"));
         assertEquals("commentCharacter must not be a newline char", e3.getMessage());
     }
 
     @ParameterizedTest
     @MethodSource("provideBuilderForMisconfiguration")
     void configReader(final CsvReader.CsvReaderBuilder builder) {
-        final IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () ->
-            builder.build("foo"));
+        final IllegalArgumentException e = assertThrows(java.lang.IllegalArgumentException.class, () -> builder.build("foo"));
         assertTrue(e.getMessage().contains("Control characters must differ"));
     }
 
@@ -86,19 +73,16 @@ class CsvReaderTest {
     @Test
     void immutableResponse() {
         final List<String> fields = crb.build("foo").iterator().next().getFields();
-        assertThrows(UnsupportedOperationException.class, () -> fields.add("bar"));
+        assertThrows(java.lang.UnsupportedOperationException.class, () -> fields.add("bar"));
     }
 
     // toString()
-
     @Test
     void readerToString() {
-        assertEquals("CsvReader[commentStrategy=NONE, skipEmptyRows=true, "
-            + "errorOnDifferentFieldCount=false]", crb.build("").toString());
+        assertEquals("CsvReader[commentStrategy=NONE, skipEmptyRows=true, " + "errorOnDifferentFieldCount=false]", crb.build("").toString());
     }
 
     // skipped rows
-
     @Test
     void singleRowNoSkipEmpty() {
         crb.skipEmptyRows(false);
@@ -109,25 +93,21 @@ class CsvReaderTest {
     void multipleRowsNoSkipEmpty() {
         crb.skipEmptyRows(false);
         final Iterator<CsvRow> it = crb.build("\n\na").iterator();
-
         CsvRow row = it.next();
         assertTrue(row.isEmpty());
         assertEquals(1, row.getFieldCount());
         assertEquals(1, row.getOriginalLineNumber());
         assertEquals(Collections.singletonList(""), row.getFields());
-
         row = it.next();
         assertTrue(row.isEmpty());
         assertEquals(1, row.getFieldCount());
         assertEquals(2, row.getOriginalLineNumber());
         assertEquals(Collections.singletonList(""), row.getFields());
-
         row = it.next();
         assertFalse(row.isEmpty());
         assertEquals(1, row.getFieldCount());
         assertEquals(3, row.getOriginalLineNumber());
         assertEquals(Collections.singletonList("a"), row.getFields());
-
         assertFalse(it.hasNext());
     }
 
@@ -135,30 +115,23 @@ class CsvReaderTest {
     void skippedRows() {
         final List<CsvRow> csv = readAll("\n\nfoo\n\nbar\n\n");
         assertEquals(2, csv.size());
-
         final Iterator<CsvRow> it = csv.iterator();
-
         CsvRow row = it.next();
         assertEquals(3, row.getOriginalLineNumber());
         assertEquals(Collections.singletonList("foo"), row.getFields());
-
         row = it.next();
         assertEquals(5, row.getOriginalLineNumber());
         assertEquals(Collections.singletonList("bar"), row.getFields());
     }
 
     // different field count
-
     @Test
     void differentFieldCountSuccess() {
         crb.errorOnDifferentFieldCount(true);
-
         assertDoesNotThrow(() -> readAll("foo\nbar"));
         assertDoesNotThrow(() -> readAll("foo\nbar\n"));
-
         assertDoesNotThrow(() -> readAll("foo,bar\nfaz,baz"));
         assertDoesNotThrow(() -> readAll("foo,bar\nfaz,baz\n"));
-
         assertDoesNotThrow(() -> readAll("foo,bar\n,baz"));
         assertDoesNotThrow(() -> readAll(",bar\nfaz,baz"));
     }
@@ -166,20 +139,15 @@ class CsvReaderTest {
     @Test
     void differentFieldCountFail() {
         crb.errorOnDifferentFieldCount(true);
-
-        final MalformedCsvException e = assertThrows(MalformedCsvException.class,
-            () -> readAll("foo\nbar,\"baz\nbax\""));
-
+        final MalformedCsvException e = assertThrows(MalformedCsvException.class, () -> readAll("foo\nbar,\"baz\nbax\""));
         assertEquals("Row 2 has 2 fields, but first row had 1 fields", e.getMessage());
     }
 
     // field by index
-
     @Test
     @SuppressWarnings("CheckReturnValue")
     void getNonExistingFieldByIndex() {
-        assertThrows(IndexOutOfBoundsException.class, () ->
-            spotbugs(readSingleRow("foo").getField(1)));
+        assertThrows(java.lang.IndexOutOfBoundsException.class, () -> spotbugs(readSingleRow("foo").getField(1)));
     }
 
     @SuppressWarnings("PMD.UnusedFormalParameter")
@@ -188,56 +156,35 @@ class CsvReaderTest {
     }
 
     // line numbering
-
     @Test
     void lineNumbering() {
-        final Iterator<CsvRow> it = crb
-            .commentStrategy(CommentStrategy.SKIP)
-            .build(
-                "line 1\n"
-                    + "line 2\r"
-                    + "line 3\r\n"
-                    + "\"line 4\rwith\r\nand\n\"\n"
-                    + "#line 8\n"
-                    + "line 9"
-            ).iterator();
-
+        final Iterator<CsvRow> it = crb.commentStrategy(CommentStrategy.SKIP).build("line 1\n" + (((("line 2\r" + "line 3\r\n") + "\"line 4\rwith\r\nand\n\"\n") + "#line 8\n") + "line 9")).iterator();
         CsvRow row = it.next();
         assertEquals(Collections.singletonList("line 1"), row.getFields());
         assertEquals(1, row.getOriginalLineNumber());
-
         row = it.next();
         assertEquals(Collections.singletonList("line 2"), row.getFields());
         assertEquals(2, row.getOriginalLineNumber());
-
         row = it.next();
         assertEquals(Collections.singletonList("line 3"), row.getFields());
         assertEquals(3, row.getOriginalLineNumber());
-
         row = it.next();
         assertEquals(Collections.singletonList("line 4\rwith\r\nand\n"), row.getFields());
         assertEquals(4, row.getOriginalLineNumber());
-
         row = it.next();
         assertEquals(Collections.singletonList("line 9"), row.getFields());
         assertEquals(9, row.getOriginalLineNumber());
-
         assertFalse(it.hasNext());
     }
 
     // comment
-
     @Test
     void comment() {
-        final Iterator<CsvRow> it = crb
-            .commentStrategy(CommentStrategy.READ)
-            .build("#comment \"1\"\na,#b,c").iterator();
-
+        final Iterator<CsvRow> it = crb.commentStrategy(CommentStrategy.READ).build("#comment \"1\"\na,#b,c").iterator();
         CsvRow row = it.next();
         assertTrue(row.isComment());
         assertEquals(1, row.getOriginalLineNumber());
         assertEquals(Collections.singletonList("comment \"1\""), row.getFields());
-
         row = it.next();
         assertFalse(row.isComment());
         assertEquals(2, row.getOriginalLineNumber());
@@ -245,23 +192,18 @@ class CsvReaderTest {
     }
 
     // to string
-
     @Test
     void toStringWithoutHeader() {
-        assertEquals("CsvRow[originalLineNumber=1, fields=[fieldA, fieldB], comment=false]",
-            readSingleRow("fieldA,fieldB\n").toString());
+        assertEquals("CsvRow[originalLineNumber=1, fields=[fieldA, fieldB], comment=false]", readSingleRow("fieldA,fieldB\n").toString());
     }
 
     // refill buffer while parsing an unquoted field containing a quote character
-
     @Test
-    void refillBufferInDataWithQuote() {
+    public void refillBufferInDataWithQuote() {
         final char[] extra = ",a\"b\"c,d,".toCharArray();
-
         final char[] buf = new char[8192 + extra.length];
         Arrays.fill(buf, 'X');
         System.arraycopy(extra, 0, buf, 8190, extra.length);
-
         final CsvRow row = crb.build(new CharArrayReader(buf)).iterator().next();
         assertEquals(4, row.getFieldCount());
         assertEquals("a\"b\"c", row.getField(1));
@@ -270,69 +212,49 @@ class CsvReaderTest {
     }
 
     // buffer exceed
-
     @Test
     void bufferExceed() {
-        final char[] buf = new char[8 * 1024 * 1024];
+        final char[] buf = new char[(8 * 1024) * 1024];
         Arrays.fill(buf, 'X');
         buf[buf.length - 1] = ',';
-
         crb.build(new CharArrayReader(buf)).iterator().next();
-
-        buf[buf.length - 1] = (byte) 'X';
-        final UncheckedIOException exception = assertThrows(UncheckedIOException.class, () ->
-            crb.build(new CharArrayReader(buf)).iterator().next());
+        buf[buf.length - 1] = ((byte) ('X'));
+        final UncheckedIOException exception = assertThrows(UncheckedIOException.class, () -> crb.build(new CharArrayReader(buf)).iterator().next());
         assertEquals("IOException when reading first record", exception.getMessage());
-
-        assertEquals("Maximum buffer size 8388608 is not enough to read data of a single field. "
-                + "Typically, this happens if quotation started but did not end within this buffer's "
-                + "maximum boundary.",
-            exception.getCause().getMessage());
+        assertEquals("Maximum buffer size 8388608 is not enough to read data of a single field. " + ("Typically, this happens if quotation started but did not end within this buffer's " + "maximum boundary."), exception.getCause().getMessage());
     }
 
     @Test
     void bufferExceedSubsequentRecord() {
-        final char[] buf = new char[8 * 1024 * 1024];
+        final char[] buf = new char[(8 * 1024) * 1024];
         Arrays.fill(buf, 'X');
         final String s = "a,b,c\n\"";
         System.arraycopy(s.toCharArray(), 0, buf, 0, s.length());
-
         final CloseableIterator<CsvRow> iterator = crb.build(new CharArrayReader(buf)).iterator();
-
         iterator.next();
-
         final UncheckedIOException exception = assertThrows(UncheckedIOException.class, iterator::next);
         assertEquals("IOException when reading record that started in line 2", exception.getMessage());
-
-        assertEquals("Maximum buffer size 8388608 is not enough to read data of a single field. "
-                + "Typically, this happens if quotation started but did not end within this buffer's "
-                + "maximum boundary.",
-            exception.getCause().getMessage());
+        assertEquals("Maximum buffer size 8388608 is not enough to read data of a single field. " + ("Typically, this happens if quotation started but did not end within this buffer's " + "maximum boundary."), exception.getCause().getMessage());
     }
 
     // API
-
     @Test
     void closeApi() throws IOException {
-        final Consumer<CsvRow> consumer = csvRow -> { };
-
-        final Supplier<CloseStatusReader> supp =
-            () -> new CloseStatusReader(new StringReader("foo,bar"));
-
+        final Consumer<CsvRow> consumer = ( csvRow) -> {
+        };
+        final Supplier<CloseStatusReader> supp = () -> new CloseStatusReader(new StringReader("foo,bar"));
         CloseStatusReader csr = supp.get();
-        try (CsvReader reader = crb.build(csr)) {
+        try (final CsvReader reader = crb.build(csr)) {
             reader.stream().forEach(consumer);
         }
         assertTrue(csr.isClosed());
-
         csr = supp.get();
-        try (CloseableIterator<CsvRow> it = crb.build(csr).iterator()) {
+        try (final CloseableIterator<CsvRow> it = crb.build(csr).iterator()) {
             it.forEachRemaining(consumer);
         }
         assertTrue(csr.isClosed());
-
         csr = supp.get();
-        try (Stream<CsvRow> stream = crb.build(csr).stream()) {
+        try (final Stream<CsvRow> stream = crb.build(csr).stream()) {
             stream.forEach(consumer);
         }
         assertTrue(csr.isClosed());
@@ -345,20 +267,15 @@ class CsvReaderTest {
 
     @Test
     void spliterator() {
-        final Spliterator<CsvRow> spliterator =
-            crb.build("a,b,c\n1,2,3").spliterator();
-
+        final Spliterator<CsvRow> spliterator = crb.build("a,b,c\n1,2,3").spliterator();
         assertNull(spliterator.trySplit());
         assertEquals(Long.MAX_VALUE, spliterator.estimateSize());
-        assertEquals(Spliterator.ORDERED | Spliterator.DISTINCT | Spliterator.NONNULL
-            | Spliterator.IMMUTABLE, spliterator.characteristics());
-
+        assertEquals(((Spliterator.ORDERED | Spliterator.DISTINCT) | Spliterator.NONNULL) | Spliterator.IMMUTABLE, spliterator.characteristics());
         final AtomicInteger rows = new AtomicInteger();
         final AtomicInteger rows2 = new AtomicInteger();
-        while (spliterator.tryAdvance(row -> rows.incrementAndGet())) {
+        while (spliterator.tryAdvance(( row) -> rows.incrementAndGet())) {
             rows2.incrementAndGet();
-        }
-
+        } 
         assertEquals(2, rows.get());
         assertEquals(2, rows2.get());
     }
@@ -369,21 +286,16 @@ class CsvReaderTest {
     }
 
     // Coverage
-
     @Test
     void closeException() {
         final CsvReader csvReader = crb.build(new UncloseableReader(new StringReader("foo")));
-        final UncheckedIOException e = assertThrows(UncheckedIOException.class,
-            () -> csvReader.stream().close());
-
+        final UncheckedIOException e = assertThrows(UncheckedIOException.class, () -> csvReader.stream().close());
         assertEquals("java.io.IOException: Cannot close", e.getMessage());
     }
 
     @Test
     void unreadable() {
-        final UncheckedIOException e = assertThrows(UncheckedIOException.class, () ->
-            crb.build(new UnreadableReader()).iterator().next());
-
+        final UncheckedIOException e = assertThrows(UncheckedIOException.class, () -> crb.build(new UnreadableReader()).iterator().next());
         assertEquals("IOException when reading first record", e.getMessage());
     }
 
@@ -400,5 +312,4 @@ class CsvReaderTest {
             .stream()
             .collect(Collectors.toList());
     }
-
 }
