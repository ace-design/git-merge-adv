diff --git a/java_case_studies/reference_repos/FastCSV/conflict4/desired.java b/java_case_studies/demo_results/MethodUnion/FastCSV-conflict4.java
index 681cfb9..d3f6cea 100644
--- a/java_case_studies/reference_repos/FastCSV/conflict4/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/FastCSV-conflict4.java
@@ -1,41 +1,54 @@
 package de.siegmar.fastcsv.writer;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.UncheckedIOException;
 import java.io.Writer;
 import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.Objects;
 
-/**
- * This is the main class for writing CSV data.
- * <p>
- * Example use:
- * <pre>{@code
- * try (CsvWriter csv = CsvWriter.builder().build(path)) {
- *     csv.writeRow("Hello", "world");
- * }
- * }</pre>
- */
 @SuppressWarnings({"checkstyle:NPathComplexity", "checkstyle:CyclomaticComplexity"})
-public final class CsvWriter implements Closeable {
+public final class CsvWriter implements Closeable{
+
+    private static final char CR = '\r';,
+    private static final char LF = '\n';,
+    private final CachingWriter writer;,
+    private final char fieldSeparator;,
+    private final char quoteCharacter;,
+    private final QuoteStrategy quoteStrategy;,
+    private final char commentCharacter;,
+    private final String lineDelimiter;,
+    private final boolean syncWriter;,
 
-    private static final char CR = '\r';
-    private static final char LF = '\n';
+    CsvWriter(final Writer writer, final char fieldSeparator, final char quoteCharacter,
+              final QuoteStrategy quoteStrategy, final LineDelimiter lineDelimiter,
+              final boolean syncWriter) {
 
-    private final CachingWriter writer;
-    private final char fieldSeparator;
-    private final char quoteCharacter;
-    private final char commentCharacter;
-    private final QuoteStrategy quoteStrategy;
-    private final String lineDelimiter;
-    private final boolean syncWriter;
+        if (fieldSeparator == CR || fieldSeparator == LF) {
+            throw new IllegalArgumentException("fieldSeparator must not be a newline char");
+        }
+        if (quoteCharacter == CR || quoteCharacter == LF) {
+            throw new IllegalArgumentException("quoteCharacter must not be a newline char");
+        }
+        if (fieldSeparator == quoteCharacter) {
+            throw new IllegalArgumentException(String.format("Control characters must differ"
+                    + " (fieldSeparator=%s, quoteCharacter=%s)",
+                fieldSeparator, quoteCharacter));
+        }
+
+        this.writer = new CachingWriter(writer);
+        this.fieldSeparator = fieldSeparator;
+        this.quoteCharacter = quoteCharacter;
+        this.quoteStrategy = Objects.requireNonNull(quoteStrategy);
+        this.lineDelimiter = Objects.requireNonNull(lineDelimiter).toString();
+        this.syncWriter = syncWriter;
+    }
+    private boolean isNewline = true;,
 
     CsvWriter(final Writer writer, final char fieldSeparator, final char quoteCharacter,
               final char commentCharacter, final QuoteStrategy quoteStrategy, final LineDelimiter lineDelimiter,
@@ -64,6 +77,12 @@ public final class CsvWriter implements Closeable {
         this.syncWriter = syncWriter;
     }
 
+    /**
+     * Creates a {@link CsvWriterBuilder} instance used to configure and create instances of
+     * this class.
+     * @return CsvWriterBuilder instance with default settings.
+     */
+
     private boolean allDiffers(final char... chars) {
         for (int i = 0; i < chars.length - 1; i++) {
             if (chars[i] == chars[i + 1]) {
@@ -73,15 +92,65 @@ public final class CsvWriter implements Closeable {
         return true;
     }
 
+    public static CsvWriterBuilder builder() {
+        return new CsvWriterBuilder();
+    }
+
+    private void writeInternal(final String value) throws IOException {
+        if (value == null) {
+            if (quoteStrategy == QuoteStrategy.ALWAYS) {
+                writer.write(quoteCharacter);
+                writer.write(quoteCharacter);
+            }
+            return;
+        }
+
+        if (value.isEmpty()) {
+            if (quoteStrategy == QuoteStrategy.ALWAYS
+                || quoteStrategy == QuoteStrategy.EMPTY) {
+                writer.write(quoteCharacter);
+                writer.write(quoteCharacter);
+            }
+            return;
+        }
+
+        final int length = value.length();
+        boolean needsQuotes = quoteStrategy == QuoteStrategy.ALWAYS;
+        int nextDelimPos = -1;
+
+        for (int i = 0; i < length; i++) {
+            final char c = value.charAt(i);
+            if (c == quoteCharacter) {
+                needsQuotes = true;
+                nextDelimPos = i;
+                break;
+            }
+            if (!needsQuotes && (c == fieldSeparator || c == LF || c == CR)) {
+                needsQuotes = true;
+            }
+        }
+
+        if (needsQuotes) {
+            writer.write(quoteCharacter);
+        }
+
+        if (nextDelimPos > -1) {
+            writeEscaped(value, length, nextDelimPos);
+        } else {
+            writer.write(value, 0, length);
+        }
+
+        if (needsQuotes) {
+            writer.write(quoteCharacter);
+        }
+    }
+
     /**
      * Creates a {@link CsvWriterBuilder} instance used to configure and create instances of
      * this class.
      *
      * @return CsvWriterBuilder instance with default settings.
      */
-    public static CsvWriterBuilder builder() {
-        return new CsvWriterBuilder();
-    }
 
     @SuppressWarnings("checkstyle:BooleanExpressionComplexity")
     private void writeInternal(final String value, final boolean firstField) throws IOException {
@@ -164,16 +233,17 @@ public final class CsvWriter implements Closeable {
     }
 
     /**
-     * Writes a complete line - one or more fields and new line character(s) at the end.
+     * Appends a complete line - one or more fields and new line character(s) at the end.
      *
-     * @param values the fields to write ({@code null} values are handled as empty strings, if
-     *               not configured otherwise ({@link QuoteStrategy#EMPTY})).
+     * @param values the fields to append ({@code null} values are handled as empty strings, if
+     *               not configured otherwise ({@link QuoteStrategy#EMPTY}))
      * @return This CsvWriter.
      * @throws UncheckedIOException if a write error occurs
-     * @see #writeRow(String...)
      */
+
     public CsvWriter writeRow(final Iterable<String> values) {
         try {
+<<<<<<< left_content.java
             int i = 0;
             for (final String value : values) {
                 if (i > 0) {
@@ -181,6 +251,13 @@ public final class CsvWriter implements Closeable {
                 }
                 writeInternal(value, i == 0);
                 i++;
+=======
+            for (Iterator<String> iterator = values.iterator(); iterator.hasNext();) {
+                writeInternal(iterator.next());
+                if (iterator.hasNext()) {
+                    writer.write(fieldSeparator);
+                }
+>>>>>>> right_content.java
             }
             endRow();
             return this;
@@ -189,22 +266,28 @@ public final class CsvWriter implements Closeable {
         }
     }
 
+
     /**
      * Writes a complete line - one or more fields and new line character(s) at the end.
      *
      * @param values the fields to write ({@code null} values are handled as empty strings, if
-     *               not configured otherwise ({@link QuoteStrategy#EMPTY}))
+     *               not configured otherwise ({@link QuoteStrategy#EMPTY})).
      * @return This CsvWriter.
      * @throws UncheckedIOException if a write error occurs
-     * @see #writeRow(Iterable)
+     * @see #writeRow(String...)
      */
+
     public CsvWriter writeRow(final String... values) {
         try {
             for (int i = 0; i < values.length; i++) {
                 if (i > 0) {
                     writer.write(fieldSeparator);
                 }
+<<<<<<< left_content.java
                 writeInternal(values[i], i == 0);
+=======
+                writeInternal(values[i]);
+>>>>>>> right_content.java
             }
             endRow();
             return this;
@@ -213,66 +296,16 @@ public final class CsvWriter implements Closeable {
         }
     }
 
+
     /**
-     * Writes a comment line and new line character(s) at the end.
-     *
-     * @param comment the comment to write. The comment character
-     *                (configured by {@link CsvWriterBuilder#commentCharacter(char)}) is automatically prepended.
-     *                Empty or {@code null} values results in a line only consisting of the comment character.
-     *                If the argument {@code comment} contains line break characters (CR, LF), multiple comment lines
-     *                will be written, terminated with the line break character configured by
-     *                {@link CsvWriterBuilder#lineDelimiter(LineDelimiter)}.
+     * Writes a complete line - one or more fields and new line character(s) at the end.
      *
+     * @param values the fields to write ({@code null} values are handled as empty strings, if
+     *               not configured otherwise ({@link QuoteStrategy#EMPTY}))
      * @return This CsvWriter.
      * @throws UncheckedIOException if a write error occurs
+     * @see #writeRow(Iterable)
      */
-    public CsvWriter writeComment(final String comment) {
-        try {
-            writer.write(commentCharacter);
-            if (comment != null && !comment.isEmpty()) {
-                writeCommentInternal(comment);
-            }
-            endRow();
-            return this;
-        } catch (final IOException e) {
-            throw new UncheckedIOException(e);
-        }
-    }
-
-    private void writeCommentInternal(final String comment) throws IOException {
-        final int length = comment.length();
-
-        int startPos = 0;
-        boolean lastCharWasCR = false;
-        for (int i = 0; i < comment.length(); i++) {
-            final char c = comment.charAt(i);
-            if (c == CR) {
-                final int len = i - startPos;
-                writer.write(comment, startPos, len);
-                writer.write(lineDelimiter, 0, lineDelimiter.length());
-                writer.write(commentCharacter);
-                startPos += len + 1;
-                lastCharWasCR = true;
-            } else if (c == LF) {
-                if (lastCharWasCR) {
-                    lastCharWasCR = false;
-                    startPos++;
-                } else {
-                    final int len = i - startPos;
-                    writer.write(comment, startPos, len);
-                    writer.write(lineDelimiter, 0, lineDelimiter.length());
-                    writer.write(commentCharacter);
-                    startPos += len + 1;
-                }
-            } else {
-                lastCharWasCR = false;
-            }
-        }
-
-        if (length > startPos) {
-            writer.write(comment, startPos, length - startPos);
-        }
-    }
 
     private void endRow() throws IOException {
         writer.write(lineDelimiter, 0, lineDelimiter.length());
@@ -290,14 +323,14 @@ public final class CsvWriter implements Closeable {
      * This builder is used to create configured instances of {@link CsvWriter}. The default
      * configuration of this class complies with RFC 4180.
      */
+
     @SuppressWarnings({"checkstyle:HiddenField", "PMD.AvoidFieldNameMatchingMethodName"})
-    public static final class CsvWriterBuilder {
+    public static final class CsvWriterBuilder{
 
-        private char fieldSeparator = ',';
-        private char quoteCharacter = '"';
-        private char commentCharacter = '#';
-        private QuoteStrategy quoteStrategy = QuoteStrategy.REQUIRED;
-        private LineDelimiter lineDelimiter = LineDelimiter.CRLF;
+        private char fieldSeparator = ',';,
+        private char quoteCharacter = '"';,
+        private QuoteStrategy quoteStrategy = QuoteStrategy.REQUIRED;,
+        private LineDelimiter lineDelimiter = LineDelimiter.CRLF;,
 
         CsvWriterBuilder() {
         }
@@ -308,6 +341,7 @@ public final class CsvWriter implements Closeable {
          * @param fieldSeparator the field separator character.
          * @return This updated object, so that additional method calls can be chained together.
          */
+
         public CsvWriterBuilder fieldSeparator(final char fieldSeparator) {
             this.fieldSeparator = fieldSeparator;
             return this;
@@ -319,22 +353,12 @@ public final class CsvWriter implements Closeable {
          * @param quoteCharacter the character for enclosing fields.
          * @return This updated object, so that additional method calls can be chained together.
          */
+
         public CsvWriterBuilder quoteCharacter(final char quoteCharacter) {
             this.quoteCharacter = quoteCharacter;
             return this;
         }
 
-        /**
-         * Sets the character that is used to prepend commented lines (default: '#' - hash/number).
-         *
-         * @param commentCharacter the character for prepending commented lines.
-         * @return This updated object, so that additional method calls can be chained together.
-         */
-        public CsvWriterBuilder commentCharacter(final char commentCharacter) {
-            this.commentCharacter = commentCharacter;
-            return this;
-        }
-
         /**
          * Sets the strategy that defines when quoting has to be performed
          * (default: {@link QuoteStrategy#REQUIRED}).
@@ -342,6 +366,7 @@ public final class CsvWriter implements Closeable {
          * @param quoteStrategy the strategy when fields should be enclosed using the.
          * @return This updated object, so that additional method calls can be chained together.
          */
+
         public CsvWriterBuilder quoteStrategy(final QuoteStrategy quoteStrategy) {
             this.quoteStrategy = quoteStrategy;
             return this;
@@ -353,6 +378,7 @@ public final class CsvWriter implements Closeable {
          * @param lineDelimiter the line delimiter to be used.
          * @return This updated object, so that additional method calls can be chained together.
          */
+
         public CsvWriterBuilder lineDelimiter(final LineDelimiter lineDelimiter) {
             this.lineDelimiter = lineDelimiter;
             return this;
@@ -372,6 +398,7 @@ public final class CsvWriter implements Closeable {
          * @return a new CsvWriter instance - never {@code null}.
          * @throws NullPointerException if writer is {@code null}
          */
+
         public CsvWriter build(final Writer writer) {
             Objects.requireNonNull(writer, "writer must not be null");
 
@@ -379,40 +406,55 @@ public final class CsvWriter implements Closeable {
         }
 
         /**
-         * Constructs a {@link CsvWriter} for the specified path, openOptions using UTF-8 as the character set..
+         * Constructs a {@link CsvWriter} for the specified Path.
          *
          * @param path        the path to write data to.
+         * @param charset     the character set to be used for writing data to the file.
          * @param openOptions options specifying how the file is opened.
          *                    See {@link Files#newOutputStream(Path, OpenOption...)} for defaults.
          * @return a new CsvWriter instance - never {@code null}. Don't forget to close it!
          * @throws IOException          if a write error occurs
          * @throws NullPointerException if path or charset is {@code null}
          */
-        public CsvWriter build(final Path path, final OpenOption... openOptions)
+        private char commentCharacter = '#';,
+
+        public CsvWriter build(final Path path, final Charset charset,
+                               final OpenOption... openOptions)
             throws IOException {
-            return build(path, StandardCharsets.UTF_8, openOptions);
+
+            Objects.requireNonNull(path, "path must not be null");
+            Objects.requireNonNull(charset, "charset must not be null");
+
+            return newWriter(new OutputStreamWriter(Files.newOutputStream(path, openOptions),
+                charset), false);
         }
 
         /**
-         * Constructs a {@link CsvWriter} for the specified Path.
+         * Sets the character that is used to prepend commented lines (default: '#' - hash/number).
+         *
+         * @param commentCharacter the character for prepending commented lines.
+         * @return This updated object, so that additional method calls can be chained together.
+         */
+
+        public CsvWriterBuilder commentCharacter(final char commentCharacter) {
+            this.commentCharacter = commentCharacter;
+            return this;
+        }
+
+        /**
+         * Constructs a {@link CsvWriter} for the specified path, openOptions using UTF-8 as the character set..
          *
          * @param path        the path to write data to.
-         * @param charset     the character set to be used for writing data to the file.
          * @param openOptions options specifying how the file is opened.
          *                    See {@link Files#newOutputStream(Path, OpenOption...)} for defaults.
          * @return a new CsvWriter instance - never {@code null}. Don't forget to close it!
          * @throws IOException          if a write error occurs
          * @throws NullPointerException if path or charset is {@code null}
          */
-        public CsvWriter build(final Path path, final Charset charset,
-                               final OpenOption... openOptions)
-            throws IOException {
 
-            Objects.requireNonNull(path, "path must not be null");
-            Objects.requireNonNull(charset, "charset must not be null");
-
-            return newWriter(new OutputStreamWriter(Files.newOutputStream(path, openOptions),
-                charset), false);
+        public CsvWriter build(final Path path, final OpenOption... openOptions)
+            throws IOException {
+            return build(path, StandardCharsets.UTF_8, openOptions);
         }
 
         private CsvWriter newWriter(final Writer writer, final boolean syncWriter) {
@@ -421,19 +463,80 @@ public final class CsvWriter implements Closeable {
         }
 
     }
+    /**
+     * Writes a comment line and new line character(s) at the end.
+     *
+     * @param comment the comment to write. The comment character
+     *                (configured by {@link CsvWriterBuilder#commentCharacter(char)}) is automatically prepended.
+     *                Empty or {@code null} values results in a line only consisting of the comment character.
+     *                If the argument {@code comment} contains line break characters (CR, LF), multiple comment lines
+     *                will be written, terminated with the line break character configured by
+     *                {@link CsvWriterBuilder#lineDelimiter(LineDelimiter)}.
+     *
+     * @return This CsvWriter.
+     * @throws UncheckedIOException if a write error occurs
+     */
+
+    public CsvWriter writeComment(final String comment) {
+        try {
+            writer.write(commentCharacter);
+            if (comment != null && !comment.isEmpty()) {
+                writeCommentInternal(comment);
+            }
+            endRow();
+            return this;
+        } catch (final IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
+    private void writeCommentInternal(final String comment) throws IOException {
+        final int length = comment.length();
+
+        int startPos = 0;
+        boolean lastCharWasCR = false;
+        for (int i = 0; i < comment.length(); i++) {
+            final char c = comment.charAt(i);
+            if (c == CR) {
+                final int len = i - startPos;
+                writer.write(comment, startPos, len);
+                writer.write(lineDelimiter, 0, lineDelimiter.length());
+                writer.write(commentCharacter);
+                startPos += len + 1;
+                lastCharWasCR = true;
+            } else if (c == LF) {
+                if (lastCharWasCR) {
+                    lastCharWasCR = false;
+                    startPos++;
+                } else {
+                    final int len = i - startPos;
+                    writer.write(comment, startPos, len);
+                    writer.write(lineDelimiter, 0, lineDelimiter.length());
+                    writer.write(commentCharacter);
+                    startPos += len + 1;
+                }
+            } else {
+                lastCharWasCR = false;
+            }
+        }
+
+        if (length > startPos) {
+            writer.write(comment, startPos, length - startPos);
+        }
+    }
 
     /**
      * Unsynchronized and thus high performance replacement for BufferedWriter.
      * <p>
      * This class is intended for internal use only.
      */
-    static final class CachingWriter {
 
-        private static final int BUFFER_SIZE = 8192;
+    static final class CachingWriter{
 
-        private final Writer writer;
-        private final char[] buf = new char[BUFFER_SIZE];
-        private int pos;
+        private static final int BUFFER_SIZE = 8192;,
+        private final Writer writer;,
+        private final char[] buf = new char[BUFFER_SIZE];,
+        private int pos;,
 
         CachingWriter(final Writer writer) {
             this.writer = writer;
@@ -468,5 +571,4 @@ public final class CsvWriter implements Closeable {
         }
 
     }
-
-}
+}
\ No newline at end of file
