diff --git a/java_case_studies/reference_repos/FastCSV/conflict4/desired.java b/java_case_studies/reference_repos/FastCSV/conflict4/spork_result.java
index 681cfb9..7b8a022 100644
--- a/java_case_studies/reference_repos/FastCSV/conflict4/desired.java
+++ b/java_case_studies/reference_repos/FastCSV/conflict4/spork_result.java
@@ -13,48 +13,48 @@ import java.nio.file.Path;
 import java.util.Iterator;
 import java.util.Objects;
 
+
 /**
  * This is the main class for writing CSV data.
  * <p>
  * Example use:
- * <pre>{@code
- * try (CsvWriter csv = CsvWriter.builder().build(path)) {
- *     csv.writeRow("Hello", "world");
- * }
+ * <pre>{@code try (CsvWriter csv = CsvWriter.builder().build(path)) {
+ * csv.writeRow("Hello", "world");}
  * }</pre>
  */
-@SuppressWarnings({"checkstyle:NPathComplexity", "checkstyle:CyclomaticComplexity"})
+@SuppressWarnings({ "checkstyle:NPathComplexity", "checkstyle:CyclomaticComplexity" })
 public final class CsvWriter implements Closeable {
-
     private static final char CR = '\r';
+
     private static final char LF = '\n';
 
     private final CachingWriter writer;
+
     private final char fieldSeparator;
+
     private final char quoteCharacter;
+
     private final char commentCharacter;
+
     private final QuoteStrategy quoteStrategy;
+
     private final String lineDelimiter;
+
     private final boolean syncWriter;
 
-    CsvWriter(final Writer writer, final char fieldSeparator, final char quoteCharacter,
-              final char commentCharacter, final QuoteStrategy quoteStrategy, final LineDelimiter lineDelimiter,
-              final boolean syncWriter) {
-        if (fieldSeparator == CR || fieldSeparator == LF) {
+    CsvWriter(final Writer writer, final char fieldSeparator, final char quoteCharacter, final char commentCharacter, final QuoteStrategy quoteStrategy, final LineDelimiter lineDelimiter, final boolean syncWriter) {
+        if ((fieldSeparator == CR) || (fieldSeparator == LF)) {
             throw new IllegalArgumentException("fieldSeparator must not be a newline char");
         }
-        if (quoteCharacter == CR || quoteCharacter == LF) {
+        if ((quoteCharacter == CR) || (quoteCharacter == LF)) {
             throw new IllegalArgumentException("quoteCharacter must not be a newline char");
         }
-        if (commentCharacter == CR || commentCharacter == LF) {
+        if ((commentCharacter == CR) || (commentCharacter == LF)) {
             throw new IllegalArgumentException("commentCharacter must not be a newline char");
         }
         if (!allDiffers(fieldSeparator, quoteCharacter, commentCharacter)) {
-            throw new IllegalArgumentException(String.format("Control characters must differ"
-                    + " (fieldSeparator=%s, quoteCharacter=%s, commentCharacter=%s)",
-                fieldSeparator, quoteCharacter, commentCharacter));
+            throw new IllegalArgumentException(String.format("Control characters must differ" + " (fieldSeparator=%s, quoteCharacter=%s, commentCharacter=%s)", fieldSeparator, quoteCharacter, commentCharacter));
         }
-
         this.writer = new CachingWriter(writer);
         this.fieldSeparator = fieldSeparator;
         this.quoteCharacter = quoteCharacter;
@@ -76,7 +76,6 @@ public final class CsvWriter implements Closeable {
     /**
      * Creates a {@link CsvWriterBuilder} instance used to configure and create instances of
      * this class.
-     *
      * @return CsvWriterBuilder instance with default settings.
      */
     public static CsvWriterBuilder builder() {
@@ -92,20 +91,16 @@ public final class CsvWriter implements Closeable {
             }
             return;
         }
-
         if (value.isEmpty()) {
-            if (quoteStrategy == QuoteStrategy.ALWAYS
-                || quoteStrategy == QuoteStrategy.EMPTY) {
+            if ((quoteStrategy == QuoteStrategy.ALWAYS) || (quoteStrategy == QuoteStrategy.EMPTY)) {
                 writer.write(quoteCharacter);
                 writer.write(quoteCharacter);
             }
             return;
         }
-
         final int length = value.length();
         boolean needsQuotes = quoteStrategy == QuoteStrategy.ALWAYS;
         int nextDelimPos = -1;
-
         for (int i = 0; i < length; i++) {
             final char c = value.charAt(i);
             if (c == quoteCharacter) {
@@ -113,22 +108,18 @@ public final class CsvWriter implements Closeable {
                 nextDelimPos = i;
                 break;
             }
-            if (!needsQuotes && (c == fieldSeparator || c == LF || c == CR
-                || (firstField && i == 0 && c == commentCharacter))) {
+            if ((!needsQuotes) && ((((c == fieldSeparator) || (c == LF)) || (c == CR)) || ((firstField && (i == 0)) && (c == commentCharacter)))) {
                 needsQuotes = true;
             }
         }
-
         if (needsQuotes) {
             writer.write(quoteCharacter);
         }
-
-        if (nextDelimPos > -1) {
+        if (nextDelimPos > (-1)) {
             writeEscaped(value, length, nextDelimPos);
         } else {
             writer.write(value, 0, length);
         }
-
         if (needsQuotes) {
             writer.write(quoteCharacter);
         }
@@ -166,14 +157,24 @@ public final class CsvWriter implements Closeable {
     /**
      * Writes a complete line - one or more fields and new line character(s) at the end.
      *
-     * @param values the fields to write ({@code null} values are handled as empty strings, if
-     *               not configured otherwise ({@link QuoteStrategy#EMPTY})).
+     * @param values
+     * 		the fields to append ({@code null} values are handled as empty strings, if
+     * 		not configured otherwise ({@link QuoteStrategy#EMPTY}))
      * @return This CsvWriter.
-     * @throws UncheckedIOException if a write error occurs
+     * @throws UncheckedIOException
+     * 		if a write error occurs
      * @see #writeRow(String...)
      */
     public CsvWriter writeRow(final Iterable<String> values) {
         try {
+<<<<<<< LEFT
+            for (Iterator<String> iterator = values.iterator(); iterator.hasNext();) {
+                writeInternal(iterator.next());
+                if (iterator.hasNext()) {
+                    writer.write(fieldSeparator);
+                }
+            }
+=======
             int i = 0;
             for (final String value : values) {
                 if (i > 0) {
@@ -182,6 +183,8 @@ public final class CsvWriter implements Closeable {
                 writeInternal(value, i == 0);
                 i++;
             }
+>>>>>>> RIGHT
+
             endRow();
             return this;
         } catch (final IOException e) {
@@ -192,10 +195,12 @@ public final class CsvWriter implements Closeable {
     /**
      * Writes a complete line - one or more fields and new line character(s) at the end.
      *
-     * @param values the fields to write ({@code null} values are handled as empty strings, if
-     *               not configured otherwise ({@link QuoteStrategy#EMPTY}))
+     * @param values
+     * 		the fields to append ({@code null} values are handled as empty strings, if
+     * 		not configured otherwise ({@link QuoteStrategy#EMPTY}))
      * @return This CsvWriter.
-     * @throws UncheckedIOException if a write error occurs
+     * @throws UncheckedIOException
+     * 		if a write error occurs
      * @see #writeRow(Iterable)
      */
     public CsvWriter writeRow(final String... values) {
@@ -290,13 +295,16 @@ public final class CsvWriter implements Closeable {
      * This builder is used to create configured instances of {@link CsvWriter}. The default
      * configuration of this class complies with RFC 4180.
      */
-    @SuppressWarnings({"checkstyle:HiddenField", "PMD.AvoidFieldNameMatchingMethodName"})
+    @SuppressWarnings({ "checkstyle:HiddenField", "PMD.AvoidFieldNameMatchingMethodName" })
     public static final class CsvWriterBuilder {
-
         private char fieldSeparator = ',';
+
         private char quoteCharacter = '"';
+
         private char commentCharacter = '#';
+
         private QuoteStrategy quoteStrategy = QuoteStrategy.REQUIRED;
+
         private LineDelimiter lineDelimiter = LineDelimiter.CRLF;
 
         CsvWriterBuilder() {
@@ -416,10 +424,8 @@ public final class CsvWriter implements Closeable {
         }
 
         private CsvWriter newWriter(final Writer writer, final boolean syncWriter) {
-            return new CsvWriter(writer, fieldSeparator, quoteCharacter, commentCharacter, quoteStrategy,
-                lineDelimiter, syncWriter);
+            return new CsvWriter(writer, fieldSeparator, quoteCharacter, commentCharacter, quoteStrategy, lineDelimiter, syncWriter);
         }
-
     }
 
     /**
@@ -428,11 +434,12 @@ public final class CsvWriter implements Closeable {
      * This class is intended for internal use only.
      */
     static final class CachingWriter {
-
         private static final int BUFFER_SIZE = 8192;
 
         private final Writer writer;
+
         private final char[] buf = new char[BUFFER_SIZE];
+
         private int pos;
 
         CachingWriter(final Writer writer) {
@@ -446,9 +453,9 @@ public final class CsvWriter implements Closeable {
             buf[pos++] = c;
         }
 
-        @SuppressWarnings({"checkstyle:FinalParameters", "checkstyle:ParameterAssignment"})
+        @SuppressWarnings({ "checkstyle:FinalParameters", "checkstyle:ParameterAssignment" })
         void write(final String str, final int off, final int len) throws IOException {
-            if (pos + len >= BUFFER_SIZE) {
+            if ((pos + len) >= BUFFER_SIZE) {
                 flushBuffer();
                 writer.write(str, off, len);
             } else {
@@ -466,7 +473,5 @@ public final class CsvWriter implements Closeable {
             flushBuffer();
             writer.close();
         }
-
     }
-
 }
