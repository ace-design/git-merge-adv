diff --git a/java_case_studies/reference_repos/maven/importC1/desired.java b/java_case_studies/reference_repos/maven/importC1/spork_result.java
index a7ff573..10cba9c 100644
--- a/java_case_studies/reference_repos/maven/importC1/desired.java
+++ b/java_case_studies/reference_repos/maven/importC1/spork_result.java
@@ -1,39 +1,15 @@
 package org.apache.maven.repository.internal;
 
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-import java.io.FileInputStream;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
 import javax.inject.Inject;
 import javax.inject.Named;
-
 import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
-import org.codehaus.plexus.util.IOUtil;
 import org.eclipse.aether.RepositoryEvent.EventType;
 import org.eclipse.aether.RepositoryEvent;
 import org.eclipse.aether.RepositorySystemSession;
@@ -64,6 +40,7 @@ import org.eclipse.aether.version.Version;
 import org.eclipse.aether.version.VersionConstraint;
 import org.eclipse.aether.version.VersionScheme;
 
+
 /**
  * @author Benjamin Bentmann
  */
@@ -73,11 +50,16 @@ public class DefaultVersionRangeResolver
     implements VersionRangeResolver, Service
 {
 
+<<<<<<< LEFT
     private static final String MAVEN_METADATA_XML = "maven-metadata.xml";
 
     @SuppressWarnings( "unused" )
     @Requirement( role = LoggerFactory.class )
     private Logger logger = NullLoggerFactory.LOGGER;
+=======
+    @Requirement
+    private Logger logger = NullLogger.INSTANCE;
+>>>>>>> RIGHT
 
     @Requirement
     private MetadataResolver metadataResolver;
@@ -215,7 +197,7 @@ public class DefaultVersionRangeResolver
 
         Metadata metadata =
             new DefaultMetadata( request.getArtifact().getGroupId(), request.getArtifact().getArtifactId(),
-                                 MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT );
+                                 MavenMetadata.MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT );
 
         List<MetadataRequest> metadataRequests = new ArrayList<MetadataRequest>( request.getRepositories().size() );
 
@@ -269,13 +251,15 @@ public class DefaultVersionRangeResolver
     {
         Versioning versioning = null;
 
-        FileInputStream fis = null;
-        try
+        if ( metadata != null )
         {
-            if ( metadata != null )
+            SyncContext syncContext = syncContextFactory.newInstance( session, true );
+
+            try
             {
-                SyncContext syncContext = syncContextFactory.newInstance( session, true );
+                syncContext.acquire( null, Collections.singleton( metadata ) );
 
+<<<<<<< LEFT
                 try
                 {
                     syncContext.acquire( null, Collections.singleton( metadata ) );
@@ -292,16 +276,19 @@ public class DefaultVersionRangeResolver
                 {
                     syncContext.close();
                 }
+=======
+                versioning = MavenMetadata.read( metadata.getFile() ).getVersioning();
+>>>>>>> RIGHT
+            }
+            catch ( Exception e )
+            {
+                invalidMetadata( session, trace, metadata, repository, e );
+                result.addException( e );
+            }
+            finally
+            {
+                syncContext.release();
             }
-        }
-        catch ( Exception e )
-        {
-            invalidMetadata( session, trace, metadata, repository, e );
-            result.addException( e );
-        }
-        finally
-        {
-            IOUtil.close( fis );
         }
 
         return ( versioning != null ) ? versioning : new Versioning();
@@ -319,4 +306,4 @@ public class DefaultVersionRangeResolver
         repositoryEventDispatcher.dispatch( event.build() );
     }
 
-}
\ No newline at end of file
+}
