diff --git a/java_case_studies/reference_repos/maven/importC1/left.java b/java_case_studies/reference_repos/maven/importC1/right.java
index 3e04755..87c69fb 100644
--- a/java_case_studies/reference_repos/maven/importC1/left.java
+++ b/java_case_studies/reference_repos/maven/importC1/right.java
@@ -19,65 +19,55 @@ package org.apache.maven.repository.internal;
  * under the License.
  */
 
-import java.io.FileInputStream;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.inject.Inject;
-import javax.inject.Named;
-
 import org.apache.maven.artifact.repository.metadata.Versioning;
-import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
 import org.codehaus.plexus.component.annotations.Component;
 import org.codehaus.plexus.component.annotations.Requirement;
-import org.codehaus.plexus.util.IOUtil;
-import org.eclipse.aether.RepositoryEvent.EventType;
-import org.eclipse.aether.RepositoryEvent;
-import org.eclipse.aether.RepositorySystemSession;
-import org.eclipse.aether.RequestTrace;
-import org.eclipse.aether.SyncContext;
-import org.eclipse.aether.impl.MetadataResolver;
-import org.eclipse.aether.impl.RepositoryEventDispatcher;
-import org.eclipse.aether.impl.SyncContextFactory;
-import org.eclipse.aether.impl.VersionRangeResolver;
-import org.eclipse.aether.metadata.DefaultMetadata;
-import org.eclipse.aether.metadata.Metadata;
-import org.eclipse.aether.repository.ArtifactRepository;
-import org.eclipse.aether.repository.RemoteRepository;
-import org.eclipse.aether.repository.WorkspaceReader;
-import org.eclipse.aether.resolution.MetadataRequest;
-import org.eclipse.aether.resolution.MetadataResult;
-import org.eclipse.aether.resolution.VersionRangeRequest;
-import org.eclipse.aether.resolution.VersionRangeResolutionException;
-import org.eclipse.aether.resolution.VersionRangeResult;
-import org.eclipse.aether.spi.locator.Service;
-import org.eclipse.aether.spi.locator.ServiceLocator;
-import org.eclipse.aether.spi.log.Logger;
-import org.eclipse.aether.spi.log.LoggerFactory;
-import org.eclipse.aether.spi.log.NullLoggerFactory;
-import org.eclipse.aether.util.version.GenericVersionScheme;
-import org.eclipse.aether.version.InvalidVersionSpecificationException;
-import org.eclipse.aether.version.Version;
-import org.eclipse.aether.version.VersionConstraint;
-import org.eclipse.aether.version.VersionScheme;
+import org.sonatype.aether.RepositoryEvent.EventType;
+import org.sonatype.aether.RepositorySystemSession;
+import org.sonatype.aether.RequestTrace;
+import org.sonatype.aether.SyncContext;
+import org.sonatype.aether.util.DefaultRequestTrace;
+import org.sonatype.aether.util.listener.DefaultRepositoryEvent;
+import org.sonatype.aether.util.metadata.DefaultMetadata;
+import org.sonatype.aether.util.version.GenericVersionScheme;
+import org.sonatype.aether.version.InvalidVersionSpecificationException;
+import org.sonatype.aether.version.Version;
+import org.sonatype.aether.version.VersionConstraint;
+import org.sonatype.aether.version.VersionScheme;
+import org.sonatype.aether.impl.MetadataResolver;
+import org.sonatype.aether.impl.RepositoryEventDispatcher;
+import org.sonatype.aether.impl.SyncContextFactory;
+import org.sonatype.aether.impl.VersionRangeResolver;
+import org.sonatype.aether.metadata.Metadata;
+import org.sonatype.aether.repository.ArtifactRepository;
+import org.sonatype.aether.repository.RemoteRepository;
+import org.sonatype.aether.repository.WorkspaceReader;
+import org.sonatype.aether.resolution.MetadataRequest;
+import org.sonatype.aether.resolution.MetadataResult;
+import org.sonatype.aether.resolution.VersionRangeRequest;
+import org.sonatype.aether.resolution.VersionRangeResolutionException;
+import org.sonatype.aether.resolution.VersionRangeResult;
+import org.sonatype.aether.spi.locator.Service;
+import org.sonatype.aether.spi.locator.ServiceLocator;
+import org.sonatype.aether.spi.log.Logger;
+import org.sonatype.aether.spi.log.NullLogger;
 
 /**
  * @author Benjamin Bentmann
  */
-@Named
 @Component( role = VersionRangeResolver.class )
 public class DefaultVersionRangeResolver
     implements VersionRangeResolver, Service
 {
 
-    private static final String MAVEN_METADATA_XML = "maven-metadata.xml";
-
-    @SuppressWarnings( "unused" )
-    @Requirement( role = LoggerFactory.class )
-    private Logger logger = NullLoggerFactory.LOGGER;
+    @Requirement
+    private Logger logger = NullLogger.INSTANCE;
 
     @Requirement
     private MetadataResolver metadataResolver;
@@ -88,41 +78,20 @@ public class DefaultVersionRangeResolver
     @Requirement
     private RepositoryEventDispatcher repositoryEventDispatcher;
 
-    public DefaultVersionRangeResolver()
-    {
-        // enable default constructor
-    }
-
-    @Inject
-    DefaultVersionRangeResolver( MetadataResolver metadataResolver, SyncContextFactory syncContextFactory,
-                                 RepositoryEventDispatcher repositoryEventDispatcher, LoggerFactory loggerFactory )
-    {
-        setMetadataResolver( metadataResolver );
-        setSyncContextFactory( syncContextFactory );
-        setLoggerFactory( loggerFactory );
-        setRepositoryEventDispatcher( repositoryEventDispatcher );
-    }
-
     public void initService( ServiceLocator locator )
     {
-        setLoggerFactory( locator.getService( LoggerFactory.class ) );
+        setLogger( locator.getService( Logger.class ) );
         setMetadataResolver( locator.getService( MetadataResolver.class ) );
         setSyncContextFactory( locator.getService( SyncContextFactory.class ) );
         setRepositoryEventDispatcher( locator.getService( RepositoryEventDispatcher.class ) );
     }
 
-    public DefaultVersionRangeResolver setLoggerFactory( LoggerFactory loggerFactory )
+    public DefaultVersionRangeResolver setLogger( Logger logger )
     {
-        this.logger = NullLoggerFactory.getSafeLogger( loggerFactory, getClass() );
+        this.logger = ( logger != null ) ? logger : NullLogger.INSTANCE;
         return this;
     }
 
-    void setLogger( LoggerFactory loggerFactory )
-    {
-        // plexus support
-        setLoggerFactory( loggerFactory );
-    }
-
     public DefaultVersionRangeResolver setMetadataResolver( MetadataResolver metadataResolver )
     {
         if ( metadataResolver == null )
@@ -173,7 +142,7 @@ public class DefaultVersionRangeResolver
 
         result.setVersionConstraint( versionConstraint );
 
-        if ( versionConstraint.getRange() == null )
+        if ( versionConstraint.getRanges().isEmpty() )
         {
             result.addVersion( versionConstraint.getVersion() );
         }
@@ -209,13 +178,13 @@ public class DefaultVersionRangeResolver
     private Map<String, ArtifactRepository> getVersions( RepositorySystemSession session, VersionRangeResult result,
                                                          VersionRangeRequest request )
     {
-        RequestTrace trace = RequestTrace.newChild( request.getTrace(), request );
+        RequestTrace trace = DefaultRequestTrace.newChild( request.getTrace(), request );
 
         Map<String, ArtifactRepository> versionIndex = new HashMap<String, ArtifactRepository>();
 
         Metadata metadata =
             new DefaultMetadata( request.getArtifact().getGroupId(), request.getArtifact().getArtifactId(),
-                                 MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT );
+                                 MavenMetadata.MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT );
 
         List<MetadataRequest> metadataRequests = new ArrayList<MetadataRequest>( request.getRepositories().size() );
 
@@ -269,39 +238,25 @@ public class DefaultVersionRangeResolver
     {
         Versioning versioning = null;
 
-        FileInputStream fis = null;
-        try
+        if ( metadata != null )
         {
-            if ( metadata != null )
-            {
-                SyncContext syncContext = syncContextFactory.newInstance( session, true );
+            SyncContext syncContext = syncContextFactory.newInstance( session, true );
 
-                try
-                {
-                    syncContext.acquire( null, Collections.singleton( metadata ) );
+            try
+            {
+                syncContext.acquire( null, Collections.singleton( metadata ) );
 
-                    if ( metadata.getFile() != null && metadata.getFile().exists() )
-                    {
-                        fis = new FileInputStream( metadata.getFile() );
-                        org.apache.maven.artifact.repository.metadata.Metadata m =
-                            new MetadataXpp3Reader().read( fis, false );
-                        versioning = m.getVersioning();
-                    }
-                }
-                finally
-                {
-                    syncContext.close();
-                }
+                versioning = MavenMetadata.read( metadata.getFile() ).getVersioning();
+            }
+            catch ( Exception e )
+            {
+                invalidMetadata( session, trace, metadata, repository, e );
+                result.addException( e );
+            }
+            finally
+            {
+                syncContext.release();
             }
-        }
-        catch ( Exception e )
-        {
-            invalidMetadata( session, trace, metadata, repository, e );
-            result.addException( e );
-        }
-        finally
-        {
-            IOUtil.close( fis );
         }
 
         return ( versioning != null ) ? versioning : new Versioning();
@@ -310,13 +265,12 @@ public class DefaultVersionRangeResolver
     private void invalidMetadata( RepositorySystemSession session, RequestTrace trace, Metadata metadata,
                                   ArtifactRepository repository, Exception exception )
     {
-        RepositoryEvent.Builder event = new RepositoryEvent.Builder( session, EventType.METADATA_INVALID );
-        event.setTrace( trace );
+        DefaultRepositoryEvent event = new DefaultRepositoryEvent( EventType.METADATA_INVALID, session, trace );
         event.setMetadata( metadata );
         event.setException( exception );
         event.setRepository( repository );
 
-        repositoryEventDispatcher.dispatch( event.build() );
+        repositoryEventDispatcher.dispatch( event );
     }
 
 }
