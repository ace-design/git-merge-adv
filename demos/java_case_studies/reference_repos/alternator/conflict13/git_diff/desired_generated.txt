diff --git a/java_case_studies/reference_repos/alternator/conflict13/desired.java b/java_case_studies/demo_results/MethodUnion/alternator-conflict13.java
index 7d15216..6d91ec5 100644
--- a/java_case_studies/reference_repos/alternator/conflict13/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/alternator-conflict13.java
@@ -1,18 +1,16 @@
 package com.michelboudreau.test;
-
+import com.amazonaws.services.dynamodb.AmazonDynamoDB;
+import com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper;
+import com.amazonaws.services.dynamodb.model.*;
+import com.michelboudreau.alternator.AlternatorDB;
+import com.michelboudreau.alternator.AlternatorDBClient;
+import javax.inject.Inject;
+import com.michelboudreau.alternator.AlternatorDBInProcessClient;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
-
-import javax.inject.Inject;
-
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.junit.Test;
-import org.springframework.util.Assert;
-
-import com.amazonaws.services.dynamodb.AmazonDynamoDB;
-import com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper;
 import com.amazonaws.services.dynamodb.model.AttributeValue;
 import com.amazonaws.services.dynamodb.model.CreateTableRequest;
 import com.amazonaws.services.dynamodb.model.DeleteTableRequest;
@@ -24,48 +22,45 @@ import com.amazonaws.services.dynamodb.model.ProvisionedThroughput;
 import com.amazonaws.services.dynamodb.model.PutItemRequest;
 import com.amazonaws.services.dynamodb.model.ScalarAttributeType;
 import com.amazonaws.services.dynamodb.model.TableDescription;
-import com.michelboudreau.alternator.AlternatorDB;
-import com.michelboudreau.alternator.AlternatorDBClient;
-import com.michelboudreau.alternator.AlternatorDBInProcessClient;
+import org.junit.Test;
+import org.springframework.util.Assert;
+
+public class AlternatorTest{
+
 
-public class AlternatorTest {
     /**
      * Set to true to run AlternatorDBHandler as a separate Jetty service process.
      * Set to false to invoke AlternatorDBHandler methods in-process
      * to facilitate breakpoint debugging.
      */
-	static boolean									RUN_DB_AS_SERVICE	= true;
 
     /**
      * Set to true to spawn the service in a local sub-process.
      * Set to false if an executable JAR instance of Alternator is running in another process.
      */
-    private static final boolean SPAWN_LOCAL_DB_SERVICE = true;
-
-	static protected AlternatorDBClient client;
-	static protected DynamoDBMapper mapper;
-
-    static protected AlternatorDBInProcessClient inProcessClient;
-    static protected DynamoDBMapper inProcessMapper;
-
-	static protected AlternatorDB db;
-
-	private ProvisionedThroughput provisionedThroughput;
-
-	public AlternatorTest() {
+    static boolean									RUN_DB_AS_SERVICE	= true;,
+    private static final boolean SPAWN_LOCAL_DB_SERVICE = true;,
+    static protected AlternatorDBClient client;,
+    static protected DynamoDBMapper mapper;,
+    static protected AlternatorDBInProcessClient inProcessClient;,
+    static protected DynamoDBMapper inProcessMapper;,
+    static protected AlternatorDB db;,
+    private ProvisionedThroughput provisionedThroughput;,
+
+    public AlternatorTest() {
 		provisionedThroughput = new ProvisionedThroughput();
 		provisionedThroughput.setReadCapacityUnits(10L);
 		provisionedThroughput.setWriteCapacityUnits(10L);
 	}
 
-	@BeforeClass
+    @BeforeClass
 	public static void setUpOnce() throws Exception {
         if (RUN_DB_AS_SERVICE && SPAWN_LOCAL_DB_SERVICE) {
             db = new AlternatorDB().start();
         }
 	}
 
-	@AfterClass
+    @AfterClass
 	public static void tearDownOnce() throws Exception {
         if (db != null) {
             db.stop();
@@ -77,7 +72,7 @@ public class AlternatorTest {
         mapper = value;
     }
 
-	@Inject
+    @Inject
 	public void setClient(AlternatorDBClient value) {
 		client = value;
 	}
@@ -109,58 +104,58 @@ public class AlternatorTest {
         }
     }
 
-	protected KeySchemaElement createStringKeyElement() {
+    protected KeySchemaElement createStringKeyElement() {
 		KeySchemaElement el = new KeySchemaElement();
 		el.setAttributeName(UUID.randomUUID().toString().substring(0, 2));
 		el.setAttributeType(ScalarAttributeType.S);
 		return el;
 	}
 
-	protected KeySchemaElement createNumberKeyElement() {
+    protected KeySchemaElement createNumberKeyElement() {
 		KeySchemaElement el = createStringKeyElement();
 		el.setAttributeType(ScalarAttributeType.N);
 		return el;
 	}
 
-	protected KeySchema createKeySchema() {
+    protected KeySchema createKeySchema() {
 		return createKeySchema(createStringKeyElement(), null);
 	}
 
-	protected KeySchema createKeySchema(KeySchemaElement hashKey) {
+    protected KeySchema createKeySchema(KeySchemaElement hashKey) {
 		return createKeySchema(hashKey, null);
 	}
 
-	protected KeySchema createKeySchema(KeySchemaElement hashKey, KeySchemaElement rangeKey) {
+    protected KeySchema createKeySchema(KeySchemaElement hashKey, KeySchemaElement rangeKey) {
 		KeySchema schema = new KeySchema(hashKey);
 		schema.setRangeKeyElement(rangeKey);
 		return schema;
 	}
 
-	protected String createTableName() {
+    protected String createTableName() {
 		return "Table" + UUID.randomUUID().toString().substring(0, 4);
 	}
 
-	protected TableDescription createTable() {
+    protected TableDescription createTable() {
 		return createTable(createTableName(), createKeySchema(), provisionedThroughput);
 	}
 
-	protected TableDescription createTable(String name) {
+    protected TableDescription createTable(String name) {
 		return createTable(name, createKeySchema(), provisionedThroughput);
 	}
 
-	protected TableDescription createTable(KeySchema schema) {
+    protected TableDescription createTable(KeySchema schema) {
 		return createTable(createTableName(), schema, provisionedThroughput);
 	}
 
-	protected TableDescription createTable(String name, KeySchema schema) {
+    protected TableDescription createTable(String name, KeySchema schema) {
 		return createTable(name, schema, provisionedThroughput);
 	}
 
-	protected TableDescription createTable(String name, KeySchema schema, ProvisionedThroughput throughput) {
+    protected TableDescription createTable(String name, KeySchema schema, ProvisionedThroughput throughput) {
 		return getClient().createTable(new CreateTableRequest(name, schema).withProvisionedThroughput(throughput)).getTableDescription();
 	}
 
-	protected void deleteAllTables() {
+    protected void deleteAllTables() {
 		String lastTableName = null;
 		while (true) {
 			ListTablesResult res = getClient().listTables(new ListTablesRequest().withExclusiveStartTableName(lastTableName));
@@ -174,31 +169,31 @@ public class AlternatorTest {
 		}
 	}
 
-	protected AttributeValue createStringAttribute() {
+    protected AttributeValue createStringAttribute() {
 		return new AttributeValue(UUID.randomUUID().toString());
 	}
 
-	protected AttributeValue createStringAttribute(String value) {
+    protected AttributeValue createStringAttribute(String value) {
 		return new AttributeValue(value);
 	}
 
-	protected AttributeValue createNumberAttribute() {
+    protected AttributeValue createNumberAttribute() {
 		return new AttributeValue().withN(Math.round(Math.random() * 1000)+"");
 	}
 
-	protected AttributeValue createNumberAttribute(Integer value) {
+    protected AttributeValue createNumberAttribute(Integer value) {
 		return new AttributeValue().withN(value.toString());
 	}
 
-	protected Map<String, AttributeValue> createGenericItem() {
+    protected Map<String, AttributeValue> createGenericItem() {
 		return createGenericItem(createStringAttribute(), createStringAttribute());
 	}
 
-	protected Map<String, AttributeValue> createGenericItem(AttributeValue hash) {
+    protected Map<String, AttributeValue> createGenericItem(AttributeValue hash) {
 		return createGenericItem(hash, createStringAttribute());
 	}
 
-	protected Map<String, AttributeValue> createGenericItem(AttributeValue hash, AttributeValue range) {
+    protected Map<String, AttributeValue> createGenericItem(AttributeValue hash, AttributeValue range) {
 		Map<String, AttributeValue> map = new HashMap<String, AttributeValue>();
 		map.put("id", hash);
 		if(range != null) {
@@ -207,14 +202,14 @@ public class AlternatorTest {
 		return map;
 	}
 
-	protected Map<String, AttributeValue> createGenericItem(
+    protected Map<String, AttributeValue> createGenericItem(
             AttributeValue hash,
             AttributeValue range,
             String attrName, String attrValue) {
         return createGenericItem(hash, range, attrName, attrValue, null, null);
 	}
 
-	protected Map<String, AttributeValue> createGenericItem(
+    protected Map<String, AttributeValue> createGenericItem(
             AttributeValue hash,
             AttributeValue range,
             String attrName1, String attrValue1,
@@ -242,4 +237,5 @@ public class AlternatorTest {
         getClient().putItem(req);
         return hash;
     }
-}
+
+}
\ No newline at end of file
