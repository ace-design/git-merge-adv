diff --git a/java_case_studies/reference_repos/alternator/conflict13/desired.java b/java_case_studies/reference_repos/alternator/conflict13/spork_result.java
index 7d15216..8b62769 100644
--- a/java_case_studies/reference_repos/alternator/conflict13/desired.java
+++ b/java_case_studies/reference_repos/alternator/conflict13/spork_result.java
@@ -1,16 +1,5 @@
 package com.michelboudreau.test;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.UUID;
-
-import javax.inject.Inject;
-
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.springframework.util.Assert;
-
 import com.amazonaws.services.dynamodb.AmazonDynamoDB;
 import com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper;
 import com.amazonaws.services.dynamodb.model.AttributeValue;
@@ -27,28 +16,39 @@ import com.amazonaws.services.dynamodb.model.TableDescription;
 import com.michelboudreau.alternator.AlternatorDB;
 import com.michelboudreau.alternator.AlternatorDBClient;
 import com.michelboudreau.alternator.AlternatorDBInProcessClient;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import javax.inject.Inject;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.springframework.util.Assert;
+
 
 public class AlternatorTest {
-    /**
-     * Set to true to run AlternatorDBHandler as a separate Jetty service process.
-     * Set to false to invoke AlternatorDBHandler methods in-process
-     * to facilitate breakpoint debugging.
-     */
-	static boolean									RUN_DB_AS_SERVICE	= true;
+		/**
+		 * Set to true to run AlternatorDBHandler as a separate Jetty service process.
+		 * Set to false to invoke AlternatorDBHandler methods in-process
+		 * to facilitate breakpoint debugging.
+		 */
+	static boolean RUN_DB_AS_SERVICE = true;
+
+		/**
+		 * Set to true to spawn the service in a local sub-process.
+		 * Set to false if an executable JAR instance of Alternator is running in another process.
+		 */
+		private static final boolean SPAWN_LOCAL_DB_SERVICE = true;
+
+static protected AlternatorDBClient client;
 
-    /**
-     * Set to true to spawn the service in a local sub-process.
-     * Set to false if an executable JAR instance of Alternator is running in another process.
-     */
-    private static final boolean SPAWN_LOCAL_DB_SERVICE = true;
+static protected DynamoDBMapper mapper;
 
-	static protected AlternatorDBClient client;
-	static protected DynamoDBMapper mapper;
+		static protected AlternatorDBInProcessClient inProcessClient;
 
-    static protected AlternatorDBInProcessClient inProcessClient;
-    static protected DynamoDBMapper inProcessMapper;
+		static protected DynamoDBMapper inProcessMapper;
 
-	static protected AlternatorDB db;
+static protected AlternatorDB db;
 
 	private ProvisionedThroughput provisionedThroughput;
 
@@ -60,54 +60,54 @@ public class AlternatorTest {
 
 	@BeforeClass
 	public static void setUpOnce() throws Exception {
-        if (RUN_DB_AS_SERVICE && SPAWN_LOCAL_DB_SERVICE) {
-            db = new AlternatorDB().start();
-        }
+		if (RUN_DB_AS_SERVICE && SPAWN_LOCAL_DB_SERVICE) {
+			db = new AlternatorDB().start();
+		}
 	}
 
-	@AfterClass
-	public static void tearDownOnce() throws Exception {
-        if (db != null) {
-            db.stop();
-        }
-	}
+@AfterClass
+public static void tearDownOnce() throws Exception {
+       if (db != null) {
+           db.stop();
+       }
+}
 
-    @Inject
-    public void setMapper(DynamoDBMapper value) {
-        mapper = value;
-    }
+	@Inject
+	public void setMapper(DynamoDBMapper value) {
+		mapper = value;
+	}
 
 	@Inject
 	public void setClient(AlternatorDBClient value) {
 		client = value;
 	}
 
-    @Test
-    public void noOpTest() {
-        Assert.isTrue(true);
-    }
-
-    protected AmazonDynamoDB getClient() {
-        if (RUN_DB_AS_SERVICE) {
-            return client;
-        } else {
-            if (inProcessClient == null) {
-                inProcessClient = new AlternatorDBInProcessClient();
-            }
-            return inProcessClient;
-        }
-    }
-
-    protected DynamoDBMapper getMapper() {
-        if (RUN_DB_AS_SERVICE) {
-            return mapper;
-        } else {
-            if (inProcessMapper == null) {
-                inProcessMapper = new DynamoDBMapper(getClient());
-            }
-            return inProcessMapper;
-        }
-    }
+		@Test
+		public void noOpTest() {
+		    Assert.isTrue(true);
+		}
+
+		protected AmazonDynamoDB getClient() {
+		    if (RUN_DB_AS_SERVICE) {
+		        return client;
+		    } else {
+		        if (inProcessClient == null) {
+		            inProcessClient = new AlternatorDBInProcessClient();
+		        }
+		        return inProcessClient;
+		    }
+		}
+
+		protected DynamoDBMapper getMapper() {
+		    if (RUN_DB_AS_SERVICE) {
+		        return mapper;
+		    } else {
+		        if (inProcessMapper == null) {
+		            inProcessMapper = new DynamoDBMapper(getClient());
+		        }
+		        return inProcessMapper;
+		    }
+		}
 
 	protected KeySchemaElement createStringKeyElement() {
 		KeySchemaElement el = new KeySchemaElement();
@@ -136,9 +136,9 @@ public class AlternatorTest {
 		return schema;
 	}
 
-	protected String createTableName() {
-		return "Table" + UUID.randomUUID().toString().substring(0, 4);
-	}
+protected String createTableName() {
+	return "Table" + UUID.randomUUID().toString().substring(0, 4);
+}
 
 	protected TableDescription createTable() {
 		return createTable(createTableName(), createKeySchema(), provisionedThroughput);
@@ -171,7 +171,7 @@ public class AlternatorTest {
 			if (lastTableName == null) {
 				break;
 			}
-		}
+		} 
 	}
 
 	protected AttributeValue createStringAttribute() {
@@ -183,11 +183,7 @@ public class AlternatorTest {
 	}
 
 	protected AttributeValue createNumberAttribute() {
-		return new AttributeValue().withN(Math.round(Math.random() * 1000)+"");
-	}
-
-	protected AttributeValue createNumberAttribute(Integer value) {
-		return new AttributeValue().withN(value.toString());
+		return new AttributeValue().withN(Math.round(Math.random() * 1000) + "");
 	}
 
 	protected Map<String, AttributeValue> createGenericItem() {
@@ -201,45 +197,42 @@ public class AlternatorTest {
 	protected Map<String, AttributeValue> createGenericItem(AttributeValue hash, AttributeValue range) {
 		Map<String, AttributeValue> map = new HashMap<String, AttributeValue>();
 		map.put("id", hash);
-		if(range != null) {
+		if (range != null) {
 			map.put("range", range);
 		}
 		return map;
 	}
 
-	protected Map<String, AttributeValue> createGenericItem(
-            AttributeValue hash,
-            AttributeValue range,
-            String attrName, String attrValue) {
-        return createGenericItem(hash, range, attrName, attrValue, null, null);
+	protected Map<String, AttributeValue> createGenericItem(AttributeValue hash, AttributeValue range, String attrName, String attrValue) {
+		return createGenericItem(hash, range, attrName, attrValue, null, null);
 	}
 
-	protected Map<String, AttributeValue> createGenericItem(
-            AttributeValue hash,
-            AttributeValue range,
-            String attrName1, String attrValue1,
-            String attrName2, String attrValue2) {
+	protected Map<String, AttributeValue> createGenericItem(AttributeValue hash, AttributeValue range, String attrName1, String attrValue1, String attrName2, String attrValue2) {
 		Map<String, AttributeValue> map = new HashMap<String, AttributeValue>();
 		map.put("id", hash);
-		if(range != null) {
+		if (range != null) {
 			map.put("range", range);
 		}
-		if((attrName1 != null) && (attrValue1 != null)) {
+		if ((attrName1 != null) && (attrValue1 != null)) {
 			map.put(attrName1, createStringAttribute(attrValue1));
 		}
-		if((attrName2 != null) && (attrValue2 != null)) {
+		if ((attrName2 != null) && (attrValue2 != null)) {
 			map.put(attrName2, createStringAttribute(attrValue2));
 		}
 		return map;
 	}
 
-    protected AttributeValue createItem(String tableName){
-        KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
-        createTable(tableName, schema);
-        AttributeValue hash = createStringAttribute();
-        Map<String, AttributeValue> item = createGenericItem(hash);
-        PutItemRequest req = new PutItemRequest().withTableName(tableName).withItem(item);
-        getClient().putItem(req);
-        return hash;
-    }
+	protected AttributeValue createItem(String tableName) {
+		KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
+		createTable(tableName, schema);
+		AttributeValue hash = createStringAttribute();
+		Map<String, AttributeValue> item = createGenericItem(hash);
+		PutItemRequest req = new PutItemRequest().withTableName(tableName).withItem(item);
+		getClient().putItem(req);
+		return hash;
+	}
+
+	protected AttributeValue createNumberAttribute(Integer value) {
+		return new AttributeValue().withN(value.toString());
+	}
 }
