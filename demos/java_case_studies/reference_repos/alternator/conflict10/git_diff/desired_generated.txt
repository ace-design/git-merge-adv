diff --git a/java_case_studies/reference_repos/alternator/conflict10/desired.java b/java_case_studies/demo_results/MethodUnion/alternator-conflict10.java
index df3bb75..a67ee9c 100644
--- a/java_case_studies/reference_repos/alternator/conflict10/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/alternator-conflict10.java
@@ -1,11 +1,11 @@
 package com.michelboudreau.test;
-
 import java.io.BufferedReader;
 import java.io.FileReader;
+import com.amazonaws.services.dynamodb.AmazonDynamoDB;
+import com.amazonaws.services.dynamodb.model.*;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
-
 import org.codehaus.jackson.JsonFactory;
 import org.codehaus.jackson.JsonParser;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -16,10 +16,8 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
-
 import com.amazonaws.AmazonServiceException;
 import com.amazonaws.AmazonWebServiceRequest;
-import com.amazonaws.services.dynamodb.AmazonDynamoDB;
 import com.amazonaws.services.dynamodb.model.AttributeValue;
 import com.amazonaws.services.dynamodb.model.AttributeValueUpdate;
 import com.amazonaws.services.dynamodb.model.ConditionalCheckFailedException;
@@ -43,9 +41,9 @@ import com.michelboudreau.alternator.enums.AttributeValueType;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(locations = {"classpath:/applicationContext.xml"})
-public class AlternatorItemTest extends AlternatorTest {
+public class AlternatorItemTest extends AlternatorTest{
 
-    private String tableName;
+    private String tableName;,
 
     @Before
     public void setUp() throws Exception {
@@ -58,6 +56,7 @@ public class AlternatorItemTest extends AlternatorTest {
     }
 
     //Test: put item with HashKey
+
     @Test
     public void putItemWithHashKey() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
@@ -68,7 +67,6 @@ public class AlternatorItemTest extends AlternatorTest {
         Assert.assertNotNull(res.getConsumedCapacityUnits());
     }
 
-
     @Test
     public void putItemWithHashKeyOverwriteItem() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
@@ -105,6 +103,7 @@ public class AlternatorItemTest extends AlternatorTest {
     }
 
     //Test: put item with HashKey and RangeKey
+
     @Test
     public void putItemWithHashKeyAndRangeKey() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
@@ -157,6 +156,7 @@ public class AlternatorItemTest extends AlternatorTest {
     //---------------------------------------------------------------------------
 
     // TODO: test out put item expected and return value
+
     @Test
     public void getItemTest() {
         AttributeValue hash = createItem(tableName);
@@ -242,7 +242,7 @@ public class AlternatorItemTest extends AlternatorTest {
 		}
     }
 
-     @Test
+    @Test
     public void deleteItem() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
@@ -273,6 +273,27 @@ public class AlternatorItemTest extends AlternatorTest {
         Assert.assertNotNull(result.getAttributes());
     }
 
+    @Test
+	public void putItemWithExpected() {
+		KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
+		createTable(tableName, schema);
+
+		AttributeValue value = new AttributeValue("test1");
+		Map<String, ExpectedAttributeValue> expectedMap = new HashMap<String, ExpectedAttributeValue>();
+		expectedMap.put("id", new ExpectedAttributeValue(value));
+
+		Map<String, AttributeValue> item = createGenericItem(value, null);
+
+		AmazonDynamoDB client = getClient();
+		client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
+
+		try {
+			client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
+			//Assert.assertTrue(false);// Should have thrown a ConditionalCheckFailedException
+		} catch (ConditionalCheckFailedException ccfe) {
+		}
+	}
+
     @Test
     public void deleteItemWithoutTableName() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
@@ -299,27 +320,6 @@ public class AlternatorItemTest extends AlternatorTest {
 		}
     }
 
-	@Test
-	public void putItemWithExpected() {
-		KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
-		createTable(tableName, schema);
-
-		AttributeValue value = new AttributeValue("test1");
-		Map<String, ExpectedAttributeValue> expectedMap = new HashMap<String, ExpectedAttributeValue>();
-		expectedMap.put("id", new ExpectedAttributeValue(value));
-
-		Map<String, AttributeValue> item = createGenericItem(value, null);
-
-		AmazonDynamoDB client = getClient();
-		client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
-
-		try {
-			client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
-			//Assert.assertTrue(false);// Should have thrown a ConditionalCheckFailedException
-		} catch (ConditionalCheckFailedException ccfe) {
-		}
-	}
-
     // TODO: test out delete item expected and return value
 
     /*@Test
@@ -338,7 +338,8 @@ public class AlternatorItemTest extends AlternatorTest {
         BatchWriteItemResult result = getClient().batchWriteItem(batchWriteItemRequest);
         Assert.assertNotNull(result);
     }*/
-/*
+
+    /*
 	@Test
 	public void batchWriteItemInTableTest() {
 		BatchWriteItemResult result = getClient().batchWriteItem(generateWriteBatchRequest());
@@ -450,7 +451,6 @@ public class AlternatorItemTest extends AlternatorTest {
         return AttributeValueType.UNKNOWN;
     }
 
-
     protected AttributeValue createStringAttribute() {
         return new AttributeValue(UUID.randomUUID().toString());
     }
@@ -485,4 +485,5 @@ public class AlternatorItemTest extends AlternatorTest {
         getClient().putItem(req);
         return hash;
     }
-}
+
+}
\ No newline at end of file
