diff --git a/java_case_studies/reference_repos/alternator/conflict10/desired.java b/java_case_studies/reference_repos/alternator/conflict10/spork_result.java
index df3bb75..424d7da 100644
--- a/java_case_studies/reference_repos/alternator/conflict10/desired.java
+++ b/java_case_studies/reference_repos/alternator/conflict10/spork_result.java
@@ -1,11 +1,17 @@
 package com.michelboudreau.test;
 
+import com.amazonaws.AmazonServiceException;
+import com.amazonaws.AmazonWebServiceRequest;
+import com.amazonaws.services.dynamodb.AmazonDynamoDB;
+import com.amazonaws.services.dynamodb.model.*;
+import com.amazonaws.transform.JsonUnmarshallerContext;
+import com.amazonaws.transform.Unmarshaller;
+import com.michelboudreau.alternator.enums.AttributeValueType;
 import java.io.BufferedReader;
 import java.io.FileReader;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
-
 import org.codehaus.jackson.JsonFactory;
 import org.codehaus.jackson.JsonParser;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -17,34 +23,10 @@ import org.junit.runner.RunWith;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import com.amazonaws.AmazonServiceException;
-import com.amazonaws.AmazonWebServiceRequest;
-import com.amazonaws.services.dynamodb.AmazonDynamoDB;
-import com.amazonaws.services.dynamodb.model.AttributeValue;
-import com.amazonaws.services.dynamodb.model.AttributeValueUpdate;
-import com.amazonaws.services.dynamodb.model.ConditionalCheckFailedException;
-import com.amazonaws.services.dynamodb.model.DeleteItemRequest;
-import com.amazonaws.services.dynamodb.model.DeleteItemResult;
-import com.amazonaws.services.dynamodb.model.ExpectedAttributeValue;
-import com.amazonaws.services.dynamodb.model.GetItemRequest;
-import com.amazonaws.services.dynamodb.model.GetItemResult;
-import com.amazonaws.services.dynamodb.model.Key;
-import com.amazonaws.services.dynamodb.model.KeySchema;
-import com.amazonaws.services.dynamodb.model.KeySchemaElement;
-import com.amazonaws.services.dynamodb.model.PutItemRequest;
-import com.amazonaws.services.dynamodb.model.PutItemResult;
-import com.amazonaws.services.dynamodb.model.ReturnValue;
-import com.amazonaws.services.dynamodb.model.ScalarAttributeType;
-import com.amazonaws.services.dynamodb.model.UpdateItemRequest;
-import com.amazonaws.services.dynamodb.model.UpdateItemResult;
-import com.amazonaws.transform.JsonUnmarshallerContext;
-import com.amazonaws.transform.Unmarshaller;
-import com.michelboudreau.alternator.enums.AttributeValueType;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@ContextConfiguration(locations = {"classpath:/applicationContext.xml"})
+@ContextConfiguration(locations = { "classpath:/applicationContext.xml" })
 public class AlternatorItemTest extends AlternatorTest {
-
     private String tableName;
 
     @Before
@@ -68,14 +50,15 @@ public class AlternatorItemTest extends AlternatorTest {
         Assert.assertNotNull(res.getConsumedCapacityUnits());
     }
 
-
     @Test
     public void putItemWithHashKeyOverwriteItem() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         PutItemRequest request = new PutItemRequest().withTableName(tableName).withItem(createGenericItem());
-        getClient().putItem(request); // put item beforehand
-        PutItemResult res = getClient().putItem(request); // Add another
+        // put item beforehand
+        getClient().putItem(request);
+        // Add another
+        PutItemResult res = getClient().putItem(request);
         Assert.assertNotNull(res);
         Assert.assertNotNull(res.getConsumedCapacityUnits());
     }
@@ -85,11 +68,12 @@ public class AlternatorItemTest extends AlternatorTest {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         PutItemRequest request = new PutItemRequest().withTableName(tableName);
-		try {
-			getClient().putItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().putItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     @Test
@@ -97,11 +81,12 @@ public class AlternatorItemTest extends AlternatorTest {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         PutItemRequest request = new PutItemRequest().withItem(createGenericItem());
-		try {
-			getClient().putItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().putItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     //Test: put item with HashKey and RangeKey
@@ -122,8 +107,10 @@ public class AlternatorItemTest extends AlternatorTest {
         schema.setRangeKeyElement(new KeySchemaElement().withAttributeName("range").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         PutItemRequest request = new PutItemRequest().withTableName(tableName).withItem(createGenericItem());
-        getClient().putItem(request); // put item beforehand
-        PutItemResult res = getClient().putItem(request); // Add another
+        // put item beforehand
+        getClient().putItem(request);
+        // Add another
+        PutItemResult res = getClient().putItem(request);
         Assert.assertNotNull(res);
         Assert.assertNotNull(res.getConsumedCapacityUnits());
     }
@@ -134,11 +121,12 @@ public class AlternatorItemTest extends AlternatorTest {
         schema.setRangeKeyElement(new KeySchemaElement().withAttributeName("range").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         PutItemRequest request = new PutItemRequest().withTableName(tableName);
-		try {
-			getClient().putItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().putItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     @Test
@@ -147,15 +135,15 @@ public class AlternatorItemTest extends AlternatorTest {
         schema.setRangeKeyElement(new KeySchemaElement().withAttributeName("range").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         PutItemRequest request = new PutItemRequest().withItem(createGenericItem());
-		try {
-			getClient().putItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().putItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     //---------------------------------------------------------------------------
-
     // TODO: test out put item expected and return value
     @Test
     public void getItemTest() {
@@ -171,22 +159,24 @@ public class AlternatorItemTest extends AlternatorTest {
     public void getItemWithoutTableNameTest() {
         GetItemRequest request = new GetItemRequest();
         request.setKey(new Key().withHashKeyElement(new AttributeValue().withNS("123")));
-		try {
-			getClient().getItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().getItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     @Test
     public void getItemWithoutKeyTest() {
         GetItemRequest request = new GetItemRequest();
         request.setTableName(tableName);
-		try {
-			getClient().getItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().getItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     @Test
@@ -216,11 +206,12 @@ public class AlternatorItemTest extends AlternatorTest {
         UpdateItemRequest request = new UpdateItemRequest();
         request.setKey(key);
         request.setAttributeUpdates(attrToUp);
-		try {
-			getClient().updateItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().updateItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     @Test
@@ -235,18 +226,20 @@ public class AlternatorItemTest extends AlternatorTest {
         UpdateItemRequest request = new UpdateItemRequest();
         request.setTableName(tableName);
         request.setAttributeUpdates(attrToUp);
-		try {
-			getClient().updateItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().updateItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
-     @Test
+    @Test
     public void deleteItem() {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
-        AttributeValue hash = new AttributeValue("ad"); //createStringAttribute();
+        //createStringAttribute();
+        AttributeValue hash = new AttributeValue("ad");
         getClient().putItem(new PutItemRequest().withTableName(tableName).withItem(createGenericItem(hash)));
         DeleteItemRequest request = new DeleteItemRequest().withTableName(tableName).withKey(new Key(hash));
         DeleteItemResult result = getClient().deleteItem(request);
@@ -280,11 +273,12 @@ public class AlternatorItemTest extends AlternatorTest {
         AttributeValue hash = createStringAttribute();
         getClient().putItem(new PutItemRequest().withTableName(tableName).withItem(createGenericItem(hash)));
         DeleteItemRequest request = new DeleteItemRequest().withKey(new Key(hash));
-		try {
-			getClient().deleteItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().deleteItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
     @Test
@@ -292,33 +286,30 @@ public class AlternatorItemTest extends AlternatorTest {
         KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
         createTable(tableName, schema);
         DeleteItemRequest request = new DeleteItemRequest().withTableName(tableName).withKey(new Key(createStringAttribute()));
-		try {
-			getClient().deleteItem(request);
-			Assert.assertTrue(false);// Should have thrown an exception
-		} catch (AmazonServiceException ase) {
-		}
+        try {
+            getClient().deleteItem(request);
+// Should have thrown an exception
+            Assert.assertTrue(false);
+        } catch (AmazonServiceException ase) {
+        }
     }
 
-	@Test
-	public void putItemWithExpected() {
-		KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
-		createTable(tableName, schema);
-
-		AttributeValue value = new AttributeValue("test1");
-		Map<String, ExpectedAttributeValue> expectedMap = new HashMap<String, ExpectedAttributeValue>();
-		expectedMap.put("id", new ExpectedAttributeValue(value));
-
-		Map<String, AttributeValue> item = createGenericItem(value, null);
-
-		AmazonDynamoDB client = getClient();
-		client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
-
-		try {
-			client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
-			//Assert.assertTrue(false);// Should have thrown a ConditionalCheckFailedException
-		} catch (ConditionalCheckFailedException ccfe) {
-		}
-	}
+    @Test
+    public void putItemWithExpected() {
+        KeySchema schema = new KeySchema(new KeySchemaElement().withAttributeName("id").withAttributeType(ScalarAttributeType.S));
+        createTable(tableName, schema);
+        AttributeValue value = new AttributeValue("test1");
+        Map<String, ExpectedAttributeValue> expectedMap = new HashMap<String, ExpectedAttributeValue>();
+        expectedMap.put("id", new ExpectedAttributeValue(value));
+        Map<String, AttributeValue> item = createGenericItem(value, null);
+        AmazonDynamoDB client = getClient();
+        client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
+        try {
+            client.putItem(new PutItemRequest(tableName, item).withExpected(expectedMap));
+//Assert.assertTrue(false);// Should have thrown a ConditionalCheckFailedException
+        } catch (ConditionalCheckFailedException ccfe) {
+        }
+    }
 
     // TODO: test out delete item expected and return value
 
@@ -338,43 +329,43 @@ public class AlternatorItemTest extends AlternatorTest {
         BatchWriteItemResult result = getClient().batchWriteItem(batchWriteItemRequest);
         Assert.assertNotNull(result);
     }*/
-/*
-	@Test
-	public void batchWriteItemInTableTest() {
-		BatchWriteItemResult result = getClient().batchWriteItem(generateWriteBatchRequest());
-		Assert.assertNotNull(result);
-	}
-
-	@Test
-	public void batchGetItemInTableTest() {
-		BatchGetItemResult result = getClient().batchGetItem(generateGetBatchRequest());
-		Assert.assertNotNull(result);
-	}
-
-	@Test
-	public void batchGetItemInTableWithoutKeyTest() {
-		BatchGetItemRequest batchGetItemRequest = new BatchGetItemRequest();
-		Map<String, KeysAndAttributes> requestItems = new HashMap<String, KeysAndAttributes>();
-		requestItems.put(testTableName, null);
-		batchGetItemRequest.withRequestItems(requestItems);
-		Assert.assertNull(getClient().batchGetItem(batchGetItemRequest).getResponses());
-	}
-
-	@Test
-	public void batchGetItemInTableWithoutNameTest() {
-		BatchGetItemRequest batchGetItemRequest = new BatchGetItemRequest();
-		Map<String, KeysAndAttributes> requestItems = new HashMap<String, KeysAndAttributes>();
-		Key table1key1 = new Key().withHashKeyElement(new AttributeValue().withS("123"));
-		requestItems.put(null, new KeysAndAttributes().withKeys(table1key1));
-		batchGetItemRequest.withRequestItems(requestItems);
-		Assert.assertNull(getClient().batchGetItem(batchGetItemRequest).getResponses());
-	}
-
-	@Test
-	public void batchGetItemInTableWithoutRequestItemsTest() {
-		Assert.assertNull(getClient().batchGetItem(new BatchGetItemRequest()).getResponses());
-	}
-*/
+    /*
+    	@Test
+    	public void batchWriteItemInTableTest() {
+    		BatchWriteItemResult result = getClient().batchWriteItem(generateWriteBatchRequest());
+    		Assert.assertNotNull(result);
+    	}
+
+    	@Test
+    	public void batchGetItemInTableTest() {
+    		BatchGetItemResult result = getClient().batchGetItem(generateGetBatchRequest());
+    		Assert.assertNotNull(result);
+    	}
+
+    	@Test
+    	public void batchGetItemInTableWithoutKeyTest() {
+    		BatchGetItemRequest batchGetItemRequest = new BatchGetItemRequest();
+    		Map<String, KeysAndAttributes> requestItems = new HashMap<String, KeysAndAttributes>();
+    		requestItems.put(testTableName, null);
+    		batchGetItemRequest.withRequestItems(requestItems);
+    		Assert.assertNull(getClient().batchGetItem(batchGetItemRequest).getResponses());
+    	}
+
+    	@Test
+    	public void batchGetItemInTableWithoutNameTest() {
+    		BatchGetItemRequest batchGetItemRequest = new BatchGetItemRequest();
+    		Map<String, KeysAndAttributes> requestItems = new HashMap<String, KeysAndAttributes>();
+    		Key table1key1 = new Key().withHashKeyElement(new AttributeValue().withS("123"));
+    		requestItems.put(null, new KeysAndAttributes().withKeys(table1key1));
+    		batchGetItemRequest.withRequestItems(requestItems);
+    		Assert.assertNull(getClient().batchGetItem(batchGetItemRequest).getResponses());
+    	}
+
+    	@Test
+    	public void batchGetItemInTableWithoutRequestItemsTest() {
+    		Assert.assertNull(getClient().batchGetItem(new BatchGetItemRequest()).getResponses());
+    	}
+    */
 
     /*
      public BatchGetItemRequest generateGetBatchRequest() {
@@ -450,7 +441,6 @@ public class AlternatorItemTest extends AlternatorTest {
         return AttributeValueType.UNKNOWN;
     }
 
-
     protected AttributeValue createStringAttribute() {
         return new AttributeValue(UUID.randomUUID().toString());
     }
