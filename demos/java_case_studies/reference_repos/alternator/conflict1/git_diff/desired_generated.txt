diff --git a/java_case_studies/reference_repos/alternator/conflict1/desired.java b/java_case_studies/demo_results/MethodUnion/alternator-conflict1.java
index 2cebf20..5ca5b83 100644
--- a/java_case_studies/reference_repos/alternator/conflict1/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/alternator-conflict1.java
@@ -1,5 +1,4 @@
 package com.michelboudreau.alternator;
-
 import com.amazonaws.services.dynamodb.model.*;
 import com.amazonaws.services.dynamodb.model.transform.*;
 import com.michelboudreau.alternator.enums.AttributeValueType;
@@ -13,25 +12,25 @@ import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.map.SerializationConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import javax.servlet.http.HttpServletRequest;
 import java.io.File;
 import java.io.IOException;
 import java.util.*;
 
-class AlternatorDBHandler {
+class AlternatorDBHandler{
 
-	private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);
+    private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);,
+    private Map<String, Table> tables = new HashMap<String, Table>();,
+    private List<Table> tableList = new ArrayList<Table>();,
 
-	private Map<String, Table> tables = new HashMap<String, Table>();
-	private List<Table> tableList = new ArrayList<Table>();
+    // TODO: create constructor that can handle a file
 
-	// TODO: create constructor that can handle a file
-	public AlternatorDBHandler() {
+    public AlternatorDBHandler() {
 	}
 
-	// Maybe save automatically on destroy?
-	public void save(String persistence) {
+    // Maybe save automatically on destroy?
+
+    public void save(String persistence) {
 		try {
 			createObjectMapper().writeValue(new File(persistence), tableList);
 		} catch (IOException e) {
@@ -39,7 +38,7 @@ class AlternatorDBHandler {
 		}
 	}
 
-	public void restore(String persistence) {
+    public void restore(String persistence) {
 		try {
 			File dbFile = new File(persistence);
 			if (dbFile.exists() == false) {
@@ -57,8 +56,9 @@ class AlternatorDBHandler {
 		}
 	}
 
-	// Not sure about this.  If correct and only need one, only create one instance
-	public ObjectMapper createObjectMapper() {
+    // Not sure about this.  If correct and only need one, only create one instance
+
+    public ObjectMapper createObjectMapper() {
 		ObjectMapper mapper = new ObjectMapper();
 		mapper.setVisibility(JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY)
 				.setVisibility(JsonMethod.CREATOR, JsonAutoDetect.Visibility.ANY)
@@ -71,7 +71,7 @@ class AlternatorDBHandler {
 		return mapper;
 	}
 
-	public String handle(HttpServletRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException, ResourceNotFoundException, ConditionalCheckFailedException {
+    public String handle(HttpServletRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException, ResourceNotFoundException, ConditionalCheckFailedException {
 		AmazonWebServiceRequestParser parser = new AmazonWebServiceRequestParser(request);
 
 		switch (parser.getType()) {
@@ -114,7 +114,7 @@ class AlternatorDBHandler {
         return null;
     }
 
-	protected CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
+    protected CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
 		// table limit of 256
 		if (this.tables.size() >= Limits.TABLE_MAX) {
 			throw new LimitExceededException("Cannot exceed 256 tables per account.");
@@ -144,7 +144,7 @@ class AlternatorDBHandler {
 		return new CreateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	protected DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DescribeTableRequestValidator validator = new DescribeTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -166,7 +166,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		ListTablesRequestValidator validator = new ListTablesRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -219,7 +219,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DeleteTableRequestValidator validator = new DeleteTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -239,7 +239,7 @@ class AlternatorDBHandler {
 		return new DeleteTableResult().withTableDescription(table.getTableDescription().withTableStatus(TableStatus.DELETING));
 	}
 
-	protected UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		UpdateTableRequestValidator validator = new UpdateTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -259,7 +259,7 @@ class AlternatorDBHandler {
 		return new UpdateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	protected PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
+    protected PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
 		// Validate data coming in
 		PutItemRequestValidator validator = new PutItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -323,7 +323,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		GetItemRequestValidator validator = new GetItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -367,7 +367,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected DeleteItemResult deleteItem(DeleteItemRequest request) {
+    protected DeleteItemResult deleteItem(DeleteItemRequest request) {
 		// Validate data coming in
 		DeleteItemRequestValidator validator = new DeleteItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -422,7 +422,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
+    protected BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
 		BatchGetItemResult batchGetItemResult = new BatchGetItemResult();
 
 		for (String tableName : request.getRequestItems().keySet()) {
@@ -443,12 +443,8 @@ class AlternatorDBHandler {
 		return batchGetItemResult;
 	}
 
-    protected BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
-        return new BatchWriteItemResult();
-    }
-
-
-	protected ScanResult scan(ScanRequest request) {
+    protected ScanResult scan(ScanRequest request) {
+<<<<<<< left_content.java
 		ScanResult result = new ScanResult();
 		List<Error> errors = new ScanRequestValidator().validate(request);
 		if (errors.size() > 0) {
@@ -572,6 +568,85 @@ class AlternatorDBHandler {
 		if (request.getLimit() != null) {
 			items = items.subList(0, request.getLimit() - 1);
 		}
+=======
+        ScanResult result = new ScanResult();
+        List<Error> errors = new ScanRequestValidator().validate(request);
+        if (errors.size() > 0) {
+            throw createInternalServerException(errors);
+        }
+        result.setConsumedCapacityUnits(0.5);
+        result.setLastEvaluatedKey(new Key());
+        List<Map<String, AttributeValue>> items = new ArrayList<Map<String, AttributeValue>>();
+        for (String key : this.tables.get(request.getTableName()).getItems().keySet()) {
+            Map<String, AttributeValue> item = this.tables.get(request.getTableName()).getItem(key);
+            if (request.getScanFilter() != null) {
+                for (String k : request.getScanFilter().keySet()) {
+                    Condition cond = request.getScanFilter().get(k);
+                    if(cond.getComparisonOperator()==null){
+                        throw new ResourceNotFoundException("There must be a comparisonOperator");
+                    }
+                    if (cond.getComparisonOperator().equals("EQ")) {
+                        if (cond.getAttributeValueList().size() == 1) {
+                            EQHandle(items, item, cond.getAttributeValueList().get(0), k);
+                        }
+                        else {
+                            //TODO: throw Exception
+                        }
+                    }
+                    if (cond.getComparisonOperator().equals("LE")) {
+                        if (cond.getAttributeValueList().size() == 1) {
+                            LEHandle(items, item, cond.getAttributeValueList().get(0), k);
+                        }
+                        else {
+                            //TODO: throw Exception
+                        }
+                    }
+                    if (cond.getComparisonOperator().equals("LT")) {
+                        if (cond.getAttributeValueList().size() == 1) {
+                            LTHandle(items, item, cond.getAttributeValueList().get(0), k);
+                        }
+                        else {
+                            //TODO: throw Exception
+                        }
+                    }
+                    if (cond.getComparisonOperator().equals("GE")) {
+                        if (cond.getAttributeValueList().size() == 1) {
+                            GEHandle(items, item, cond.getAttributeValueList().get(0), k);
+                        }
+                        else {
+                            //TODO: throw Exception
+                        }
+                    }
+                    if (cond.getComparisonOperator().equals("GT")) {
+                        if (cond.getAttributeValueList().size() == 1) {
+                            GTHandle(items, item, cond.getAttributeValueList().get(0), k);
+                        }
+                        else {
+                            //TODO: throw Exception
+                        }
+                    }
+                    if (cond.getComparisonOperator().equals("BETWEEN")) {
+                        if (cond.getAttributeValueList().size() == 2) {
+                            BETWEENHandle(items, item, cond.getAttributeValueList().get(0), cond.getAttributeValueList().get(1), k);
+                        }
+                        else {
+                            //TODO: throw Exception
+                        }
+                    }
+                    if (cond.getComparisonOperator().equals("IN")) {
+                        for (AttributeValue attrivuteValue : cond.getAttributeValueList()) {
+                            EQHandle(items, item, attrivuteValue, k);
+                        }
+                    }
+                }
+            } else {
+                items.add(item);
+            }
+        }
+        if (request.getLimit() != null) {
+            items = items.subList(0, request.getLimit() - 1);
+        }
+>>>>>>> right_content.java
 
 		for (Map<String, AttributeValue> item : items) {
 			result.setLastEvaluatedKey(new Key(item.get(this.tables.get(request.getTableName()).getHashKeyName())));
@@ -591,7 +666,12 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public QueryResult query(QueryRequest request) {
+
+    protected BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
+        return new BatchWriteItemResult();
+    }
+
+    public QueryResult query(QueryRequest request) {
 		// Validate data coming in
 		QueryRequestValidator validator = new QueryRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -623,7 +703,7 @@ class AlternatorDBHandler {
 		return queryResult;
 	}
 
-	protected String getKeyValue(AttributeValue value) {
+    protected String getKeyValue(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return value.getN();
@@ -634,7 +714,7 @@ class AlternatorDBHandler {
 		return null;
 	}
 
-	protected AttributeValueType getAttributeValueType(AttributeValue value) {
+    protected AttributeValueType getAttributeValueType(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return AttributeValueType.N;
@@ -649,7 +729,7 @@ class AlternatorDBHandler {
 		return AttributeValueType.UNKNOWN;
 	}
 
-	protected InternalServerErrorException createInternalServerException(List<Error> errors) {
+    protected InternalServerErrorException createInternalServerException(List<Error> errors) {
 		String message = "The following Errors occured: ";
 		for (Error error : errors) {
 			message += error.getMessage() + "\n";
@@ -657,7 +737,7 @@ class AlternatorDBHandler {
 		return new InternalServerErrorException(message);
 	}
 
-	protected UpdateItemResult updateItem(UpdateItemRequest request) {
+    protected UpdateItemResult updateItem(UpdateItemRequest request) {
 		// Validate data coming in
 		// TODO: Look into how we're doing validation, maybe implement better solution
 		UpdateItemRequestValidator validator = new UpdateItemRequestValidator();
@@ -780,27 +860,6 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
-		if (attributesToGet == null) {
-			return item;
-		}
-		Set<String> attributes = new HashSet<String>(item.keySet());
-		for (String attribute : attributes) {
-			if (!attributesToGet.contains(attribute)) {
-				item.remove(attribute);
-			}
-		}
-		return item;
-	}
-
-	protected List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
-		List<Map<String, AttributeValue>> copy = new ArrayList<Map<String, AttributeValue>>();
-		for (Map<String, AttributeValue> item : items) {
-			copy.add(getItemWithAttributesToGet(item, attributesToGet));
-		}
-		return copy;
-	}
-
     private void EQHandle (List<Map<String, AttributeValue>> items, Map<String, AttributeValue> item, AttributeValue attributeValue, String k) {
         if (item.get(k).equals(attributeValue)) {
              items.add(item);
@@ -856,6 +915,19 @@ class AlternatorDBHandler {
         GTHandle(items, item, attributeValue, k);
     }
 
+    protected Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
+		if (attributesToGet == null) {
+			return item;
+		}
+		Set<String> attributes = new HashSet<String>(item.keySet());
+		for (String attribute : attributes) {
+			if (!attributesToGet.contains(attribute)) {
+				item.remove(attribute);
+			}
+		}
+		return item;
+	}
+
     private void LEHandle (List<Map<String, AttributeValue>> items, Map<String, AttributeValue> item, AttributeValue attributeValue, String k) {
         EQHandle(items, item, attributeValue, k);
         LTHandle(items, item, attributeValue, k);
@@ -886,4 +958,13 @@ class AlternatorDBHandler {
             //List<String> value = (getAttributeValueType(item.get(k)).equals(AttributeValueType.SS))? item.get(k).getSS() : item.get(k).getNS();
         }
     }
-}
+
+    protected List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
+		List<Map<String, AttributeValue>> copy = new ArrayList<Map<String, AttributeValue>>();
+		for (Map<String, AttributeValue> item : items) {
+			copy.add(getItemWithAttributesToGet(item, attributesToGet));
+		}
+		return copy;
+	}
+
+}
\ No newline at end of file
