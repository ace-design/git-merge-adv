diff --git a/java_case_studies/reference_repos/alternator/conflict5/desired.java b/java_case_studies/demo_results/MethodUnion/alternator-conflict5.java
index d288c3b..1cf8f8d 100644
--- a/java_case_studies/reference_repos/alternator/conflict5/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/alternator-conflict5.java
@@ -1,5 +1,4 @@
 package com.michelboudreau.alternator;
-
 import com.amazonaws.services.dynamodb.model.*;
 import com.amazonaws.services.dynamodb.model.transform.*;
 import com.michelboudreau.alternator.enums.AttributeValueType;
@@ -13,25 +12,25 @@ import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.map.SerializationConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import javax.servlet.http.HttpServletRequest;
 import java.io.File;
 import java.io.IOException;
 import java.util.*;
 
-class AlternatorDBHandler {
+class AlternatorDBHandler{
 
-	private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);
+    private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);,
+    private Map<String, Table> tables = new HashMap<String, Table>();,
+    private List<Table> tableList = new ArrayList<Table>();,
 
-	private Map<String, Table> tables = new HashMap<String, Table>();
-	private List<Table> tableList = new ArrayList<Table>();
+    // TODO: create constructor that can handle a file
 
-	// TODO: create constructor that can handle a file
-	public AlternatorDBHandler() {
+    public AlternatorDBHandler() {
 	}
 
-	// Maybe save automatically on destroy?
-	public void save(String persistence) {
+    // Maybe save automatically on destroy?
+
+    public void save(String persistence) {
 		try {
 			createObjectMapper().writeValue(new File(persistence), tableList);
 		} catch (IOException e) {
@@ -39,7 +38,7 @@ class AlternatorDBHandler {
 		}
 	}
 
-	public void restore(String persistence) {
+    public void restore(String persistence) {
 		try {
 			File dbFile = new File(persistence);
 			if (dbFile.exists() == false) {
@@ -57,8 +56,9 @@ class AlternatorDBHandler {
 		}
 	}
 
-	// Not sure about this.  If correct and only need one, only create one instance
-	public ObjectMapper createObjectMapper() {
+    // Not sure about this.  If correct and only need one, only create one instance
+
+    public ObjectMapper createObjectMapper() {
 		ObjectMapper mapper = new ObjectMapper();
 		mapper.setVisibility(JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY)
 				.setVisibility(JsonMethod.CREATOR, JsonAutoDetect.Visibility.ANY)
@@ -71,7 +71,7 @@ class AlternatorDBHandler {
 		return mapper;
 	}
 
-	public String handle(HttpServletRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException, ResourceNotFoundException, ConditionalCheckFailedException {
+    public String handle(HttpServletRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException, ResourceNotFoundException, ConditionalCheckFailedException {
 		AmazonWebServiceRequestParser parser = new AmazonWebServiceRequestParser(request);
 
 		switch (parser.getType()) {
@@ -93,6 +93,7 @@ class AlternatorDBHandler {
 			case GET:
 				return new GetItemResultMarshaller().marshall(getItem(parser.getData(GetItemRequest.class, GetItemRequestJsonUnmarshaller.getInstance())));
 
+<<<<<<< left_content.java
             case UPDATE:
                 return new UpdateItemResultMarshaller().marshall(updateItem(parser.getData(UpdateItemRequest.class, UpdateItemRequestJsonUnmarshaller.getInstance())));
             case DELETE:
@@ -113,8 +114,33 @@ class AlternatorDBHandler {
         }
         return null;
     }
+=======
+			case UPDATE:
+				return new UpdateItemResultMarshaller().marshall(updateItem(parser.getData(UpdateItemRequest.class, UpdateItemRequestJsonUnmarshaller.getInstance())));
+			case DELETE:
+				return new DeleteItemResultMarshaller().marshall(deleteItem(parser.getData(DeleteItemRequest.class, DeleteItemRequestJsonUnmarshaller.getInstance())));
+			case BATCH_GET_ITEM:
+				return new BatchGetItemResultMarshaller().marshall((batchGetItem(parser.getData(BatchGetItemRequest.class, BatchGetItemRequestJsonUnmarshaller.getInstance()))));
+			/*
+																						   ;
+																							  case BATCH_WRITE_ITEM:
+																								  return batchWriteItem(parser.getData(BatchWriteItemRequest.class, BatchWriteItemRequestJsonUnmarshaller.getInstance()));
+																								  */
+			// Operations
+			case QUERY:
+				return new QueryResultMarshaller().marshall(query(parser.getData(QueryRequest.class, QueryRequestJsonUnmarshaller.getInstance())));
+			case SCAN:
+				return new ScanResultMarshaller().marshall(scan(parser.getData(ScanRequest.class, ScanRequestJsonUnmarshaller.getInstance())));
+			default:
+				logger.warn("The Request Type '" + parser.getType() + "' does not exist.");
+				break;
+		}
+		return null;
+	}
+>>>>>>> right_content.java
+
 
-	protected CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
+    protected CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
 		// table limit of 256
 		if (this.tables.size() >= Limits.TABLE_MAX) {
 			throw new LimitExceededException("Cannot exceed 256 tables per account.");
@@ -144,7 +170,7 @@ class AlternatorDBHandler {
 		return new CreateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	protected DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DescribeTableRequestValidator validator = new DescribeTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -166,7 +192,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		ListTablesRequestValidator validator = new ListTablesRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -219,7 +245,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DeleteTableRequestValidator validator = new DeleteTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -239,7 +265,7 @@ class AlternatorDBHandler {
 		return new DeleteTableResult().withTableDescription(table.getTableDescription().withTableStatus(TableStatus.DELETING));
 	}
 
-	protected UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		UpdateTableRequestValidator validator = new UpdateTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -259,7 +285,7 @@ class AlternatorDBHandler {
 		return new UpdateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	protected PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
+    protected PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
 		// Validate data coming in
 		PutItemRequestValidator validator = new PutItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -323,7 +349,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    protected GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		GetItemRequestValidator validator = new GetItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -367,7 +393,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected DeleteItemResult deleteItem(DeleteItemRequest request) {
+    protected DeleteItemResult deleteItem(DeleteItemRequest request) {
 		// Validate data coming in
 		DeleteItemRequestValidator validator = new DeleteItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -422,32 +448,32 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
+    protected BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
 		BatchGetItemResult batchGetItemResult = new BatchGetItemResult();
-
 		for (String tableName : request.getRequestItems().keySet()) {
-			BatchResponse batchResponse = new BatchResponse();
-			List<Map<String,AttributeValue>> items = new ArrayList<Map<String, AttributeValue>>();
 			KeysAndAttributes keysAndAttributes = request.getRequestItems().get(tableName);
 			List<Key> itemKeys = keysAndAttributes.getKeys();
 			List<String> attributeToGet = keysAndAttributes.getAttributesToGet();
 			for (Key itemKey : itemKeys) {
 				Map<String, AttributeValue> item = this.tables.get(tableName).getItem(getKeyValue(itemKey.getHashKeyElement()));
 				item = getItemWithAttributesToGet(item, attributeToGet);
-				items.add(item);
 			}
-			batchResponse.setConsumedCapacityUnits(1.0);
-			batchResponse.setItems(items);
-			batchGetItemResult.getResponses().put(tableName,batchResponse);
 		}
-		return batchGetItemResult;
+		return new BatchGetItemResult();
 	}
 
-    protected BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
+    <<<<<<< left_content.java
+protected BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
         return new BatchWriteItemResult();
     }
+=======
+protected Object batchWriteItem(BatchWriteItemRequest request) {
+		return new BatchWriteItemResult();
+	}
+>>>>>>> right_content.java
+
 
-	protected ScanResult scan(ScanRequest request) {
+    protected ScanResult scan(ScanRequest request) {
 		ScanResult result = new ScanResult();
 		List<Error> errors = new ScanRequestValidator().validate(request);
 		if (errors.size() > 0) {
@@ -590,7 +616,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public QueryResult query(QueryRequest request) {
+    public QueryResult query(QueryRequest request) {
 		// Validate data coming in
 		QueryRequestValidator validator = new QueryRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -622,7 +648,7 @@ class AlternatorDBHandler {
 		return queryResult;
 	}
 
-	protected String getKeyValue(AttributeValue value) {
+    protected String getKeyValue(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return value.getN();
@@ -633,7 +659,7 @@ class AlternatorDBHandler {
 		return null;
 	}
 
-	protected AttributeValueType getAttributeValueType(AttributeValue value) {
+    protected AttributeValueType getAttributeValueType(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return AttributeValueType.N;
@@ -648,7 +674,7 @@ class AlternatorDBHandler {
 		return AttributeValueType.UNKNOWN;
 	}
 
-	protected InternalServerErrorException createInternalServerException(List<Error> errors) {
+    protected InternalServerErrorException createInternalServerException(List<Error> errors) {
 		String message = "The following Errors occured: ";
 		for (Error error : errors) {
 			message += error.getMessage() + "\n";
@@ -656,7 +682,7 @@ class AlternatorDBHandler {
 		return new InternalServerErrorException(message);
 	}
 
-	protected UpdateItemResult updateItem(UpdateItemRequest request) {
+    protected UpdateItemResult updateItem(UpdateItemRequest request) {
 		// Validate data coming in
 		// TODO: Look into how we're doing validation, maybe implement better solution
 		UpdateItemRequestValidator validator = new UpdateItemRequestValidator();
@@ -779,7 +805,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	protected Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
+    protected Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
 		if (attributesToGet == null) {
 			return item;
 		}
@@ -792,7 +818,7 @@ class AlternatorDBHandler {
 		return item;
 	}
 
-	protected List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
+    protected List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
 		List<Map<String, AttributeValue>> copy = new ArrayList<Map<String, AttributeValue>>();
 		for (Map<String, AttributeValue> item : items) {
 			copy.add(getItemWithAttributesToGet(item, attributesToGet));
@@ -800,4 +826,4 @@ class AlternatorDBHandler {
 		return copy;
 	}
 
-}
+}
\ No newline at end of file
