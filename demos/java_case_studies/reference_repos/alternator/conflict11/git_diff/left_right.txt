diff --git a/java_case_studies/reference_repos/alternator/conflict11/left.java b/java_case_studies/reference_repos/alternator/conflict11/right.java
index f88306a..ae7edb6 100644
--- a/java_case_studies/reference_repos/alternator/conflict11/left.java
+++ b/java_case_studies/reference_repos/alternator/conflict11/right.java
@@ -1,17 +1,16 @@
 package com.michelboudreau.alternator;
 
-import com.amazonaws.services.dynamodb.model.*;
-import com.amazonaws.services.dynamodb.model.transform.*;
-import com.michelboudreau.alternator.enums.AttributeValueType;
-import com.michelboudreau.alternator.models.ItemRangeGroup;
-import com.michelboudreau.alternator.models.Limits;
-import com.michelboudreau.alternator.models.Table;
-import com.michelboudreau.alternator.parsers.AmazonWebServiceRequestParser;
-import com.michelboudreau.alternator.validators.*;
 import java.io.File;
 import java.io.IOException;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import javax.servlet.http.HttpServletRequest;
+
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.annotate.JsonMethod;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -19,6 +18,96 @@ import org.codehaus.jackson.map.SerializationConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.amazonaws.AmazonServiceException;
+import com.amazonaws.services.dynamodb.model.AttributeValue;
+import com.amazonaws.services.dynamodb.model.AttributeValueUpdate;
+import com.amazonaws.services.dynamodb.model.BatchGetItemRequest;
+import com.amazonaws.services.dynamodb.model.BatchGetItemResult;
+import com.amazonaws.services.dynamodb.model.BatchResponse;
+import com.amazonaws.services.dynamodb.model.BatchWriteItemRequest;
+import com.amazonaws.services.dynamodb.model.BatchWriteItemResult;
+import com.amazonaws.services.dynamodb.model.BatchWriteResponse;
+import com.amazonaws.services.dynamodb.model.Condition;
+import com.amazonaws.services.dynamodb.model.ConditionalCheckFailedException;
+import com.amazonaws.services.dynamodb.model.CreateTableRequest;
+import com.amazonaws.services.dynamodb.model.CreateTableResult;
+import com.amazonaws.services.dynamodb.model.DeleteItemRequest;
+import com.amazonaws.services.dynamodb.model.DeleteItemResult;
+import com.amazonaws.services.dynamodb.model.DeleteRequest;
+import com.amazonaws.services.dynamodb.model.DeleteTableRequest;
+import com.amazonaws.services.dynamodb.model.DeleteTableResult;
+import com.amazonaws.services.dynamodb.model.DescribeTableRequest;
+import com.amazonaws.services.dynamodb.model.DescribeTableResult;
+import com.amazonaws.services.dynamodb.model.ExpectedAttributeValue;
+import com.amazonaws.services.dynamodb.model.GetItemRequest;
+import com.amazonaws.services.dynamodb.model.GetItemResult;
+import com.amazonaws.services.dynamodb.model.InternalServerErrorException;
+import com.amazonaws.services.dynamodb.model.Key;
+import com.amazonaws.services.dynamodb.model.KeySchema;
+import com.amazonaws.services.dynamodb.model.KeySchemaElement;
+import com.amazonaws.services.dynamodb.model.KeysAndAttributes;
+import com.amazonaws.services.dynamodb.model.LimitExceededException;
+import com.amazonaws.services.dynamodb.model.ListTablesRequest;
+import com.amazonaws.services.dynamodb.model.ListTablesResult;
+import com.amazonaws.services.dynamodb.model.PutItemRequest;
+import com.amazonaws.services.dynamodb.model.PutItemResult;
+import com.amazonaws.services.dynamodb.model.PutRequest;
+import com.amazonaws.services.dynamodb.model.QueryRequest;
+import com.amazonaws.services.dynamodb.model.QueryResult;
+import com.amazonaws.services.dynamodb.model.ResourceInUseException;
+import com.amazonaws.services.dynamodb.model.ResourceNotFoundException;
+import com.amazonaws.services.dynamodb.model.ReturnValue;
+import com.amazonaws.services.dynamodb.model.ScanRequest;
+import com.amazonaws.services.dynamodb.model.ScanResult;
+import com.amazonaws.services.dynamodb.model.TableStatus;
+import com.amazonaws.services.dynamodb.model.UpdateItemRequest;
+import com.amazonaws.services.dynamodb.model.UpdateItemResult;
+import com.amazonaws.services.dynamodb.model.UpdateTableRequest;
+import com.amazonaws.services.dynamodb.model.UpdateTableResult;
+import com.amazonaws.services.dynamodb.model.WriteRequest;
+import com.amazonaws.services.dynamodb.model.transform.BatchGetItemRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.BatchGetItemResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.BatchWriteItemRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.BatchWriteItemResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.CreateTableRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.CreateTableResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.DeleteItemRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.DeleteItemResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.DeleteTableRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.DeleteTableResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.DescribeTableRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.DescribeTableResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.GetItemRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.GetItemResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.ListTablesRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.ListTablesResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.PutItemRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.PutItemResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.QueryRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.QueryResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.ScanRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.ScanResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.UpdateItemRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.UpdateItemResultMarshaller;
+import com.amazonaws.services.dynamodb.model.transform.UpdateTableRequestJsonUnmarshaller;
+import com.amazonaws.services.dynamodb.model.transform.UpdateTableResultMarshaller;
+import com.michelboudreau.alternator.enums.AttributeValueType;
+import com.michelboudreau.alternator.models.ItemRangeGroup;
+import com.michelboudreau.alternator.models.Limits;
+import com.michelboudreau.alternator.models.Table;
+import com.michelboudreau.alternator.parsers.AmazonWebServiceRequestParser;
+import com.michelboudreau.alternator.validators.CreateTableRequestValidator;
+import com.michelboudreau.alternator.validators.DeleteItemRequestValidator;
+import com.michelboudreau.alternator.validators.DeleteTableRequestValidator;
+import com.michelboudreau.alternator.validators.DescribeTableRequestValidator;
+import com.michelboudreau.alternator.validators.GetItemRequestValidator;
+import com.michelboudreau.alternator.validators.ListTablesRequestValidator;
+import com.michelboudreau.alternator.validators.PutItemRequestValidator;
+import com.michelboudreau.alternator.validators.QueryRequestValidator;
+import com.michelboudreau.alternator.validators.ScanRequestValidator;
+import com.michelboudreau.alternator.validators.UpdateItemRequestValidator;
+import com.michelboudreau.alternator.validators.UpdateTableRequestValidator;
+
 class AlternatorDBHandler {
 
 	private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);
@@ -114,7 +203,7 @@ class AlternatorDBHandler {
 		return null;
 	}
 
-	/* protected */ CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
+	public CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
 		// table limit of 256
 		if (this.tables.size() >= Limits.TABLE_MAX) {
 			throw new LimitExceededException("Cannot exceed 256 tables per account.");
@@ -125,7 +214,7 @@ class AlternatorDBHandler {
 		CreateTableRequestValidator validator = new CreateTableRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// get information
@@ -144,12 +233,12 @@ class AlternatorDBHandler {
 		return new CreateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	/* protected */ DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+	public DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DescribeTableRequestValidator validator = new DescribeTableRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// get information
@@ -166,7 +255,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	/* protected */ ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+	public ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		ListTablesRequestValidator validator = new ListTablesRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -219,12 +308,12 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	/* protected */ DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+	public DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DeleteTableRequestValidator validator = new DeleteTableRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// Check existence
@@ -239,12 +328,12 @@ class AlternatorDBHandler {
 		return new DeleteTableResult().withTableDescription(table.getTableDescription().withTableStatus(TableStatus.DELETING));
 	}
 
-	/* protected */ UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+	public UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		UpdateTableRequestValidator validator = new UpdateTableRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// Check existence
@@ -259,12 +348,13 @@ class AlternatorDBHandler {
 		return new UpdateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	/* protected */ PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
+	public PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
 		// Validate data coming in
 		PutItemRequestValidator validator = new PutItemRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
+
 		}
 
 		// Check existence of table
@@ -327,12 +417,12 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	/* protected */ GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+	public GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		GetItemRequestValidator validator = new GetItemRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// get information
@@ -350,12 +440,14 @@ class AlternatorDBHandler {
         ItemRangeGroup rangeGroup = this.tables.get(tableName).getItemRangeGroup(hashKeyValue);
 
 		if (rangeGroup == null) {
-			throw new ResourceNotFoundException("No item with Hash Key (" + hashKeyValue + ") exists.");
+			return new GetItemResult();
+			// throw new ResourceNotFoundException("No item with Hash Key (" + hashKeyValue + ") exists.");
 		} else {
             String rangeKeyValue = getKeyValue(key.getRangeKeyElement());
             Map<String, AttributeValue> item = this.tables.get(tableName).getItem(hashKeyValue, rangeKeyValue);
             if (item == null) {
-                throw new ResourceNotFoundException("No item with Hash Key (" + hashKeyValue + ") and Range Key )" + rangeKeyValue + ") exists.");
+				return new GetItemResult();
+				// throw new ResourceNotFoundException("No item with Hash Key (" + hashKeyValue + ") and Range Key )" + rangeKeyValue + ") exists.");
             }
 
 			if (attributesToGet == null) {
@@ -374,12 +466,12 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	/* protected */ DeleteItemResult deleteItem(DeleteItemRequest request) {
+	public DeleteItemResult deleteItem(DeleteItemRequest request) {
 		// Validate data coming in
 		DeleteItemRequestValidator validator = new DeleteItemRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// Check existence of table
@@ -433,7 +525,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	/* protected */ BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
+	public BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
 		BatchGetItemResult batchGetItemResult = new BatchGetItemResult();
 		Map<String, BatchResponse> response = new HashMap<String, BatchResponse>();
 		for (String tableName : request.getRequestItems().keySet()) {
@@ -469,7 +561,7 @@ class AlternatorDBHandler {
 		return batchGetItemResult;
 	}
 
-	/* protected */ BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
+	public BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
 		BatchWriteItemResult batchWriteItemResult = new BatchWriteItemResult();
 		HashMap<String, BatchWriteResponse> responses = new HashMap<String, BatchWriteResponse>();
 		for (String tableName : request.getRequestItems().keySet()) {
@@ -497,7 +589,7 @@ class AlternatorDBHandler {
 		return batchWriteItemResult;
 	}
 
-	/* protected */ ScanResult scan(ScanRequest request) {
+	public ScanResult scan(ScanRequest request) {
 		ScanResult result = new ScanResult();
 		List<Error> errors = new ScanRequestValidator().validate(request);
 		if (errors.size() > 0) {
@@ -637,7 +729,7 @@ class AlternatorDBHandler {
 			List<Map<String, AttributeValue>> copy = getItemWithAttributesToGet(items, request.getAttributesToGet());
 			items = copy;
 		}
-
+		
 		result.setItems(items);
 		result.setCount(items.size());
 		result.setScannedCount(items.size());
@@ -669,10 +761,17 @@ class AlternatorDBHandler {
         ItemRangeGroup rangeGroup = table.getItemRangeGroup(hashKeyValue);
         if (rangeGroup != null) {
             for (Map<String, AttributeValue> item : rangeGroup.getItems(rangeKeyElement, request.getRangeKeyCondition())) {
-                list.add(getItemWithAttributesToGet(item, attributesToGet));
+				if (request.getLimit() == null || request.getLimit() <= 0 || list.size() < request.getLimit()) {
+					if (request.getScanIndexForward() == null || request.getScanIndexForward() == false) {
+						list.add(0, getItemWithAttributesToGet(item, attributesToGet));
+					} else {
+						list.add(getItemWithAttributesToGet(item, attributesToGet));
+					}
+				}
             }
         }
 
+
 		queryResult.setItems(list);
 		queryResult.setCount(list.size());
 		queryResult.setConsumedCapacityUnits(0.5);
@@ -684,7 +783,7 @@ class AlternatorDBHandler {
 		return queryResult;
 	}
 
-	/* protected */ String getKeyValue(AttributeValue value) {
+	public String getKeyValue(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return value.getN();
@@ -695,7 +794,7 @@ class AlternatorDBHandler {
 		return null;
 	}
 
-	/* protected */ AttributeValueType getAttributeValueType(AttributeValue value) {
+	public AttributeValueType getAttributeValueType(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return AttributeValueType.N;
@@ -710,7 +809,7 @@ class AlternatorDBHandler {
 		return AttributeValueType.UNKNOWN;
 	}
 
-	/* protected */ InternalServerErrorException createInternalServerException(List<Error> errors) {
+	public InternalServerErrorException createInternalServerException(List<Error> errors) {
 		String message = "The following Errors occured: ";
 		for (Error error : errors) {
 			message += error.getMessage() + "\n";
@@ -718,13 +817,13 @@ class AlternatorDBHandler {
 		return new InternalServerErrorException(message);
 	}
 
-	/* protected */ UpdateItemResult updateItem(UpdateItemRequest request) {
+	public UpdateItemResult updateItem(UpdateItemRequest request) {
 		// Validate data coming in
 		// TODO: Look into how we're doing validation, maybe implement better solution
 		UpdateItemRequestValidator validator = new UpdateItemRequestValidator();
 		List<Error> errors = validator.validate(request);
 		if (errors.size() != 0) {
-			throw createInternalServerException(errors);
+			throw new AmazonServiceException(errors.toString());
 		}
 
 		// get information
@@ -835,14 +934,16 @@ class AlternatorDBHandler {
 
 			}
 			for (String sKey : attributesToUpdate.keySet()) {
-				item.put(sKey, attributesToUpdate.get(sKey).getValue());
+				if (attributesToUpdate.get(sKey).getAction().equals("DELETE") == false) {
+					item.put(sKey, attributesToUpdate.get(sKey).getValue());
+				}
 			}
 			result.setAttributes(item);
 		}
 		return result;
 	}
 
-	/* protected */ Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
+	public Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
 		if (item == null) {
 			return item;
 		}
@@ -858,7 +959,7 @@ class AlternatorDBHandler {
 		return item;
 	}
 
-	/* protected */ List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
+	public List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
 		List<Map<String, AttributeValue>> copy = new ArrayList<Map<String, AttributeValue>>();
 		for (Map<String, AttributeValue> item : items) {
 			copy.add(getItemWithAttributesToGet(item, attributesToGet));
