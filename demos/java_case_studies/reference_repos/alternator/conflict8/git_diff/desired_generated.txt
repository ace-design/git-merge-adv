diff --git a/java_case_studies/reference_repos/alternator/conflict8/desired.java b/java_case_studies/demo_results/MethodUnion/alternator-conflict8.java
index ae7edb6..3738a50 100644
--- a/java_case_studies/reference_repos/alternator/conflict8/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/alternator-conflict8.java
@@ -1,24 +1,24 @@
 package com.michelboudreau.alternator;
-
 import java.io.File;
+import com.amazonaws.services.dynamodb.model.*;
+import com.amazonaws.services.dynamodb.model.transform.*;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import com.michelboudreau.alternator.validators.*;
 import java.util.Map;
 import java.util.Set;
-
 import javax.servlet.http.HttpServletRequest;
-
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.annotate.JsonMethod;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.map.SerializationConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import com.amazonaws.AmazonServiceException;
+import java.util.*;
 import com.amazonaws.services.dynamodb.model.AttributeValue;
 import com.amazonaws.services.dynamodb.model.AttributeValueUpdate;
 import com.amazonaws.services.dynamodb.model.BatchGetItemRequest;
@@ -108,19 +108,20 @@ import com.michelboudreau.alternator.validators.ScanRequestValidator;
 import com.michelboudreau.alternator.validators.UpdateItemRequestValidator;
 import com.michelboudreau.alternator.validators.UpdateTableRequestValidator;
 
-class AlternatorDBHandler {
+class AlternatorDBHandler{
 
-	private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);
+    private final Logger logger = LoggerFactory.getLogger(AlternatorDBHandler.class);,
+    private Map<String, Table> tables = new HashMap<String, Table>();,
+    private List<Table> tableList = new ArrayList<Table>();,
 
-	private Map<String, Table> tables = new HashMap<String, Table>();
-	private List<Table> tableList = new ArrayList<Table>();
+    // TODO: create constructor that can handle a file
 
-	// TODO: create constructor that can handle a file
-	public AlternatorDBHandler() {
+    public AlternatorDBHandler() {
 	}
 
-	// Maybe save automatically on destroy?
-	public void save(String persistence) {
+    // Maybe save automatically on destroy?
+
+    public void save(String persistence) {
 		try {
 			createObjectMapper().writeValue(new File(persistence), tableList);
 		} catch (IOException e) {
@@ -128,7 +129,7 @@ class AlternatorDBHandler {
 		}
 	}
 
-	public void restore(String persistence) {
+    public void restore(String persistence) {
 		try {
 			File dbFile = new File(persistence);
 			if (dbFile.exists() == false) {
@@ -146,8 +147,9 @@ class AlternatorDBHandler {
 		}
 	}
 
-	// Not sure about this.  If correct and only need one, only create one instance
-	public ObjectMapper createObjectMapper() {
+    // Not sure about this.  If correct and only need one, only create one instance
+
+    public ObjectMapper createObjectMapper() {
 		ObjectMapper mapper = new ObjectMapper();
 		mapper.setVisibility(JsonMethod.FIELD, JsonAutoDetect.Visibility.ANY)
 				.setVisibility(JsonMethod.CREATOR, JsonAutoDetect.Visibility.ANY)
@@ -160,7 +162,7 @@ class AlternatorDBHandler {
 		return mapper;
 	}
 
-	public String handle(HttpServletRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException, ResourceNotFoundException, ConditionalCheckFailedException {
+    public String handle(HttpServletRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException, ResourceNotFoundException, ConditionalCheckFailedException {
 		AmazonWebServiceRequestParser parser = new AmazonWebServiceRequestParser(request);
 
 		switch (parser.getType()) {
@@ -203,7 +205,7 @@ class AlternatorDBHandler {
 		return null;
 	}
 
-	public CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
+    public CreateTableResult createTable(CreateTableRequest request) throws LimitExceededException, InternalServerErrorException, ResourceInUseException {
 		// table limit of 256
 		if (this.tables.size() >= Limits.TABLE_MAX) {
 			throw new LimitExceededException("Cannot exceed 256 tables per account.");
@@ -233,7 +235,10 @@ class AlternatorDBHandler {
 		return new CreateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	public DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+
+    /* protected */
+
+    public DescribeTableResult describeTable(DescribeTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DescribeTableRequestValidator validator = new DescribeTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -255,7 +260,8 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+
+    public ListTablesResult listTables(ListTablesRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		ListTablesRequestValidator validator = new ListTablesRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -308,7 +314,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+    public DeleteTableResult deleteTable(DeleteTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		DeleteTableRequestValidator validator = new DeleteTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -328,7 +334,8 @@ class AlternatorDBHandler {
 		return new DeleteTableResult().withTableDescription(table.getTableDescription().withTableStatus(TableStatus.DELETING));
 	}
 
-	public UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+
+    public UpdateTableResult updateTable(UpdateTableRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		UpdateTableRequestValidator validator = new UpdateTableRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -348,7 +355,8 @@ class AlternatorDBHandler {
 		return new UpdateTableResult().withTableDescription(table.getTableDescription());
 	}
 
-	public PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
+
+    public PutItemResult putItem(PutItemRequest request) throws InternalServerErrorException, ResourceNotFoundException, ConditionalCheckFailedException {
 		// Validate data coming in
 		PutItemRequestValidator validator = new PutItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -417,7 +425,8 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
+
+    public GetItemResult getItem(GetItemRequest request) throws InternalServerErrorException, ResourceNotFoundException {
 		// Validate data coming in
 		GetItemRequestValidator validator = new GetItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -466,7 +475,8 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public DeleteItemResult deleteItem(DeleteItemRequest request) {
+
+    public DeleteItemResult deleteItem(DeleteItemRequest request) {
 		// Validate data coming in
 		DeleteItemRequestValidator validator = new DeleteItemRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -525,7 +535,8 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
+
+    public BatchGetItemResult batchGetItem(BatchGetItemRequest request) {
 		BatchGetItemResult batchGetItemResult = new BatchGetItemResult();
 		Map<String, BatchResponse> response = new HashMap<String, BatchResponse>();
 		for (String tableName : request.getRequestItems().keySet()) {
@@ -561,7 +572,7 @@ class AlternatorDBHandler {
 		return batchGetItemResult;
 	}
 
-	public BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
+    public BatchWriteItemResult batchWriteItem(BatchWriteItemRequest request) {
 		BatchWriteItemResult batchWriteItemResult = new BatchWriteItemResult();
 		HashMap<String, BatchWriteResponse> responses = new HashMap<String, BatchWriteResponse>();
 		for (String tableName : request.getRequestItems().keySet()) {
@@ -589,7 +600,7 @@ class AlternatorDBHandler {
 		return batchWriteItemResult;
 	}
 
-	public ScanResult scan(ScanRequest request) {
+    public ScanResult scan(ScanRequest request) {
 		ScanResult result = new ScanResult();
 		List<Error> errors = new ScanRequestValidator().validate(request);
 		if (errors.size() > 0) {
@@ -736,7 +747,7 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public QueryResult query(QueryRequest request) {
+    public QueryResult query(QueryRequest request) {
 		// Validate data coming in
 		QueryRequestValidator validator = new QueryRequestValidator();
 		List<Error> errors = validator.validate(request);
@@ -783,7 +794,7 @@ class AlternatorDBHandler {
 		return queryResult;
 	}
 
-	public String getKeyValue(AttributeValue value) {
+    public String getKeyValue(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return value.getN();
@@ -794,7 +805,7 @@ class AlternatorDBHandler {
 		return null;
 	}
 
-	public AttributeValueType getAttributeValueType(AttributeValue value) {
+    public AttributeValueType getAttributeValueType(AttributeValue value) {
 		if (value != null) {
 			if (value.getN() != null) {
 				return AttributeValueType.N;
@@ -809,7 +820,7 @@ class AlternatorDBHandler {
 		return AttributeValueType.UNKNOWN;
 	}
 
-	public InternalServerErrorException createInternalServerException(List<Error> errors) {
+    public InternalServerErrorException createInternalServerException(List<Error> errors) {
 		String message = "The following Errors occured: ";
 		for (Error error : errors) {
 			message += error.getMessage() + "\n";
@@ -817,7 +828,7 @@ class AlternatorDBHandler {
 		return new InternalServerErrorException(message);
 	}
 
-	public UpdateItemResult updateItem(UpdateItemRequest request) {
+    public UpdateItemResult updateItem(UpdateItemRequest request) {
 		// Validate data coming in
 		// TODO: Look into how we're doing validation, maybe implement better solution
 		UpdateItemRequestValidator validator = new UpdateItemRequestValidator();
@@ -943,7 +954,8 @@ class AlternatorDBHandler {
 		return result;
 	}
 
-	public Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
+
+    public Map<String, AttributeValue> getItemWithAttributesToGet(Map<String, AttributeValue> item, List<String> attributesToGet) {
 		if (item == null) {
 			return item;
 		}
@@ -959,7 +971,7 @@ class AlternatorDBHandler {
 		return item;
 	}
 
-	public List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
+    public List<Map<String, AttributeValue>> getItemWithAttributesToGet(List<Map<String, AttributeValue>> items, List<String> attributesToGet) {
 		List<Map<String, AttributeValue>> copy = new ArrayList<Map<String, AttributeValue>>();
 		for (Map<String, AttributeValue> item : items) {
 			copy.add(getItemWithAttributesToGet(item, attributesToGet));
@@ -967,4 +979,4 @@ class AlternatorDBHandler {
 		return copy;
 	}
 
-}
+}
\ No newline at end of file
