diff --git a/java_case_studies/reference_repos/alternator/conflict3/desired.java b/java_case_studies/demo_results/MethodUnion/alternator-conflict3.java
index 0819ecb..f1842b2 100644
--- a/java_case_studies/reference_repos/alternator/conflict3/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/alternator-conflict3.java
@@ -1,5 +1,4 @@
 package com.michelboudreau.test;
-
 import com.amazonaws.services.dynamodb.model.*;
 import org.junit.After;
 import org.junit.Assert;
@@ -8,15 +7,14 @@ import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
-
 import java.util.*;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(locations = {"classpath:/applicationContext.xml"})
-public class AlternatorScanTest extends AlternatorTest {
+public class AlternatorScanTest extends AlternatorTest{
 
-    private String tableName;
-    private int nbOfItems;
+    private String tableName;,
+    private int nbOfItems;,
 
     @Before
     public void setUp() {
@@ -39,172 +37,186 @@ public class AlternatorScanTest extends AlternatorTest {
         client.deleteTable(del);
     }
 
-//    @Test
-//    public void scanWithScanFilterEQTestThatHasReturn() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-////        attributeValueList.add(new AttributeValue().withN(rangeKey.getN()));
-//        attributeValueList.add(new AttributeValue().withN("55"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.EQ);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-////            Assert.assertEquals(item.get("range"), rangeKey);
-//            Assert.assertEquals(item.get("range"), new AttributeValue().withN("55"));
-//        }
-//    }
-//    // Test that expected return 0 items
-//    @Test
-//    public void scanWithScanFilterEQTestThatHasNoReturn() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//        attributeValueList.add(new AttributeValue().withN("30"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.EQ);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        Assert.assertEquals(result.getItems().size(),0);
-//    }
-//
-//
-//    @Test
-//    public void scanWithScanFilterGTTestWithReturn() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-////
-//        attributeValueList.add(new AttributeValue().withN("50"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) > new Integer(new AttributeValue().withN("50").getN()));
-//        }
-//    }
-//
-//    @Test
-//    public void scanWithScanFilterGTTestWithNoReturn() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//
-//        attributeValueList.add(new AttributeValue().withN("120"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        Assert.assertEquals(result.getItems().size(),0);
-//    }
-//
-//
-//    @Test
-//    public void scanWithScanFilterGETest() { //Greater or Equal
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//        attributeValueList.add(new AttributeValue().withN("120"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        Assert.assertEquals(result.getItems().size(),0);
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
-//        }
-//    }
-//
-//
-////    // TODO: Exception!
-//    @Test
-//    public void scanWithScanFilterLETest() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-////        attributeValueList.add(new AttributeValue().withN(rangeKey.getN()));
-//        attributeValueList.add(new AttributeValue().withN("120"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.LE);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-////            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(rangeKey.getN()));
-//            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(new AttributeValue().withN("120").getN()));
+    //    @Test
+
+    //    // Test that expected return 10 items
+
+    //    public void scanWithScanFilterEQTestThatHasReturn() {
+
+    //        ScanRequest request = getBasicReq();
+
+    //        Condition rangeKeyCondition = new Condition();
+
+    //        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
+
+    ////        attributeValueList.add(new AttributeValue().withN(rangeKey.getN()));
+
+    //        attributeValueList.add(new AttributeValue().withN("55"));
+
+    //        rangeKeyCondition.setAttributeValueList(attributeValueList);
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.EQ);
+
+    //        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+
+    //        conditionMap.put("range", rangeKeyCondition);
+
+    //        request.setScanFilter(conditionMap);
+
+    //        ScanResult result = client.scan(request);
+
+    //        Assert.assertNotNull(result);
+
+    //        Assert.assertNotNull(result.getItems());
+
+    //        for (Map<String, AttributeValue> item : result.getItems()) {
+
+    ////            Assert.assertEquals(item.get("range"), rangeKey);
+
+    //            Assert.assertEquals(item.get("range"), new AttributeValue().withN("55"));
+
+    //        }
+
+    //    }
+
+    //    // Test that expected return 0 items
+
+    //    public void scanWithScanFilterEQTestThatHasNoReturn() {
+
+    //        attributeValueList.add(new AttributeValue().withN("30"));
+
+    //        Assert.assertEquals(result.getItems().size(),0);
+
+    //
+
+    //    public void scanWithScanFilterGTTestWithReturn() {
+
+    @Test
+    public void test() {
+        String str1 = "100";
+        String str2 = "50";
+        Integer integer = -2;
+        Integer int1 = Integer.parseInt(str1);
+
+//        if (str1.compareTo(str2) > 0) {
+//            integer=1;
 //        }
-//    }
-//
-//    @Test
-//    public void scanWithScanFilterLTTest() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//        attributeValueList.add(new AttributeValue().withN("120"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.LT);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer(new AttributeValue().withN("120").getN()));
+//        else if (str1.compareTo(str2) == 0) {
+//            integer=0;
 //        }
-//    }
-//
-//
+//        else
+//            integer=-1;
+    }
+
+    ////
+
+    //        attributeValueList.add(new AttributeValue().withN("50"));
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) > new Integer(new AttributeValue().withN("50").getN()));
+
+    @Test
+    public void scanWithScanFilterGTTest() {
+        ScanRequest request = getBasicReq();
+        Condition rangeKeyCondition = new Condition();
+        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
 //
-//////    // TODO: Exception!
-//    @Test
-//    public void scanWithScanFilterINTest() {
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//        attributeValueList.add(new AttributeValue().withN("100"));
-//        attributeValueList.add(new AttributeValue().withN("101"));
-//        attributeValueList.add(new AttributeValue().withN("102"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.IN);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) == 102 || new Integer(item.get("range").getN()) == 101 || new Integer(item.get("range").getN()) == 100);
-//        }
-//    }
+        attributeValueList.add(new AttributeValue().withN("50"));
+        rangeKeyCondition.setAttributeValueList(attributeValueList);
+        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
+        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+        conditionMap.put("range", rangeKeyCondition);
+        request.setScanFilter(conditionMap);
+        ScanResult result = client.scan(request);
+        Assert.assertNotNull(result);
+        Assert.assertNotNull(result.getItems());
+        Assert.assertEquals(result.getItems().size(),0);
+        for (Map<String, AttributeValue> item : result.getItems()) {
+//            Assert.assertTrue(new Integer(item.get("range").getN()) > new Integer(rangeKey.getN()));
+            Assert.assertFalse(new Integer(item.get("range").getN()) > new Integer(new AttributeValue().withN("50").getN()));
+        }
+    }
+
+    //    public void scanWithScanFilterGTTestWithNoReturn() {
+
+    //        attributeValueList.add(new AttributeValue().withN("120"));
+
+    @Test
+    public void scanWithScanFilterGETest() { //Greater or Equal
+        ScanRequest request = getBasicReq();
+        Condition rangeKeyCondition = new Condition();
+        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
+        attributeValueList.add(new AttributeValue().withN("120"));
+        rangeKeyCondition.setAttributeValueList(attributeValueList);
+        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
+        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+        conditionMap.put("range", rangeKeyCondition);
+        request.setScanFilter(conditionMap);
+        ScanResult result = client.scan(request);
+        Assert.assertNotNull(result);
+        Assert.assertNotNull(result.getItems());
+        for (Map<String, AttributeValue> item : result.getItems()) {
+            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
+        }
+    }
+
+    //    public void scanWithScanFilterGETest() { //Greater or Equal
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
+
+    ////           Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(rangeKey.getN()));
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer("12"));
+
+    ////    // TODO: Exception!
+
+    //    public void scanWithScanFilterLETest() {
+
+    //        attributeValueList.add(new AttributeValue().withN("12"));
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.LE);
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer("12"));
+
+    ////            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(rangeKey.getN()));
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(new AttributeValue().withN("120").getN()));
+
+    //    public void scanWithScanFilterLTTest() {
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.LT);
+
+    ////            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer(rangeKey.getN()));
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer(new AttributeValue().withN("120").getN()));
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer("12"));
+
+    //////    // TODO: Exception!
+
+    //    public void scanWithScanFilterINTest() {
+
+    //        attributeValueList.add(new AttributeValue().withN("100"));
+
+    //        attributeValueList.add(new AttributeValue().withN("101"));
+
+    //        attributeValueList.add(new AttributeValue().withN("102"));
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.IN);
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) <= 101 && new Integer(item.get("date").getN()) >= 100);
+
+    //            Assert.assertTrue(new Integer(item.get("range").getN()) == 102 || new Integer(item.get("range").getN()) == 101 || new Integer(item.get("range").getN()) == 100);
+
+    //    public void scanWithScanFilterBETWEENTest() {
+
     ////////////////////////OK LINE////////////////////////////
 
     // TODO: Exception!
+
     @Test
     public void scanWithScanFilterBETWEENTest() {
         ScanRequest request = getBasicReq();
@@ -225,34 +237,50 @@ public class AlternatorScanTest extends AlternatorTest {
 //            Assert.assertTrue(new Integer(item.get("range").getN()) <= 120 && new Integer(item.get("range").getN()) >= 131);
 //        }
     }
-//
-//    // TODO: Exception!
-//    @Test
-//    public void scanPaginationTest() {
-//        Key lastKeyEvaluated = null;
-//        int count = 0;
-//        do {
-//            count++;
-//            ScanRequest scanRequest = getBasicReq()
-//                    .withLimit(10)
-//                    .withExclusiveStartKey(lastKeyEvaluated);
-//
-//            ScanResult result = client.scan(scanRequest);
-//            for (Map<String, AttributeValue> item : result.getItems()) {
-//                Assert.assertNotNull(result.getLastEvaluatedKey());
-//            }
-//            lastKeyEvaluated = result.getLastEvaluatedKey();
-//            Assert.assertTrue(count<10);
-//        } while (lastKeyEvaluated != null || count<10);
-//    }
-//
-//    @Test
-//    public void scanWithoutTableNameTest() {
-//        ScanRequest request = getBasicReq();
-//        request.setTableName(null);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNull(result.getItems());
-//    }
+
+    //        rangeKeyCondition.setComparisonOperator(ComparisonOperator.BETWEEN);
+
+    //        conditionMap.put("date", rangeKeyCondition);
+
+    //            Assert.assertTrue(new Integer(item.get("date").getN()) <= 101 && new Integer(item.get("date").getN()) >= 100);
+
+    //    // TODO: Exception!
+
+    //    public void scanPaginationTest() {
+
+    //        Key lastKeyEvaluated = null;
+
+    //        int count = 0;
+
+    //        do {
+
+    //            count++;
+
+    //            ScanRequest scanRequest = getBasicReq()
+
+    //                    .withLimit(10)
+
+    //                    .withExclusiveStartKey(lastKeyEvaluated);
+
+    //            ScanResult result = client.scan(scanRequest);
+
+    //            for (Map<String, AttributeValue> item : result.getItems()) {
+
+    //                Assert.assertNotNull(result.getLastEvaluatedKey());
+
+    //            }
+
+    //            lastKeyEvaluated = result.getLastEvaluatedKey();
+
+    //            Assert.assertTrue(count<10);
+
+    //        } while (lastKeyEvaluated != null || count<10);
+
+    //    public void scanWithoutTableNameTest() {
+
+    //        request.setTableName(null);
+
+    //        Assert.assertNull(result.getItems());
 
     /*
 
@@ -290,7 +318,6 @@ public class AlternatorScanTest extends AlternatorTest {
     }
 */
 
-
     protected ScanRequest getBasicReq() {
         ScanRequest req = new ScanRequest();
         req.setTableName(tableName);
@@ -343,4 +370,5 @@ public class AlternatorScanTest extends AlternatorTest {
     protected String createTableName() {
         return "Table" + UUID.randomUUID().toString().substring(0, 4);
     }
-}
+
+}
\ No newline at end of file
