diff --git a/java_case_studies/reference_repos/alternator/conflict3/base.java b/java_case_studies/reference_repos/alternator/conflict3/right.java
index 0cfc1b1..bd48b23 100644
--- a/java_case_studies/reference_repos/alternator/conflict3/base.java
+++ b/java_case_studies/reference_repos/alternator/conflict3/right.java
@@ -39,7 +39,6 @@ public class AlternatorScanTest extends AlternatorTest {
         client.deleteTable(del);
     }
 
-//    // Test that expected return 10 items
 //    @Test
 //    public void scanWithScanFilterEQTestThatHasReturn() {
 //        ScanRequest request = getBasicReq();
@@ -77,68 +76,66 @@ public class AlternatorScanTest extends AlternatorTest {
 //        Assert.assertNotNull(result.getItems());
 //        Assert.assertEquals(result.getItems().size(),0);
 //    }
-
-
-////////////////////////OK LINE////////////////////////////
-    @Test
-    public void test() {
-        String str1 = "100";
-        String str2 = "50";
-        Integer integer = -2;
-        Integer int1 = Integer.parseInt(str1);
-
-//        if (str1.compareTo(str2) > 0) {
-//            integer=1;
-//        }
-//        else if (str1.compareTo(str2) == 0) {
-//            integer=0;
+//
+//
+//    @Test
+//    public void scanWithScanFilterGTTestWithReturn() {
+//        ScanRequest request = getBasicReq();
+//        Condition rangeKeyCondition = new Condition();
+//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
+////
+//        attributeValueList.add(new AttributeValue().withN("50"));
+//        rangeKeyCondition.setAttributeValueList(attributeValueList);
+//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
+//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+//        conditionMap.put("range", rangeKeyCondition);
+//        request.setScanFilter(conditionMap);
+//        ScanResult result = client.scan(request);
+//        Assert.assertNotNull(result);
+//        Assert.assertNotNull(result.getItems());
+//        for (Map<String, AttributeValue> item : result.getItems()) {
+//            Assert.assertTrue(new Integer(item.get("range").getN()) > new Integer(new AttributeValue().withN("50").getN()));
 //        }
-//        else
-//            integer=-1;
-    }
+//    }
+//
+//    @Test
+//    public void scanWithScanFilterGTTestWithNoReturn() {
+//        ScanRequest request = getBasicReq();
+//        Condition rangeKeyCondition = new Condition();
+//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
+//
+//        attributeValueList.add(new AttributeValue().withN("120"));
+//        rangeKeyCondition.setAttributeValueList(attributeValueList);
+//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
+//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+//        conditionMap.put("range", rangeKeyCondition);
+//        request.setScanFilter(conditionMap);
+//        ScanResult result = client.scan(request);
+//        Assert.assertNotNull(result);
+//        Assert.assertNotNull(result.getItems());
+//        Assert.assertEquals(result.getItems().size(),0);
+//    }
 
+////////////////////////OK LINE////////////////////////////
     @Test
-    public void scanWithScanFilterGTTest() {
+    public void scanWithScanFilterGETest() { //Greater or Equal
         ScanRequest request = getBasicReq();
         Condition rangeKeyCondition = new Condition();
         List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//
-        attributeValueList.add(new AttributeValue().withN("50"));
+        attributeValueList.add(new AttributeValue().withN("120"));
         rangeKeyCondition.setAttributeValueList(attributeValueList);
-        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
+        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
         Map<String, Condition> conditionMap = new HashMap<String, Condition>();
         conditionMap.put("range", rangeKeyCondition);
         request.setScanFilter(conditionMap);
         ScanResult result = client.scan(request);
         Assert.assertNotNull(result);
         Assert.assertNotNull(result.getItems());
-        Assert.assertEquals(result.getItems().size(),0);
         for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) > new Integer(rangeKey.getN()));
-            Assert.assertFalse(new Integer(item.get("range").getN()) > new Integer(new AttributeValue().withN("50").getN()));
+            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
         }
     }
 
-//    @Test
-//    public void scanWithScanFilterGETest() { //Greater or Equal
-//        ScanRequest request = getBasicReq();
-//        Condition rangeKeyCondition = new Condition();
-//        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-////        attributeValueList.add(new AttributeValue().withN(rangeKey.getN()));
-//        attributeValueList.add(new AttributeValue().withN("12"));
-//        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
-//        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
-//        request.setScanFilter(conditionMap);
-//        ScanResult result = client.scan(request);
-//        Assert.assertNotNull(result);
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-////           Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(rangeKey.getN()));
-//            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer("12"));
-//        }
-//    }
-
 
 //    // TODO: Exception!
 //    @Test
