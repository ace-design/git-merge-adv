diff --git a/java_case_studies/reference_repos/alternator/conflict3/desired.java b/java_case_studies/reference_repos/alternator/conflict3/spork_result.java
index 0819ecb..df04277 100644
--- a/java_case_studies/reference_repos/alternator/conflict3/desired.java
+++ b/java_case_studies/reference_repos/alternator/conflict3/spork_result.java
@@ -1,6 +1,7 @@
 package com.michelboudreau.test;
 
 import com.amazonaws.services.dynamodb.model.*;
+import java.util.*;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -9,7 +10,6 @@ import org.junit.runner.RunWith;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import java.util.*;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(locations = {"classpath:/applicationContext.xml"})
@@ -115,6 +115,7 @@ public class AlternatorScanTest extends AlternatorTest {
 //        Assert.assertNotNull(result.getItems());
 //        Assert.assertEquals(result.getItems().size(),0);
 //    }
+<<<<<<< LEFT
 //
 //
 //    @Test
@@ -139,6 +140,31 @@ public class AlternatorScanTest extends AlternatorTest {
 //
 //
 ////    // TODO: Exception!
+=======
+
+////////////////////////OK LINE////////////////////////////
+    @Test
+    public void scanWithScanFilterGETest() { //Greater or Equal
+        ScanRequest request = getBasicReq();
+        Condition rangeKeyCondition = new Condition();
+        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
+        attributeValueList.add(new AttributeValue().withN("120"));
+        rangeKeyCondition.setAttributeValueList(attributeValueList);
+        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
+        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+        conditionMap.put("range", rangeKeyCondition);
+        request.setScanFilter(conditionMap);
+        ScanResult result = client.scan(request);
+        Assert.assertNotNull(result);
+        Assert.assertNotNull(result.getItems());
+        for (Map<String, AttributeValue> item : result.getItems()) {
+            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
+        }
+    }
+
+
+//    // TODO: Exception!
+>>>>>>> RIGHT
 //    @Test
 //    public void scanWithScanFilterLETest() {
 //        ScanRequest request = getBasicReq();
