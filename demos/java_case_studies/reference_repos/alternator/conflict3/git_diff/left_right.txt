diff --git a/java_case_studies/reference_repos/alternator/conflict3/left.java b/java_case_studies/reference_repos/alternator/conflict3/right.java
index 0819ecb..bd48b23 100644
--- a/java_case_studies/reference_repos/alternator/conflict3/left.java
+++ b/java_case_studies/reference_repos/alternator/conflict3/right.java
@@ -115,116 +115,109 @@ public class AlternatorScanTest extends AlternatorTest {
 //        Assert.assertNotNull(result.getItems());
 //        Assert.assertEquals(result.getItems().size(),0);
 //    }
-//
-//
+
+////////////////////////OK LINE////////////////////////////
+    @Test
+    public void scanWithScanFilterGETest() { //Greater or Equal
+        ScanRequest request = getBasicReq();
+        Condition rangeKeyCondition = new Condition();
+        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
+        attributeValueList.add(new AttributeValue().withN("120"));
+        rangeKeyCondition.setAttributeValueList(attributeValueList);
+        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
+        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
+        conditionMap.put("range", rangeKeyCondition);
+        request.setScanFilter(conditionMap);
+        ScanResult result = client.scan(request);
+        Assert.assertNotNull(result);
+        Assert.assertNotNull(result.getItems());
+        for (Map<String, AttributeValue> item : result.getItems()) {
+            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
+        }
+    }
+
+
+//    // TODO: Exception!
 //    @Test
-//    public void scanWithScanFilterGETest() { //Greater or Equal
+//    public void scanWithScanFilterLETest() {
 //        ScanRequest request = getBasicReq();
 //        Condition rangeKeyCondition = new Condition();
 //        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//        attributeValueList.add(new AttributeValue().withN("120"));
+////        attributeValueList.add(new AttributeValue().withN(rangeKey.getN()));
+//        attributeValueList.add(new AttributeValue().withN("12"));
 //        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GE);
+//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
 //        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
 //        conditionMap.put("range", rangeKeyCondition);
 //        request.setScanFilter(conditionMap);
 //        ScanResult result = client.scan(request);
 //        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
-//        Assert.assertEquals(result.getItems().size(),0);
 //        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) >= new Integer(new AttributeValue().withN("120").getN()));
+////            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(rangeKey.getN()));
+//            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer("12"));
 //        }
 //    }
 //
-//
-////    // TODO: Exception!
+//    // TODO: Exception!
 //    @Test
-//    public void scanWithScanFilterLETest() {
+//    public void scanWithScanFilterLTTest() {
 //        ScanRequest request = getBasicReq();
 //        Condition rangeKeyCondition = new Condition();
 //        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
 ////        attributeValueList.add(new AttributeValue().withN(rangeKey.getN()));
-//        attributeValueList.add(new AttributeValue().withN("120"));
+//        attributeValueList.add(new AttributeValue().withN("12"));
 //        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.LE);
+//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.GT);
 //        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
 //        conditionMap.put("range", rangeKeyCondition);
 //        request.setScanFilter(conditionMap);
 //        ScanResult result = client.scan(request);
 //        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
 //        for (Map<String, AttributeValue> item : result.getItems()) {
-////            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(rangeKey.getN()));
-//            Assert.assertTrue(new Integer(item.get("range").getN()) <= new Integer(new AttributeValue().withN("120").getN()));
+////            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer(rangeKey.getN()));
+//            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer("12"));
 //        }
 //    }
 //
+//    // TODO: Exception!
 //    @Test
-//    public void scanWithScanFilterLTTest() {
+//    public void scanWithScanFilterINTest() {
 //        ScanRequest request = getBasicReq();
 //        Condition rangeKeyCondition = new Condition();
 //        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-//        attributeValueList.add(new AttributeValue().withN("120"));
+//        attributeValueList.add(new AttributeValue().withN("100"));
+//        attributeValueList.add(new AttributeValue().withN("101"));
 //        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.LT);
+//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.IN);
 //        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
 //        conditionMap.put("range", rangeKeyCondition);
 //        request.setScanFilter(conditionMap);
 //        ScanResult result = client.scan(request);
 //        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
 //        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) < new Integer(new AttributeValue().withN("120").getN()));
+//            Assert.assertTrue(new Integer(item.get("range").getN()) <= 101 && new Integer(item.get("date").getN()) >= 100);
 //        }
 //    }
 //
-//
-//
-//////    // TODO: Exception!
+//    // TODO: Exception!
 //    @Test
-//    public void scanWithScanFilterINTest() {
+//    public void scanWithScanFilterBETWEENTest() {
 //        ScanRequest request = getBasicReq();
 //        Condition rangeKeyCondition = new Condition();
 //        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
 //        attributeValueList.add(new AttributeValue().withN("100"));
 //        attributeValueList.add(new AttributeValue().withN("101"));
-//        attributeValueList.add(new AttributeValue().withN("102"));
 //        rangeKeyCondition.setAttributeValueList(attributeValueList);
-//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.IN);
+//        rangeKeyCondition.setComparisonOperator(ComparisonOperator.BETWEEN);
 //        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-//        conditionMap.put("range", rangeKeyCondition);
+//        conditionMap.put("date", rangeKeyCondition);
 //        request.setScanFilter(conditionMap);
 //        ScanResult result = client.scan(request);
 //        Assert.assertNotNull(result);
-//        Assert.assertNotNull(result.getItems());
 //        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) == 102 || new Integer(item.get("range").getN()) == 101 || new Integer(item.get("range").getN()) == 100);
+//            Assert.assertTrue(new Integer(item.get("date").getN()) <= 101 && new Integer(item.get("date").getN()) >= 100);
 //        }
 //    }
-    ////////////////////////OK LINE////////////////////////////
-
-    // TODO: Exception!
-    @Test
-    public void scanWithScanFilterBETWEENTest() {
-        ScanRequest request = getBasicReq();
-        Condition rangeKeyCondition = new Condition();
-        List<AttributeValue> attributeValueList = new ArrayList<AttributeValue>();
-        attributeValueList.add(new AttributeValue().withN("120"));
-        attributeValueList.add(new AttributeValue().withN("131"));
-        rangeKeyCondition.setAttributeValueList(attributeValueList);
-        rangeKeyCondition.setComparisonOperator(ComparisonOperator.BETWEEN);
-        Map<String, Condition> conditionMap = new HashMap<String, Condition>();
-        conditionMap.put("range", rangeKeyCondition);
-        request.setScanFilter(conditionMap);
-        ScanResult result = client.scan(request);
-        Assert.assertNotNull(result);
-        Assert.assertNotNull(result.getItems());
-        Assert.assertEquals(result.getItems().size(), 0);
-//        for (Map<String, AttributeValue> item : result.getItems()) {
-//            Assert.assertTrue(new Integer(item.get("range").getN()) <= 120 && new Integer(item.get("range").getN()) >= 131);
-//        }
-    }
 //
 //    // TODO: Exception!
 //    @Test
