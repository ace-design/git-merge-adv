diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC3/left.java b/java_case_studies/reference_repos/cucumber.jvm/importC3/right.java
index de74ff3..eeebb59 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC3/left.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC3/right.java
@@ -1,26 +1,25 @@
 package io.cucumber.core.options;
 
-import io.cucumber.core.backend.ObjectFactory;
-import io.cucumber.core.exception.CucumberException;
-import io.cucumber.core.feature.FeatureWithLines;
-import io.cucumber.core.order.PickleOrder;
-import io.cucumber.core.plugin.Options;
-import io.cucumber.core.snippets.SnippetType;
+import cucumber.api.SnippetType;
+import cucumber.runtime.CucumberException;
+import cucumber.runtime.formatter.PluginFactory;
+import cucumber.runtime.order.PickleOrder;
+import io.cucumber.core.model.FeatureWithLines;
 
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Set;
 import java.util.regex.Pattern;
 
 public final class RuntimeOptionsBuilder {
-    private final List<String> parsedTagFilters = new ArrayList<>();
-    private final List<Pattern> parsedNameFilters = new ArrayList<>();
-    private final List<FeatureWithLines> parsedFeaturePaths = new ArrayList<>();
-    private final List<URI> parsedGlue = new ArrayList<>();
-    private final ParsedPluginData parsedPluginData = new ParsedPluginData();
+    private List<String> parsedTagFilters = new ArrayList<>();
+    private List<Pattern> parsedNameFilters = new ArrayList<>();
+    private List<FeatureWithLines> parsedFeaturePaths = new ArrayList<>();
+    private List<URI> parsedGlue = new ArrayList<>();
+    private ParsedPluginData parsedPluginData = new ParsedPluginData();
     private List<FeatureWithLines> parsedRerunPaths = null;
+    private List<String> parsedJunitOptions = new ArrayList<>();
     private Integer parsedThreads = null;
     private Boolean parsedDryRun = null;
     private Boolean parsedStrict = null;
@@ -29,7 +28,6 @@ public final class RuntimeOptionsBuilder {
     private Boolean parsedWip = null;
     private PickleOrder parsedPickleOrder = null;
     private Integer parsedCount = null;
-    private Class<? extends ObjectFactory> parsedObjectFactoryClass = null;
 
     public RuntimeOptionsBuilder addRerun(Collection<FeatureWithLines> featureWithLines) {
         if (parsedRerunPaths == null) {
@@ -49,6 +47,11 @@ public final class RuntimeOptionsBuilder {
         return this;
     }
 
+    public RuntimeOptionsBuilder addJunitOption(String junitOption) {
+        this.parsedJunitOptions.add(junitOption);
+        return this;
+    }
+
     public RuntimeOptionsBuilder addNameFilter(Pattern pattern) {
         this.parsedNameFilters.add(pattern);
         return this;
@@ -102,7 +105,7 @@ public final class RuntimeOptionsBuilder {
         }
 
         if (!this.parsedTagFilters.isEmpty() || !this.parsedNameFilters.isEmpty() || hasFeaturesWithLineFilters()) {
-            runtimeOptions.setTagExpressions(this.parsedTagFilters);
+            runtimeOptions.setTagFilters(this.parsedTagFilters);
             runtimeOptions.setNameFilters(this.parsedNameFilters);
         }
         if (!this.parsedFeaturePaths.isEmpty() || this.parsedRerunPaths != null) {
@@ -116,21 +119,27 @@ public final class RuntimeOptionsBuilder {
         if (!this.parsedGlue.isEmpty()) {
             runtimeOptions.setGlue(this.parsedGlue);
         }
-
-        this.parsedPluginData.updateFormatters(runtimeOptions.getFormatters());
-        this.parsedPluginData.updateSummaryPrinters(runtimeOptions.getSummaryPrinter());
-
-        if (parsedObjectFactoryClass != null) {
-            runtimeOptions.setObjectFactoryClass(parsedObjectFactoryClass);
+        if (!this.parsedJunitOptions.isEmpty()) {
+            runtimeOptions.setJunitOptions(this.parsedJunitOptions);
         }
 
+        this.parsedPluginData.updatePluginFormatterNames(runtimeOptions.getPluginFormatterNames());
+        this.parsedPluginData.updatePluginStepDefinitionReporterNames(runtimeOptions.getPluginStepDefinitionReporterNames());
+        this.parsedPluginData.updatePluginSummaryPrinterNames(runtimeOptions.getPluginSummaryPrinterNames());
+
         return runtimeOptions;
     }
 
     private boolean hasFeaturesWithLineFilters() {
-        return parsedRerunPaths != null || !parsedFeaturePaths.stream()
-            .map(FeatureWithLines::lines)
-            .allMatch(Set::isEmpty);
+        if (parsedRerunPaths != null) {
+            return true;
+        }
+        for (FeatureWithLines parsedFeaturePath : parsedFeaturePaths) {
+            if (!parsedFeaturePath.lines().isEmpty()) {
+                return true;
+            }
+        }
+        return false;
     }
 
     public RuntimeOptionsBuilder setCount(int count) {
@@ -195,63 +204,66 @@ public final class RuntimeOptionsBuilder {
         return this;
     }
 
-    public void setObjectFactoryClass(Class<? extends ObjectFactory> objectFactoryClass) {
-        this.parsedObjectFactoryClass = objectFactoryClass;
-    }
-
-    static final class ParsedPluginData {
-        private ParsedPlugins formatters = new ParsedPlugins();
-        private ParsedPlugins summaryPrinters = new ParsedPlugins();
+    private static class ParsedPluginData {
+        ParsedOptionNames formatterNames = new ParsedOptionNames();
+        ParsedOptionNames stepDefinitionReporterNames = new ParsedOptionNames();
+        ParsedOptionNames summaryPrinterNames = new ParsedOptionNames();
 
         void addPluginName(String name, boolean isAddPlugin) {
-            PluginOption pluginOption = PluginOption.parse(name);
-            if (pluginOption.isSummaryPrinter()) {
-                summaryPrinters.addName(pluginOption, isAddPlugin);
-            } else if (pluginOption.isFormatter()) {
-                formatters.addName(pluginOption, isAddPlugin);
+            if (PluginFactory.isStepDefinitionReporterName(name)) {
+                stepDefinitionReporterNames.addName(name, isAddPlugin);
+            } else if (PluginFactory.isSummaryPrinterName(name)) {
+                summaryPrinterNames.addName(name, isAddPlugin);
+            } else if (PluginFactory.isFormatterName(name)) {
+                formatterNames.addName(name, isAddPlugin);
             } else {
                 throw new CucumberException("Unrecognized plugin: " + name);
             }
         }
 
-        void addDefaultSummaryPrinterIfNotPresent() {
-            if (summaryPrinters.names.isEmpty()) {
-                addPluginName("summary", false);
-            }
+        void updatePluginFormatterNames(List<String> pluginFormatterNames) {
+            formatterNames.updateNameList(pluginFormatterNames);
         }
 
-        void addDefaultFormatterIfNotPresent() {
-            if (formatters.names.isEmpty()) {
-                addPluginName("progress", false);
-            }
+        void updatePluginStepDefinitionReporterNames(List<String> pluginStepDefinitionReporterNames) {
+            stepDefinitionReporterNames.updateNameList(pluginStepDefinitionReporterNames);
+        }
+
+        void updatePluginSummaryPrinterNames(List<String> pluginSummaryPrinterNames) {
+            summaryPrinterNames.updateNameList(pluginSummaryPrinterNames);
         }
 
-        void updateFormatters(List<Options.Plugin> formatter) {
-            this.formatters.updateNameList(formatter);
+
+        void addDefaultSummaryPrinterIfNotPresent() {
+            if (summaryPrinterNames.names.isEmpty()) {
+                summaryPrinterNames.addName("default_summary", false);
+            }
         }
 
-        void updateSummaryPrinters(List<Options.Plugin> pluginSummaryPrinterNames) {
-            summaryPrinters.updateNameList(pluginSummaryPrinterNames);
+        void addDefaultFormatterIfNotPresent() {
+            if (formatterNames.names.isEmpty()) {
+                formatterNames.addName("progress", false);
+            }
         }
+    }
 
-        private static class ParsedPlugins {
-            private List<Options.Plugin> names = new ArrayList<>();
-            private boolean clobber = false;
+    private static class ParsedOptionNames {
+        private List<String> names = new ArrayList<>();
+        private boolean clobber = false;
 
-            void addName(Options.Plugin name, boolean isAddOption) {
-                names.add(name);
-                if (!isAddOption) {
-                    clobber = true;
-                }
+        void addName(String name, boolean isAddOption) {
+            names.add(name);
+            if (!isAddOption) {
+                clobber = true;
             }
+        }
 
-            void updateNameList(List<Options.Plugin> nameList) {
-                if (!names.isEmpty()) {
-                    if (clobber) {
-                        nameList.clear();
-                    }
-                    nameList.addAll(names);
+        void updateNameList(List<String> nameList) {
+            if (!names.isEmpty()) {
+                if (clobber) {
+                    nameList.clear();
                 }
+                nameList.addAll(names);
             }
         }
     }
