diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC3/desired.java b/java_case_studies/demo_results/MethodUnion/cucumber.jvm-importC3.java
index de74ff3..46a9500 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC3/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/cucumber.jvm-importC3.java
@@ -1,35 +1,40 @@
 package io.cucumber.core.options;
-
 import io.cucumber.core.backend.ObjectFactory;
 import io.cucumber.core.exception.CucumberException;
 import io.cucumber.core.feature.FeatureWithLines;
 import io.cucumber.core.order.PickleOrder;
 import io.cucumber.core.plugin.Options;
 import io.cucumber.core.snippets.SnippetType;
-
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.HashMap;
 import java.util.Set;
+import java.util.Map;
 import java.util.regex.Pattern;
-
-public final class RuntimeOptionsBuilder {
-    private final List<String> parsedTagFilters = new ArrayList<>();
-    private final List<Pattern> parsedNameFilters = new ArrayList<>();
-    private final List<FeatureWithLines> parsedFeaturePaths = new ArrayList<>();
-    private final List<URI> parsedGlue = new ArrayList<>();
-    private final ParsedPluginData parsedPluginData = new ParsedPluginData();
-    private List<FeatureWithLines> parsedRerunPaths = null;
-    private Integer parsedThreads = null;
-    private Boolean parsedDryRun = null;
-    private Boolean parsedStrict = null;
-    private Boolean parsedMonochrome = null;
-    private SnippetType parsedSnippetType = null;
-    private Boolean parsedWip = null;
-    private PickleOrder parsedPickleOrder = null;
-    private Integer parsedCount = null;
-    private Class<? extends ObjectFactory> parsedObjectFactoryClass = null;
+import java.util.TreeSet;
+
+public final class RuntimeOptionsBuilder{
+
+    private final List<String> parsedTagFilters = new ArrayList<>();,
+    private final List<Pattern> parsedNameFilters = new ArrayList<>();,
+    private final List<FeatureWithLines> parsedFeaturePaths = new ArrayList<>();,
+    private Map<URI, Set<Integer>> parsedLineFilters = new HashMap<>();,
+    private final List<URI> parsedGlue = new ArrayList<>();,
+    private final ParsedPluginData parsedPluginData = new ParsedPluginData();,
+    private List<FeatureWithLines> parsedRerunPaths = null;,
+    private Integer parsedThreads = null;,
+    private List<String> parsedJunitOptions = new ArrayList<>();,
+    private Boolean parsedDryRun = null;,
+    private boolean parsedIsRerun = false;,
+    private Boolean parsedStrict = null;,
+    private Boolean parsedMonochrome = null;,
+    private SnippetType parsedSnippetType = null;,
+    private Boolean parsedWip = null;,
+    private PickleOrder parsedPickleOrder = null;,
+    private Integer parsedCount = null;,
+    private Class<? extends ObjectFactory> parsedObjectFactoryClass = null;,
 
     public RuntimeOptionsBuilder addRerun(Collection<FeatureWithLines> featureWithLines) {
         if (parsedRerunPaths == null) {
@@ -49,11 +54,30 @@ public final class RuntimeOptionsBuilder {
         return this;
     }
 
+    private RuntimeOptionsBuilder addLineFilters(FeatureWithLines featureWithLines) {
+        URI key = featureWithLines.uri();
+        Set<Integer> lines = featureWithLines.lines();
+        if (lines.isEmpty()) {
+            return null;
+        }
+        if (this.parsedLineFilters.containsKey(key)) {
+            this.parsedLineFilters.get(key).addAll(lines);
+        } else {
+            this.parsedLineFilters.put(key, new TreeSet<>(lines));
+        }
+        return this;
+    }
+
     public RuntimeOptionsBuilder addNameFilter(Pattern pattern) {
         this.parsedNameFilters.add(pattern);
         return this;
     }
 
+    public RuntimeOptionsBuilder addJunitOption(String junitOption) {
+        this.parsedJunitOptions.add(junitOption);
+        return this;
+    }
+
     public RuntimeOptionsBuilder addPluginName(String name, boolean isAddPlugin) {
         this.parsedPluginData.addPluginName(name, isAddPlugin);
         return this;
@@ -102,7 +126,11 @@ public final class RuntimeOptionsBuilder {
         }
 
         if (!this.parsedTagFilters.isEmpty() || !this.parsedNameFilters.isEmpty() || hasFeaturesWithLineFilters()) {
+<<<<<<< left_content.java
+            runtimeOptions.setTagFilters(this.parsedTagFilters);
+=======
             runtimeOptions.setTagExpressions(this.parsedTagFilters);
+>>>>>>> right_content.java
             runtimeOptions.setNameFilters(this.parsedNameFilters);
         }
         if (!this.parsedFeaturePaths.isEmpty() || this.parsedRerunPaths != null) {
@@ -127,12 +155,26 @@ public final class RuntimeOptionsBuilder {
         return runtimeOptions;
     }
 
+
     private boolean hasFeaturesWithLineFilters() {
+<<<<<<< left_content.java
+        if (parsedRerunPaths != null) {
+            return true;
+        }
+        for (FeatureWithLines parsedFeaturePath : parsedFeaturePaths) {
+            if (!parsedFeaturePath.lines().isEmpty()) {
+                return true;
+            }
+        }
+        return false;
+=======
         return parsedRerunPaths != null || !parsedFeaturePaths.stream()
             .map(FeatureWithLines::lines)
             .allMatch(Set::isEmpty);
+>>>>>>> right_content.java
     }
 
+
     public RuntimeOptionsBuilder setCount(int count) {
         this.parsedCount = count;
         return this;
@@ -156,6 +198,10 @@ public final class RuntimeOptionsBuilder {
         return setMonochrome(true);
     }
 
+    public void setIsRerun(boolean isRerun) {
+        this.parsedIsRerun = isRerun;
+    }
+
     public RuntimeOptionsBuilder setPickleOrder(PickleOrder pickleOrder) {
         this.parsedPickleOrder = pickleOrder;
         return this;
@@ -199,9 +245,10 @@ public final class RuntimeOptionsBuilder {
         this.parsedObjectFactoryClass = objectFactoryClass;
     }
 
-    static final class ParsedPluginData {
-        private ParsedPlugins formatters = new ParsedPlugins();
-        private ParsedPlugins summaryPrinters = new ParsedPlugins();
+    static final class ParsedPluginData{
+
+        private ParsedPlugins formatters = new ParsedPlugins();,
+        private ParsedPlugins summaryPrinters = new ParsedPlugins();,
 
         void addPluginName(String name, boolean isAddPlugin) {
             PluginOption pluginOption = PluginOption.parse(name);
@@ -234,9 +281,10 @@ public final class RuntimeOptionsBuilder {
             summaryPrinters.updateNameList(pluginSummaryPrinterNames);
         }
 
-        private static class ParsedPlugins {
-            private List<Options.Plugin> names = new ArrayList<>();
-            private boolean clobber = false;
+        private static class ParsedPlugins{
+
+            private List<Options.Plugin> names = new ArrayList<>();,
+            private boolean clobber = false;,
 
             void addName(Options.Plugin name, boolean isAddOption) {
                 names.add(name);
@@ -253,6 +301,29 @@ public final class RuntimeOptionsBuilder {
                     nameList.addAll(names);
                 }
             }
+
         }
     }
-}
+    private static class ParsedOptionNames{
+
+        private List<String> names = new ArrayList<>();,
+        private boolean clobber = false;,
+
+        void addName(String name, boolean isAddOption) {
+            names.add(name);
+            if (!isAddOption) {
+                clobber = true;
+            }
+        }
+
+        void updateNameList(List<String> nameList) {
+            if (!names.isEmpty()) {
+                if (clobber) {
+                    nameList.clear();
+                }
+                nameList.addAll(names);
+            }
+        }
+
+    }
+}
\ No newline at end of file
