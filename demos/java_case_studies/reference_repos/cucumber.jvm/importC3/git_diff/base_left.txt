diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC3/base.java b/java_case_studies/reference_repos/cucumber.jvm/importC3/left.java
index a9b7172..de74ff3 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC3/base.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC3/left.java
@@ -1,30 +1,26 @@
 package io.cucumber.core.options;
 
-import cucumber.api.SnippetType;
-import cucumber.runtime.CucumberException;
-import cucumber.runtime.formatter.PluginFactory;
-import cucumber.runtime.order.PickleOrder;
-import io.cucumber.core.model.FeatureWithLines;
+import io.cucumber.core.backend.ObjectFactory;
+import io.cucumber.core.exception.CucumberException;
+import io.cucumber.core.feature.FeatureWithLines;
+import io.cucumber.core.order.PickleOrder;
+import io.cucumber.core.plugin.Options;
+import io.cucumber.core.snippets.SnippetType;
 
 import java.net.URI;
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
+import java.util.Collection;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
-import java.util.TreeSet;
 import java.util.regex.Pattern;
 
 public final class RuntimeOptionsBuilder {
-    private List<String> parsedTagFilters = new ArrayList<>();
-    private List<Pattern> parsedNameFilters = new ArrayList<>();
-    private Map<URI, Set<Integer>> parsedLineFilters = new HashMap<>();
-    private List<URI> parsedFeaturePaths = new ArrayList<>();
-    private List<URI> parsedGlue = new ArrayList<>();
-    private ParsedPluginData parsedPluginData = new ParsedPluginData();
-    private List<String> parsedJunitOptions = new ArrayList<>();
-    private boolean parsedIsRerun = false;
+    private final List<String> parsedTagFilters = new ArrayList<>();
+    private final List<Pattern> parsedNameFilters = new ArrayList<>();
+    private final List<FeatureWithLines> parsedFeaturePaths = new ArrayList<>();
+    private final List<URI> parsedGlue = new ArrayList<>();
+    private final ParsedPluginData parsedPluginData = new ParsedPluginData();
+    private List<FeatureWithLines> parsedRerunPaths = null;
     private Integer parsedThreads = null;
     private Boolean parsedDryRun = null;
     private Boolean parsedStrict = null;
@@ -33,34 +29,23 @@ public final class RuntimeOptionsBuilder {
     private Boolean parsedWip = null;
     private PickleOrder parsedPickleOrder = null;
     private Integer parsedCount = null;
+    private Class<? extends ObjectFactory> parsedObjectFactoryClass = null;
 
-    public RuntimeOptionsBuilder addFeature(FeatureWithLines featureWithLines) {
-        parsedFeaturePaths.add(featureWithLines.uri());
-        addLineFilters(featureWithLines);
-        return this;
-    }
-
-    public RuntimeOptionsBuilder addGlue(URI glue) {
-        parsedGlue.add(glue);
+    public RuntimeOptionsBuilder addRerun(Collection<FeatureWithLines> featureWithLines) {
+        if (parsedRerunPaths == null) {
+            parsedRerunPaths = new ArrayList<>();
+        }
+        parsedRerunPaths.addAll(featureWithLines);
         return this;
     }
 
-    public RuntimeOptionsBuilder addJunitOption(String junitOption) {
-        this.parsedJunitOptions.add(junitOption);
+    public RuntimeOptionsBuilder addFeature(FeatureWithLines featureWithLines) {
+        parsedFeaturePaths.add(featureWithLines);
         return this;
     }
 
-    private RuntimeOptionsBuilder addLineFilters(FeatureWithLines featureWithLines) {
-        URI key = featureWithLines.uri();
-        Set<Integer> lines = featureWithLines.lines();
-        if (lines.isEmpty()) {
-            return null;
-        }
-        if (this.parsedLineFilters.containsKey(key)) {
-            this.parsedLineFilters.get(key).addAll(lines);
-        } else {
-            this.parsedLineFilters.put(key, new TreeSet<>(lines));
-        }
+    public RuntimeOptionsBuilder addGlue(URI glue) {
+        parsedGlue.add(glue);
         return this;
     }
 
@@ -116,33 +101,38 @@ public final class RuntimeOptionsBuilder {
             runtimeOptions.setCount(this.parsedCount);
         }
 
-        if (this.parsedIsRerun || !this.parsedFeaturePaths.isEmpty()) {
-            runtimeOptions.setFeaturePaths(Collections.<URI>emptyList());
-            runtimeOptions.setLineFilters(Collections.<URI, Set<Integer>>emptyMap());
-        }
-        if (!this.parsedTagFilters.isEmpty() || !this.parsedNameFilters.isEmpty() || !this.parsedLineFilters.isEmpty()) {
-            runtimeOptions.setTagFilters(this.parsedTagFilters);
+        if (!this.parsedTagFilters.isEmpty() || !this.parsedNameFilters.isEmpty() || hasFeaturesWithLineFilters()) {
+            runtimeOptions.setTagExpressions(this.parsedTagFilters);
             runtimeOptions.setNameFilters(this.parsedNameFilters);
-            runtimeOptions.setLineFilters(this.parsedLineFilters);
         }
-        if (!this.parsedFeaturePaths.isEmpty()) {
-            runtimeOptions.setFeaturePaths(this.parsedFeaturePaths);
+        if (!this.parsedFeaturePaths.isEmpty() || this.parsedRerunPaths != null) {
+            List<FeatureWithLines> features = new ArrayList<>(this.parsedFeaturePaths);
+            if (parsedRerunPaths != null) {
+                features.addAll(this.parsedRerunPaths);
+            }
+            runtimeOptions.setFeaturePaths(features);
         }
 
         if (!this.parsedGlue.isEmpty()) {
             runtimeOptions.setGlue(this.parsedGlue);
         }
-        if (!this.parsedJunitOptions.isEmpty()) {
-            runtimeOptions.setJunitOptions(this.parsedJunitOptions);
-        }
 
-        this.parsedPluginData.updatePluginFormatterNames(runtimeOptions.getPluginFormatterNames());
-        this.parsedPluginData.updatePluginStepDefinitionReporterNames(runtimeOptions.getPluginStepDefinitionReporterNames());
-        this.parsedPluginData.updatePluginSummaryPrinterNames(runtimeOptions.getPluginSummaryPrinterNames());
+        this.parsedPluginData.updateFormatters(runtimeOptions.getFormatters());
+        this.parsedPluginData.updateSummaryPrinters(runtimeOptions.getSummaryPrinter());
+
+        if (parsedObjectFactoryClass != null) {
+            runtimeOptions.setObjectFactoryClass(parsedObjectFactoryClass);
+        }
 
         return runtimeOptions;
     }
 
+    private boolean hasFeaturesWithLineFilters() {
+        return parsedRerunPaths != null || !parsedFeaturePaths.stream()
+            .map(FeatureWithLines::lines)
+            .allMatch(Set::isEmpty);
+    }
+
     public RuntimeOptionsBuilder setCount(int count) {
         this.parsedCount = count;
         return this;
@@ -157,10 +147,6 @@ public final class RuntimeOptionsBuilder {
         return setDryRun(true);
     }
 
-    public void setIsRerun(boolean isRerun) {
-        this.parsedIsRerun = isRerun;
-    }
-
     public RuntimeOptionsBuilder setMonochrome(boolean monochrome) {
         this.parsedMonochrome = monochrome;
         return this;
@@ -209,66 +195,63 @@ public final class RuntimeOptionsBuilder {
         return this;
     }
 
-    private static class ParsedPluginData {
-        ParsedOptionNames formatterNames = new ParsedOptionNames();
-        ParsedOptionNames stepDefinitionReporterNames = new ParsedOptionNames();
-        ParsedOptionNames summaryPrinterNames = new ParsedOptionNames();
+    public void setObjectFactoryClass(Class<? extends ObjectFactory> objectFactoryClass) {
+        this.parsedObjectFactoryClass = objectFactoryClass;
+    }
+
+    static final class ParsedPluginData {
+        private ParsedPlugins formatters = new ParsedPlugins();
+        private ParsedPlugins summaryPrinters = new ParsedPlugins();
 
         void addPluginName(String name, boolean isAddPlugin) {
-            if (PluginFactory.isStepDefinitionReporterName(name)) {
-                stepDefinitionReporterNames.addName(name, isAddPlugin);
-            } else if (PluginFactory.isSummaryPrinterName(name)) {
-                summaryPrinterNames.addName(name, isAddPlugin);
-            } else if (PluginFactory.isFormatterName(name)) {
-                formatterNames.addName(name, isAddPlugin);
+            PluginOption pluginOption = PluginOption.parse(name);
+            if (pluginOption.isSummaryPrinter()) {
+                summaryPrinters.addName(pluginOption, isAddPlugin);
+            } else if (pluginOption.isFormatter()) {
+                formatters.addName(pluginOption, isAddPlugin);
             } else {
                 throw new CucumberException("Unrecognized plugin: " + name);
             }
         }
 
-        void updatePluginFormatterNames(List<String> pluginFormatterNames) {
-            formatterNames.updateNameList(pluginFormatterNames);
-        }
-
-        void updatePluginStepDefinitionReporterNames(List<String> pluginStepDefinitionReporterNames) {
-            stepDefinitionReporterNames.updateNameList(pluginStepDefinitionReporterNames);
-        }
-
-        void updatePluginSummaryPrinterNames(List<String> pluginSummaryPrinterNames) {
-            summaryPrinterNames.updateNameList(pluginSummaryPrinterNames);
-        }
-
-
         void addDefaultSummaryPrinterIfNotPresent() {
-            if (summaryPrinterNames.names.isEmpty()) {
-                summaryPrinterNames.addName("default_summary", false);
+            if (summaryPrinters.names.isEmpty()) {
+                addPluginName("summary", false);
             }
         }
 
         void addDefaultFormatterIfNotPresent() {
-            if (formatterNames.names.isEmpty()) {
-                formatterNames.addName("progress", false);
+            if (formatters.names.isEmpty()) {
+                addPluginName("progress", false);
             }
         }
-    }
 
-    private static class ParsedOptionNames {
-        private List<String> names = new ArrayList<>();
-        private boolean clobber = false;
+        void updateFormatters(List<Options.Plugin> formatter) {
+            this.formatters.updateNameList(formatter);
+        }
 
-        void addName(String name, boolean isAddOption) {
-            names.add(name);
-            if (!isAddOption) {
-                clobber = true;
-            }
+        void updateSummaryPrinters(List<Options.Plugin> pluginSummaryPrinterNames) {
+            summaryPrinters.updateNameList(pluginSummaryPrinterNames);
         }
 
-        void updateNameList(List<String> nameList) {
-            if (!names.isEmpty()) {
-                if (clobber) {
-                    nameList.clear();
+        private static class ParsedPlugins {
+            private List<Options.Plugin> names = new ArrayList<>();
+            private boolean clobber = false;
+
+            void addName(Options.Plugin name, boolean isAddOption) {
+                names.add(name);
+                if (!isAddOption) {
+                    clobber = true;
+                }
+            }
+
+            void updateNameList(List<Options.Plugin> nameList) {
+                if (!names.isEmpty()) {
+                    if (clobber) {
+                        nameList.clear();
+                    }
+                    nameList.addAll(names);
                 }
-                nameList.addAll(names);
             }
         }
     }
