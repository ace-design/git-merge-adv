diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC4/desired.java b/java_case_studies/reference_repos/cucumber.jvm/importC4/spork_result.java
index 3a67b80..255f866 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC4/desired.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC4/spork_result.java
@@ -29,6 +29,9 @@ import io.cucumber.core.runtime.ThreadLocalObjectFactorySupplier;
 import io.cucumber.core.runtime.ThreadLocalRunnerSupplier;
 import io.cucumber.core.runtime.TimeServiceEventBus;
 import io.cucumber.core.runtime.TypeRegistryConfigurerSupplier;
+import java.time.Clock;
+import java.util.List;
+import java.util.function.Predicate;
 import org.apiguardian.api.API;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -39,13 +42,9 @@ import org.junit.runners.ParentRunner;
 import org.junit.runners.model.InitializationError;
 import org.junit.runners.model.RunnerScheduler;
 import org.junit.runners.model.Statement;
-
-import java.time.Clock;
-import java.util.List;
-import java.util.function.Predicate;
-
 import static java.util.stream.Collectors.toList;
 
+
 /**
  * Cucumber JUnit Runner.
  * <p>
@@ -81,8 +80,11 @@ import static java.util.stream.Collectors.toList;
 @API(status = API.Status.STABLE)
 public final class Cucumber extends ParentRunner<FeatureRunner> {
     private final List<FeatureRunner> children;
+
     private final EventBus bus;
+
     private final List<CucumberFeature> features;
+
     private final Plugins plugins;
 
     private boolean multiThreadingAssumed = false;
@@ -96,25 +98,14 @@ public final class Cucumber extends ParentRunner<FeatureRunner> {
     public Cucumber(Class clazz) throws InitializationError {
         super(clazz);
         Assertions.assertNoCucumberAnnotatedMethods(clazz);
-
         ClassLoader classLoader = clazz.getClassLoader();
         ResourceLoader resourceLoader = new MultiLoader(classLoader);
         ClassFinder classFinder = new ResourceLoaderClassFinder(resourceLoader, classLoader);
-
         // Parse the options early to provide fast feedback about invalid options
-        RuntimeOptions propertiesFileOptions = new CucumberPropertiesParser(resourceLoader)
-            .parse(CucumberProperties.fromPropertiesFile())
-            .build();
-
-        RuntimeOptions annotationOptions = new CucumberOptionsAnnotationParser(resourceLoader)
-            .withOptionsProvider(new JUnitCucumberOptionsProvider())
-            .parse(clazz)
-            .build(propertiesFileOptions);
-
-        RuntimeOptions environmentOptions = new CucumberPropertiesParser(resourceLoader)
-            .parse(CucumberProperties.fromEnvironment())
-            .build(annotationOptions);
-
+        RuntimeOptions propertiesFileOptions = new CucumberPropertiesParser(resourceLoader).parse(CucumberProperties.fromPropertiesFile()).build();
+        RuntimeOptions annotationOptions = new CucumberOptionsAnnotationParser(resourceLoader).withOptionsProvider(new JUnitCucumberOptionsProvider()).parse(clazz).build(propertiesFileOptions);
+        RuntimeOptions environmentOptions = new CucumberPropertiesParser(resourceLoader).parse(CucumberProperties.fromEnvironment()).build(annotationOptions);
+<<<<<<< LEFT
         RuntimeOptions runtimeOptions = new CucumberPropertiesParser(resourceLoader)
             .parse(CucumberProperties.fromSystemProperties())
             .build(environmentOptions);
@@ -123,39 +114,27 @@ public final class Cucumber extends ParentRunner<FeatureRunner> {
         JUnitOptions junitPropertiesFileOptions = new JUnitOptionsParser()
             .parse(CucumberProperties.fromPropertiesFile())
             .build();
+=======
+        runtimeOptions.addUndefinedStepsPrinterIfSummaryNotDefined();
+>>>>>>> RIGHT
 
-        JUnitOptions junitAnnotationOptions = new JUnitOptionsParser()
-            .parse(clazz)
-            .build(junitPropertiesFileOptions);
-
-        JUnitOptions junitEnvironmentOptions = new JUnitOptionsParser()
-            .parse(CucumberProperties.fromEnvironment())
-            .build(junitAnnotationOptions);
-
-        JUnitOptions junitOptions = new JUnitOptionsParser()
-            .parse(CucumberProperties.fromSystemProperties())
-            .setStrict(runtimeOptions.isStrict())
-            .build(junitEnvironmentOptions);
-
+        JUnitOptions junitAnnotationOptions = new JUnitOptionsParser().parse(clazz).build(junitPropertiesFileOptions);
+        JUnitOptions junitEnvironmentOptions = new JUnitOptionsParser().parse(CucumberProperties.fromEnvironment()).build(junitAnnotationOptions);
+        JUnitOptions junitOptions = new JUnitOptionsParser().parse(CucumberProperties.fromSystemProperties()).setStrict(runtimeOptions.isStrict()).build(junitEnvironmentOptions);
         // Parse the features early. Don't proceed when there are lexer errors
         FeatureLoader featureLoader = new FeatureLoader(resourceLoader);
         FeaturePathFeatureSupplier featureSupplier = new FeaturePathFeatureSupplier(featureLoader, runtimeOptions);
         this.features = featureSupplier.get();
-
         // Create plugins after feature parsing to avoid the creation of empty files on lexer errors.
         this.plugins = new Plugins(new PluginFactory(), runtimeOptions);
         this.bus = new TimeServiceEventBus(Clock.systemUTC());
-
         ObjectFactoryServiceLoader objectFactoryServiceLoader = new ObjectFactoryServiceLoader(runtimeOptions);
         ObjectFactorySupplier objectFactorySupplier = new ThreadLocalObjectFactorySupplier(objectFactoryServiceLoader);
         BackendSupplier backendSupplier = new BackendServiceLoader(resourceLoader, objectFactorySupplier);
         TypeRegistryConfigurerSupplier typeRegistryConfigurerSupplier = new ScanningTypeRegistryConfigurerSupplier(classFinder, runtimeOptions);
         ThreadLocalRunnerSupplier runnerSupplier = new ThreadLocalRunnerSupplier(runtimeOptions, bus, backendSupplier, objectFactorySupplier, typeRegistryConfigurerSupplier);
         Predicate<CucumberPickle> filters = new Filters(runtimeOptions);
-        this.children = features.stream()
-                .map(feature -> FeatureRunner.create(feature, filters, runnerSupplier, junitOptions))
-                .filter(runner -> !runner.isEmpty())
-                .collect(toList());
+        this.children = features.stream().map(( feature) -> FeatureRunner.create(feature, filters, runnerSupplier, junitOptions)).filter(( runner) -> !runner.isEmpty()).collect(toList());
     }
 
     @Override
@@ -193,7 +172,6 @@ public final class Cucumber extends ParentRunner<FeatureRunner> {
             } else {
                 plugins.setEventBusOnEventListenerPlugins(bus);
             }
-
             bus.send(new TestRunStarted(bus.getInstant()));
             for (CucumberFeature feature : features) {
                 bus.send(new TestSourceRead(bus.getInstant(), feature.getUri().toString(), feature.getSource()));
