diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC4/desired.java b/java_case_studies/demo_results/MethodUnion/cucumber.jvm-importC4.java
index 3a67b80..dc9a27e 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC4/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/cucumber.jvm-importC4.java
@@ -1,5 +1,4 @@
 package io.cucumber.junit;
-
 import io.cucumber.core.backend.ObjectFactoryServiceLoader;
 import io.cucumber.core.event.TestRunFinished;
 import io.cucumber.core.event.TestRunStarted;
@@ -13,7 +12,6 @@ import io.cucumber.core.io.ClassFinder;
 import io.cucumber.core.io.MultiLoader;
 import io.cucumber.core.io.ResourceLoader;
 import io.cucumber.core.io.ResourceLoaderClassFinder;
-import io.cucumber.core.options.Constants;
 import io.cucumber.core.options.CucumberOptionsAnnotationParser;
 import io.cucumber.core.options.CucumberProperties;
 import io.cucumber.core.options.CucumberPropertiesParser;
@@ -39,53 +37,19 @@ import org.junit.runners.ParentRunner;
 import org.junit.runners.model.InitializationError;
 import org.junit.runners.model.RunnerScheduler;
 import org.junit.runners.model.Statement;
-
 import java.time.Clock;
 import java.util.List;
 import java.util.function.Predicate;
-
 import static java.util.stream.Collectors.toList;
 
-/**
- * Cucumber JUnit Runner.
- * <p>
- * A class annotated with {@code @RunWith(Cucumber.class)} will run feature files as junit tests.
- * In general, the runner class should be empty without any fields or methods.
- * For example:
- * <blockquote><pre>
- * &#64;RunWith(Cucumber.class)
- * &#64;CucumberOptions(plugin = "pretty")
- * public class RunCucumberTest {
- * }
- * </pre></blockquote>
- * <p>
- * By default Cucumber will look for {@code .feature} and glue files on the classpath, using the same resource
- * path as the annotated class. For example, if the annotated class is {@code com.example.RunCucumber} then
- * features and glue are assumed to be located in {@code com.example}.
- * <p>
- * Options can be provided in by (order of precedence):
- * <ol>
- * <li>Setting {@value Constants#CUCUMBER_OPTIONS_PROPERTY_NAME} property in {@link System#getProperties()} ()}</li>
- * <li>Setting {@value Constants#CUCUMBER_OPTIONS_PROPERTY_NAME} property in {@link System#getenv()}</li>
- * <li>Annotating the runner class with {@link CucumberOptions}</li>
- * <li>Setting {@value Constants#CUCUMBER_OPTIONS_PROPERTY_NAME} property in {@code cucumber.properties}</li>
- * </ol>
- * <p>
- * Cucumber also supports JUnits {@link ClassRule}, {@link BeforeClass} and {@link AfterClass} annotations.
- * These will be executed before and after all scenarios. Using these is not recommended as it limits the portability
- * between different runners; they may not execute correctly when using the commandline, IntelliJ IDEA or
- * Cucumber-Eclipse. Instead it is recommended to use Cucumbers `Before` and `After` hooks.
- *
- * @see CucumberOptions
- */
 @API(status = API.Status.STABLE)
-public final class Cucumber extends ParentRunner<FeatureRunner> {
-    private final List<FeatureRunner> children;
-    private final EventBus bus;
-    private final List<CucumberFeature> features;
-    private final Plugins plugins;
+public final class Cucumber extends ParentRunner<FeatureRunner>{
 
-    private boolean multiThreadingAssumed = false;
+    private final List<FeatureRunner> children;,
+    private final EventBus bus;,
+    private final List<CucumberFeature> features;,
+    private final Plugins plugins;,
+    private boolean multiThreadingAssumed = false;,
 
     /**
      * Constructor called by JUnit.
@@ -93,6 +57,7 @@ public final class Cucumber extends ParentRunner<FeatureRunner> {
      * @param clazz the class with the @RunWith annotation.
      * @throws org.junit.runners.model.InitializationError if there is another problem
      */
+
     public Cucumber(Class clazz) throws InitializationError {
         super(clazz);
         Assertions.assertNoCucumberAnnotatedMethods(clazz);
@@ -179,8 +144,9 @@ public final class Cucumber extends ParentRunner<FeatureRunner> {
         return new RunCucumber(runFeatures);
     }
 
-    class RunCucumber extends Statement {
-        private final Statement runFeatures;
+    class RunCucumber extends Statement{
+
+        private final Statement runFeatures;,
 
         RunCucumber(Statement runFeatures) {
             this.runFeatures = runFeatures;
@@ -201,11 +167,12 @@ public final class Cucumber extends ParentRunner<FeatureRunner> {
             runFeatures.evaluate();
             bus.send(new TestRunFinished(bus.getInstant()));
         }
-    }
 
+    }
     @Override
     public void setScheduler(RunnerScheduler scheduler) {
         super.setScheduler(scheduler);
         multiThreadingAssumed = true;
     }
-}
+
+}
\ No newline at end of file
