diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC4/base.java b/java_case_studies/reference_repos/cucumber.jvm/importC4/left.java
index 534a2a9..3a67b80 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC4/base.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC4/left.java
@@ -1,28 +1,34 @@
 package io.cucumber.junit;
 
-import cucumber.api.StepDefinitionReporter;
-import cucumber.api.event.TestRunFinished;
-import cucumber.api.event.TestRunStarted;
-import cucumber.runner.EventBus;
-import cucumber.runner.ThreadLocalRunnerSupplier;
-import cucumber.runner.TimeService;
-import cucumber.runner.TimeServiceEventBus;
-import cucumber.runtime.BackendModuleBackendSupplier;
-import cucumber.runtime.BackendSupplier;
-import cucumber.runtime.ClassFinder;
-import cucumber.runtime.Env;
-import io.cucumber.core.options.EnvironmentOptionsParser;
-import cucumber.runtime.FeaturePathFeatureSupplier;
-import io.cucumber.core.options.RuntimeOptions;
+import io.cucumber.core.backend.ObjectFactoryServiceLoader;
+import io.cucumber.core.event.TestRunFinished;
+import io.cucumber.core.event.TestRunStarted;
+import io.cucumber.core.event.TestSourceRead;
+import io.cucumber.core.eventbus.EventBus;
+import io.cucumber.core.feature.CucumberFeature;
+import io.cucumber.core.feature.CucumberPickle;
+import io.cucumber.core.feature.FeatureLoader;
+import io.cucumber.core.filter.Filters;
+import io.cucumber.core.io.ClassFinder;
+import io.cucumber.core.io.MultiLoader;
+import io.cucumber.core.io.ResourceLoader;
+import io.cucumber.core.io.ResourceLoaderClassFinder;
+import io.cucumber.core.options.Constants;
 import io.cucumber.core.options.CucumberOptionsAnnotationParser;
-import cucumber.runtime.filter.Filters;
-import cucumber.runtime.formatter.PluginFactory;
-import cucumber.runtime.formatter.Plugins;
-import cucumber.runtime.io.MultiLoader;
-import cucumber.runtime.io.ResourceLoader;
-import cucumber.runtime.io.ResourceLoaderClassFinder;
-import cucumber.runtime.model.CucumberFeature;
-import cucumber.runtime.model.FeatureLoader;
+import io.cucumber.core.options.CucumberProperties;
+import io.cucumber.core.options.CucumberPropertiesParser;
+import io.cucumber.core.options.RuntimeOptions;
+import io.cucumber.core.plugin.PluginFactory;
+import io.cucumber.core.plugin.Plugins;
+import io.cucumber.core.runtime.BackendServiceLoader;
+import io.cucumber.core.runtime.BackendSupplier;
+import io.cucumber.core.runtime.FeaturePathFeatureSupplier;
+import io.cucumber.core.runtime.ObjectFactorySupplier;
+import io.cucumber.core.runtime.ScanningTypeRegistryConfigurerSupplier;
+import io.cucumber.core.runtime.ThreadLocalObjectFactorySupplier;
+import io.cucumber.core.runtime.ThreadLocalRunnerSupplier;
+import io.cucumber.core.runtime.TimeServiceEventBus;
+import io.cucumber.core.runtime.TypeRegistryConfigurerSupplier;
 import org.apiguardian.api.API;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -34,12 +40,16 @@ import org.junit.runners.model.InitializationError;
 import org.junit.runners.model.RunnerScheduler;
 import org.junit.runners.model.Statement;
 
-import java.util.ArrayList;
+import java.time.Clock;
 import java.util.List;
+import java.util.function.Predicate;
+
+import static java.util.stream.Collectors.toList;
 
 /**
+ * Cucumber JUnit Runner.
  * <p>
- * Classes annotated with {@code @RunWith(Cucumber.class)} will run a Cucumber Feature.
+ * A class annotated with {@code @RunWith(Cucumber.class)} will run feature files as junit tests.
  * In general, the runner class should be empty without any fields or methods.
  * For example:
  * <blockquote><pre>
@@ -53,7 +63,13 @@ import java.util.List;
  * path as the annotated class. For example, if the annotated class is {@code com.example.RunCucumber} then
  * features and glue are assumed to be located in {@code com.example}.
  * <p>
- * Additional hints can be provided to Cucumber by annotating the class with {@link CucumberOptions}.
+ * Options can be provided in by (order of precedence):
+ * <ol>
+ * <li>Setting {@value Constants#CUCUMBER_OPTIONS_PROPERTY_NAME} property in {@link System#getProperties()} ()}</li>
+ * <li>Setting {@value Constants#CUCUMBER_OPTIONS_PROPERTY_NAME} property in {@link System#getenv()}</li>
+ * <li>Annotating the runner class with {@link CucumberOptions}</li>
+ * <li>Setting {@value Constants#CUCUMBER_OPTIONS_PROPERTY_NAME} property in {@code cucumber.properties}</li>
+ * </ol>
  * <p>
  * Cucumber also supports JUnits {@link ClassRule}, {@link BeforeClass} and {@link AfterClass} annotations.
  * These will be executed before and after all scenarios. Using these is not recommended as it limits the portability
@@ -63,10 +79,9 @@ import java.util.List;
  * @see CucumberOptions
  */
 @API(status = API.Status.STABLE)
-public class Cucumber extends ParentRunner<FeatureRunner> {
-    private final List<FeatureRunner> children = new ArrayList<>();
+public final class Cucumber extends ParentRunner<FeatureRunner> {
+    private final List<FeatureRunner> children;
     private final EventBus bus;
-    private final ThreadLocalRunnerSupplier runnerSupplier;
     private final List<CucumberFeature> features;
     private final Plugins plugins;
 
@@ -84,28 +99,43 @@ public class Cucumber extends ParentRunner<FeatureRunner> {
 
         ClassLoader classLoader = clazz.getClassLoader();
         ResourceLoader resourceLoader = new MultiLoader(classLoader);
+        ClassFinder classFinder = new ResourceLoaderClassFinder(resourceLoader, classLoader);
 
         // Parse the options early to provide fast feedback about invalid options
+        RuntimeOptions propertiesFileOptions = new CucumberPropertiesParser(resourceLoader)
+            .parse(CucumberProperties.fromPropertiesFile())
+            .build();
+
         RuntimeOptions annotationOptions = new CucumberOptionsAnnotationParser(resourceLoader)
             .withOptionsProvider(new JUnitCucumberOptionsProvider())
             .parse(clazz)
-            .build();
+            .build(propertiesFileOptions);
 
-        RuntimeOptions runtimeOptions = new EnvironmentOptionsParser(resourceLoader)
-            .parse(Env.INSTANCE)
+        RuntimeOptions environmentOptions = new CucumberPropertiesParser(resourceLoader)
+            .parse(CucumberProperties.fromEnvironment())
             .build(annotationOptions);
 
+        RuntimeOptions runtimeOptions = new CucumberPropertiesParser(resourceLoader)
+            .parse(CucumberProperties.fromSystemProperties())
+            .build(environmentOptions);
+
+        // Next parse the junit options
+        JUnitOptions junitPropertiesFileOptions = new JUnitOptionsParser()
+            .parse(CucumberProperties.fromPropertiesFile())
+            .build();
+
         JUnitOptions junitAnnotationOptions = new JUnitOptionsParser()
             .parse(clazz)
-            .build();
+            .build(junitPropertiesFileOptions);
 
-        JUnitOptions junitOptions = new JUnitOptionsParser()
-            .parse(runtimeOptions.getJunitOptions())
-            .setStrict(runtimeOptions.isStrict())
+        JUnitOptions junitEnvironmentOptions = new JUnitOptionsParser()
+            .parse(CucumberProperties.fromEnvironment())
             .build(junitAnnotationOptions);
 
-
-        ClassFinder classFinder = new ResourceLoaderClassFinder(resourceLoader, classLoader);
+        JUnitOptions junitOptions = new JUnitOptionsParser()
+            .parse(CucumberProperties.fromSystemProperties())
+            .setStrict(runtimeOptions.isStrict())
+            .build(junitEnvironmentOptions);
 
         // Parse the features early. Don't proceed when there are lexer errors
         FeatureLoader featureLoader = new FeatureLoader(resourceLoader);
@@ -113,22 +143,23 @@ public class Cucumber extends ParentRunner<FeatureRunner> {
         this.features = featureSupplier.get();
 
         // Create plugins after feature parsing to avoid the creation of empty files on lexer errors.
-        this.plugins = new Plugins(classLoader, new PluginFactory(), runtimeOptions);
-        this.bus = new TimeServiceEventBus(TimeService.SYSTEM);
-
-        BackendSupplier backendSupplier = new BackendModuleBackendSupplier(resourceLoader, classFinder, runtimeOptions);
-        this.runnerSupplier = new ThreadLocalRunnerSupplier(runtimeOptions, bus, backendSupplier);
-        Filters filters = new Filters(runtimeOptions);
-        for (CucumberFeature cucumberFeature : features) {
-            FeatureRunner featureRunner = new FeatureRunner(cucumberFeature, filters, runnerSupplier, junitOptions);
-            if (!featureRunner.isEmpty()) {
-                children.add(featureRunner);
-            }
-        }
+        this.plugins = new Plugins(new PluginFactory(), runtimeOptions);
+        this.bus = new TimeServiceEventBus(Clock.systemUTC());
+
+        ObjectFactoryServiceLoader objectFactoryServiceLoader = new ObjectFactoryServiceLoader(runtimeOptions);
+        ObjectFactorySupplier objectFactorySupplier = new ThreadLocalObjectFactorySupplier(objectFactoryServiceLoader);
+        BackendSupplier backendSupplier = new BackendServiceLoader(resourceLoader, objectFactorySupplier);
+        TypeRegistryConfigurerSupplier typeRegistryConfigurerSupplier = new ScanningTypeRegistryConfigurerSupplier(classFinder, runtimeOptions);
+        ThreadLocalRunnerSupplier runnerSupplier = new ThreadLocalRunnerSupplier(runtimeOptions, bus, backendSupplier, objectFactorySupplier, typeRegistryConfigurerSupplier);
+        Predicate<CucumberPickle> filters = new Filters(runtimeOptions);
+        this.children = features.stream()
+                .map(feature -> FeatureRunner.create(feature, filters, runnerSupplier, junitOptions))
+                .filter(runner -> !runner.isEmpty())
+                .collect(toList());
     }
 
     @Override
-    public List<FeatureRunner> getChildren() {
+    protected List<FeatureRunner> getChildren() {
         return children;
     }
 
@@ -163,14 +194,12 @@ public class Cucumber extends ParentRunner<FeatureRunner> {
                 plugins.setEventBusOnEventListenerPlugins(bus);
             }
 
-            bus.send(new TestRunStarted(bus.getTime(), bus.getTimeMillis()));
+            bus.send(new TestRunStarted(bus.getInstant()));
             for (CucumberFeature feature : features) {
-                feature.sendTestSourceRead(bus);
+                bus.send(new TestSourceRead(bus.getInstant(), feature.getUri().toString(), feature.getSource()));
             }
-            StepDefinitionReporter stepDefinitionReporter = plugins.stepDefinitionReporter();
-            runnerSupplier.get().reportStepDefinitions(stepDefinitionReporter);
             runFeatures.evaluate();
-            bus.send(new TestRunFinished(bus.getTime(), bus.getTimeMillis()));
+            bus.send(new TestRunFinished(bus.getInstant()));
         }
     }
 
