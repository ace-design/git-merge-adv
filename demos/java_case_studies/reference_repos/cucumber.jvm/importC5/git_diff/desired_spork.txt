diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC5/desired.java b/java_case_studies/reference_repos/cucumber.jvm/importC5/spork_result.java
index efce10c..e746e86 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC5/desired.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC5/spork_result.java
@@ -1,5 +1,15 @@
 package io.cucumber.testng;
 
+import cucumber.runner.EventBus;
+import cucumber.runner.Runner;
+import cucumber.runner.ThreadLocalRunnerSupplier;
+import cucumber.runner.TimeService;
+import cucumber.runner.TimeServiceEventBus;
+import cucumber.runtime.BackendModuleBackendSupplier;
+import cucumber.runtime.ClassFinder;
+import cucumber.runtime.CucumberException;
+import cucumber.runtime.Env;
+import cucumber.runtime.FeaturePathFeatureSupplier;
 import io.cucumber.core.backend.ObjectFactoryServiceLoader;
 import io.cucumber.core.event.TestRunFinished;
 import io.cucumber.core.event.TestRunStarted;
@@ -30,16 +40,15 @@ import io.cucumber.core.runtime.ThreadLocalObjectFactorySupplier;
 import io.cucumber.core.runtime.ThreadLocalRunnerSupplier;
 import io.cucumber.core.runtime.TimeServiceEventBus;
 import io.cucumber.core.runtime.TypeRegistryConfigurerSupplier;
-import org.apiguardian.api.API;
-import org.testng.SkipException;
-
 import java.time.Clock;
 import java.util.List;
 import java.util.function.Predicate;
-
+import org.apiguardian.api.API;
+import org.testng.SkipException;
 import static java.lang.String.format;
 import static java.util.stream.Collectors.toList;
 
+
 /**
  * Glue code for running Cucumber via TestNG.
  * <p>
@@ -53,12 +62,16 @@ import static java.util.stream.Collectors.toList;
  */
 @API(status = API.Status.STABLE)
 public final class TestNGCucumberRunner {
-
     private final EventBus bus;
+
     private final Predicate<CucumberPickle> filters;
+
     private final ThreadLocalRunnerSupplier runnerSupplier;
+
     private final RuntimeOptions runtimeOptions;
+
     private final Plugins plugins;
+
     private final FeaturePathFeatureSupplier featureSupplier;
 
     /**
@@ -87,10 +100,19 @@ public final class TestNGCucumberRunner {
             .parse(CucumberProperties.fromEnvironment())
             .build(annotationOptions);
 
+<<<<<<< LEFT
         runtimeOptions = new CucumberPropertiesParser(resourceLoader)
             .parse(CucumberProperties.fromSystemProperties())
             .build(environmentOptions);
 
+=======
+        runtimeOptions.addUndefinedStepsPrinterIfSummaryNotDefined();
+
+        ClassFinder classFinder = new ResourceLoaderClassFinder(resourceLoader, classLoader);
+        BackendModuleBackendSupplier backendSupplier = new BackendModuleBackendSupplier(resourceLoader, classFinder, runtimeOptions);
+        bus = new TimeServiceEventBus(TimeService.SYSTEM);
+        plugins = new Plugins(classLoader, new PluginFactory(), runtimeOptions);
+>>>>>>> RIGHT
         FeatureLoader featureLoader = new FeatureLoader(resourceLoader);
         featureSupplier = new FeaturePathFeatureSupplier(featureLoader, runtimeOptions);
 
@@ -111,24 +133,18 @@ public final class TestNGCucumberRunner {
         CucumberPickle cucumberPickle = pickle.getCucumberPickle();
         runner.runPickle(cucumberPickle);
         testCaseResultListener.finishExecutionUnit();
-
         if (testCaseResultListener.isPassed()) {
             return;
         }
-
         // Log the reason we skipped the test. TestNG doesn't provide it by
         // default
         Throwable error = testCaseResultListener.getError();
         if (error instanceof SkipException) {
-            SkipException skipException = (SkipException) error;
+            SkipException skipException = ((SkipException) (error));
             if (skipException.isSkip()) {
-                System.out.println(format("Skipped scenario: '%s'. %s",
-                    cucumberPickle.getName(),
-                    skipException.getMessage()
-                ));
+                System.out.println(format("Skipped scenario: '%s'. %s", cucumberPickle.getName(), skipException.getMessage()));
             }
         }
-
         // null pointer is covered by isPassed
         // noinspection ConstantConditions
         throw error;
@@ -139,27 +155,19 @@ public final class TestNGCucumberRunner {
     }
 
     /**
-     * @return returns the cucumber scenarios as a two dimensional array of {@link PickleWrapper}
-     * scenarios combined with their {@link FeatureWrapper} feature.
+     * @return returns the cucumber scenarios as a two dimensional array of {@link PickleEventWrapper}
+     * scenarios combined with their {@link CucumberFeatureWrapper} feature.
      */
     public Object[][] provideScenarios() {
         try {
-            return getFeatures().stream()
-                .flatMap(feature -> feature.getPickles().stream()
-                    .filter(filters)
-                    .map(cucumberPickle -> new Object[]{
-                        new PickleWrapperImpl(new Pickle(cucumberPickle)),
-                        new FeatureWrapperImpl(feature)}))
-                .collect(toList())
-                .toArray(new Object[0][0]);
+            return getFeatures().stream().flatMap(( feature) -> feature.getPickles().stream().filter(filters).map(( cucumberPickle) -> new Object[]{ new PickleWrapperImpl(new Pickle(cucumberPickle)), new FeatureWrapperImpl(feature) })).collect(toList()).toArray(new Object[0][0]);
         } catch (CucumberException e) {
-            return new Object[][]{new Object[]{new CucumberExceptionWrapper(e), null}};
+            return new Object[][]{ new Object[]{ new CucumberExceptionWrapper(e), null } };
         }
     }
 
     private List<CucumberFeature> getFeatures() {
         plugins.setSerialEventBusOnEventListenerPlugins(bus);
-
         List<CucumberFeature> features = featureSupplier.get();
         bus.send(new TestRunStarted(bus.getInstant()));
         for (CucumberFeature feature : features) {
