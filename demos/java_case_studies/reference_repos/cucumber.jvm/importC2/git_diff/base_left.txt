diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC2/base.java b/java_case_studies/reference_repos/cucumber.jvm/importC2/left.java
index efe240a..06b1161 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC2/base.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC2/left.java
@@ -1,8 +1,10 @@
 package io.cucumber.core.options;
 
-import cucumber.api.SnippetType;
-import cucumber.runtime.order.PickleOrder;
-import cucumber.runtime.order.StandardPickleOrders;
+import io.cucumber.core.backend.ObjectFactory;
+import io.cucumber.core.feature.FeatureWithLines;
+import io.cucumber.core.order.PickleOrder;
+import io.cucumber.core.order.StandardPickleOrders;
+import io.cucumber.core.snippets.SnippetType;
 
 import java.net.URI;
 import java.util.ArrayList;
@@ -13,19 +15,23 @@ import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
 
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
 
-public final class RuntimeOptions implements FeatureOptions, FilterOptions, PluginOptions, RunnerOptions {
+public final class RuntimeOptions implements
+    io.cucumber.core.feature.Options,
+    io.cucumber.core.runner.Options,
+    io.cucumber.core.plugin.Options,
+    io.cucumber.core.filter.Options,
+    io.cucumber.core.backend.Options {
 
     private final List<URI> glue = new ArrayList<>();
-    private final List<String> tagFilters = new ArrayList<>();
+    private final List<String> tagExpressions = new ArrayList<>();
     private final List<Pattern> nameFilters = new ArrayList<>();
-    private final Map<URI, Set<Integer>> lineFilters = new HashMap<>();
-    private final SortedSet<URI> featurePaths = new TreeSet<>();
+    private final List<FeatureWithLines> featurePaths = new ArrayList<>();
 
-    private final List<String> junitOptions = new ArrayList<>();
     private boolean dryRun;
     private boolean strict = false;
     private boolean monochrome = false;
@@ -35,9 +41,9 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
     private PickleOrder pickleOrder = StandardPickleOrders.lexicalUriOrder();
     private int count = 0;
 
-    private final List<String> pluginFormatterNames = new ArrayList<>();
-    private final List<String> pluginStepDefinitionReporterNames = new ArrayList<>();
-    private final List<String> pluginSummaryPrinterNames = new ArrayList<>();
+    private final List<Plugin> formatters = new ArrayList<>();
+    private final List<Plugin> summaryPrinters = new ArrayList<>();
+    private Class<? extends ObjectFactory> objectFactoryClass;
 
     private RuntimeOptions() {
 
@@ -47,26 +53,16 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
         return new RuntimeOptions();
     }
 
-    public void addUndefinedStepsPrinterIfSummaryNotDefined() {
-        if (pluginSummaryPrinterNames.isEmpty()) {
-            pluginSummaryPrinterNames.add("undefined");
-        }
-    }
-
     public int getCount() {
         return count;
     }
 
-    List<String> getPluginFormatterNames() {
-        return pluginFormatterNames;
-    }
-
-    List<String> getPluginStepDefinitionReporterNames() {
-        return pluginStepDefinitionReporterNames;
+    List<Plugin> getFormatters() {
+        return formatters;
     }
 
-    List<String> getPluginSummaryPrinterNames() {
-        return pluginSummaryPrinterNames;
+    List<Plugin> getSummaryPrinter() {
+        return summaryPrinters;
     }
 
     public boolean isMultiThreaded() {
@@ -74,12 +70,11 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
     }
 
     @Override
-    public List<String> getPluginNames() {
-        List<String> pluginNames = new ArrayList<>();
-        pluginNames.addAll(getPluginFormatterNames());
-        pluginNames.addAll(getPluginStepDefinitionReporterNames());
-        pluginNames.addAll(getPluginSummaryPrinterNames());
-        return pluginNames;
+    public List<Plugin> plugins() {
+        List<Plugin> plugins = new ArrayList<>();
+        plugins.addAll(formatters);
+        plugins.addAll(summaryPrinters);
+        return plugins;
     }
 
     @Override
@@ -103,24 +98,28 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
 
     @Override
     public List<URI> getFeaturePaths() {
-        return unmodifiableList(new ArrayList<>(featurePaths));
+        return unmodifiableList(featurePaths.stream()
+            .map(FeatureWithLines::uri)
+            .sorted()
+            .distinct()
+            .collect(Collectors.toList()));
     }
 
     @Override
-    public List<Pattern> getNameFilters() {
-        return unmodifiableList(nameFilters);
+    public List<String> getTagExpressions() {
+        return unmodifiableList(tagExpressions);
     }
 
     @Override
-    public List<String> getTagFilters() {
-        return unmodifiableList(tagFilters);
+    public List<Pattern> getNameFilters() {
+        return unmodifiableList(nameFilters);
     }
 
     void setCount(int count) {
         this.count = count;
     }
 
-    void setFeaturePaths(List<URI> featurePaths) {
+    void setFeaturePaths(List<FeatureWithLines> featurePaths) {
         this.featurePaths.clear();
         this.featurePaths.addAll(featurePaths);
     }
@@ -130,18 +129,6 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
         glue.addAll(parsedGlue);
     }
 
-    void setJunitOptions(List<String> junitOptions) {
-        this.junitOptions.clear();
-        this.junitOptions.addAll(junitOptions);
-    }
-
-    void setLineFilters(Map<URI, Set<Integer>> lineFilters) {
-        this.lineFilters.clear();
-        for (URI path : lineFilters.keySet()) {
-            this.lineFilters.put(path, lineFilters.get(path));
-        }
-    }
-
     void setNameFilters(List<Pattern> nameFilters) {
         this.nameFilters.clear();
         this.nameFilters.addAll(nameFilters);
@@ -151,14 +138,24 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
         this.pickleOrder = pickleOrder;
     }
 
-    void setTagFilters(List<String> tagFilters) {
-        this.tagFilters.clear();
-        this.tagFilters.addAll(tagFilters);
+    void setTagExpressions(List<String> tagExpressions) {
+        this.tagExpressions.clear();
+        this.tagExpressions.addAll(tagExpressions);
     }
 
     @Override
     public Map<URI, Set<Integer>> getLineFilters() {
-        return unmodifiableMap(new HashMap<>(lineFilters));
+        Map<URI, Set<Integer>> lineFilters = new HashMap<>();
+        featurePaths.forEach(featureWithLines -> {
+            SortedSet<Integer> lines = featureWithLines.lines();
+            URI uri = featureWithLines.uri();
+            if (lines.isEmpty()) {
+                return;
+            }
+            lineFilters.putIfAbsent(uri, new TreeSet<>());
+            lineFilters.get(uri).addAll(lines);
+        });
+        return unmodifiableMap(lineFilters);
     }
 
     @Override
@@ -176,8 +173,9 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
         return snippetType;
     }
 
-    public List<String> getJunitOptions() {
-        return unmodifiableList(junitOptions);
+    @Override
+    public Class<? extends ObjectFactory> getObjectFactoryClass() {
+        return objectFactoryClass;
     }
 
     public int getThreads() {
@@ -211,4 +209,8 @@ public final class RuntimeOptions implements FeatureOptions, FilterOptions, Plug
     void setWip(boolean wip) {
         this.wip = wip;
     }
+
+    void setObjectFactoryClass(Class<? extends ObjectFactory> objectFactoryClass) {
+        this.objectFactoryClass = objectFactoryClass;
+    }
 }
