diff --git a/java_case_studies/reference_repos/cucumber.jvm/importC2/desired.java b/java_case_studies/reference_repos/cucumber.jvm/importC2/spork_result.java
index 77b1822..12c1d7a 100644
--- a/java_case_studies/reference_repos/cucumber.jvm/importC2/desired.java
+++ b/java_case_studies/reference_repos/cucumber.jvm/importC2/spork_result.java
@@ -2,13 +2,15 @@ package io.cucumber.core.options;
 
 import io.cucumber.core.backend.ObjectFactory;
 import io.cucumber.core.feature.FeatureWithLines;
+import io.cucumber.core.model.FeatureWithLines;
 import io.cucumber.core.order.PickleOrder;
 import io.cucumber.core.order.StandardPickleOrders;
 import io.cucumber.core.snippets.SnippetType;
-
 import java.net.URI;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -16,37 +18,42 @@ import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
-
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
 
-public final class RuntimeOptions implements
-    io.cucumber.core.feature.Options,
-    io.cucumber.core.runner.Options,
-    io.cucumber.core.plugin.Options,
-    io.cucumber.core.filter.Options,
-    io.cucumber.core.backend.Options {
 
+public final class RuntimeOptions implements io.cucumber.core.feature.Options , io.cucumber.core.runner.Options , io.cucumber.core.plugin.Options , io.cucumber.core.filter.Options , io.cucumber.core.backend.Options {
     private final List<URI> glue = new ArrayList<>();
+
     private final List<String> tagExpressions = new ArrayList<>();
+
     private final List<Pattern> nameFilters = new ArrayList<>();
+
     private final List<FeatureWithLines> featurePaths = new ArrayList<>();
 
     private boolean dryRun;
+
     private boolean strict = false;
+
     private boolean monochrome = false;
+
     private boolean wip = false;
+
     private SnippetType snippetType = SnippetType.UNDERSCORE;
+
     private int threads = 1;
+
     private PickleOrder pickleOrder = StandardPickleOrders.lexicalUriOrder();
+
     private int count = 0;
 
     private final List<Plugin> formatters = new ArrayList<>();
+
     private final List<Plugin> summaryPrinters = new ArrayList<>();
+
     private Class<? extends ObjectFactory> objectFactoryClass;
 
     private RuntimeOptions() {
-
     }
 
     public static RuntimeOptions defaultOptions() {
@@ -65,7 +72,7 @@ public final class RuntimeOptions implements
         return summaryPrinters;
     }
 
-    public boolean isMultiTestNGFThreaded() {
+    public boolean isMultiThreaded() {
         return getThreads() > 1;
     }
 
@@ -98,11 +105,19 @@ public final class RuntimeOptions implements
 
     @Override
     public List<URI> getFeaturePaths() {
-        return unmodifiableList(featurePaths.stream()
-            .map(FeatureWithLines::uri)
-            .sorted()
-            .distinct()
-            .collect(Collectors.toList()));
+        Set<URI> uris = new HashSet<>();
+        for (FeatureWithLines featurePath : featurePaths) {
+            URI uri = featurePath.uri();
+            uris.add(uri);
+        }
+        ArrayList<URI> toSort = new ArrayList<>(uris);
+        Collections.sort(toSort);
+        return unmodifiableList(
+<<<<<<< LEFT
+        featurePaths.stream()
+=======
+        unmodifiableList(toSort)
+>>>>>>> RIGHT.map(FeatureWithLines::uri).sorted().distinct().collect(Collectors.toList()));
     }
 
     @Override
@@ -146,7 +161,7 @@ public final class RuntimeOptions implements
     @Override
     public Map<URI, Set<Integer>> getLineFilters() {
         Map<URI, Set<Integer>> lineFilters = new HashMap<>();
-        featurePaths.forEach(featureWithLines -> {
+        featurePaths.forEach(( featureWithLines) -> {
             SortedSet<Integer> lines = featureWithLines.lines();
             URI uri = featureWithLines.uri();
             if (lines.isEmpty()) {
