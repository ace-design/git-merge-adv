diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict12/desired.java b/java_case_studies/demo_results/MethodUnion/openshift-java-client-conflict12.java
old mode 100755
new mode 100644
index d814ac6..d3cf76a
--- a/java_case_studies/reference_repos/openshift-java-client/conflict12/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/openshift-java-client-conflict12.java
@@ -9,8 +9,8 @@
  * Red Hat, Inc. - initial API and implementation 
  ******************************************************************************/
 package com.openshift.internal.client.httpclient;
-
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.SocketTimeoutException;
 import java.net.URL;
@@ -20,8 +20,6 @@ import java.security.NoSuchAlgorithmException;
 import java.security.SecureRandom;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
-import java.text.MessageFormat;
-
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.KeyManager;
@@ -30,10 +28,9 @@ import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocketFactory;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
+import java.util.Map;
 import com.openshift.client.HttpMethod;
 import com.openshift.client.IHttpClient;
 import com.openshift.client.utils.Base64Coder;
@@ -41,50 +38,44 @@ import com.openshift.internal.client.RequestParameter;
 import com.openshift.internal.client.utils.StreamUtils;
 import com.openshift.internal.client.utils.StringUtils;
 
-/**
- * @author Andre Dietisheim
- * @author Nicolas Spano
- */
-public class UrlConnectionHttpClient implements IHttpClient {
-
-	private static final Logger LOGGER = LoggerFactory.getLogger(UrlConnectionHttpClient.class);
-
-	private static final String SYSPROP_OPENSHIFT_CONNECT_TIMEOUT = "com.openshift.httpclient.timeout";
-	private static final String SYSPROP_DEFAULT_CONNECT_TIMEOUT = "sun.net.client.defaultConnectTimeout";
-	private static final String SYSPROP_DEFAULT_READ_TIMEOUT = "sun.net.client.defaultReadTimeout";
-
-	private static final String USERAGENT_FOR_KEYAUTH = "OpenShift";
-
-	private String userAgent;
-	private boolean sslChecks;
-	private String username;
-	private String password;
-	private String authKey;
-	private String authIV;
-	private IMediaType requestedMediaType;
-	private String acceptedMediaType;
-	private String acceptedVersion;
-
-	public UrlConnectionHttpClient(String username, String password, String userAgent, boolean sslChecks,
+public class UrlConnectionHttpClient implements IHttpClient{
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(UrlConnectionHttpClient.class);,
+    private static final String SYSPROP_OPENSHIFT_CONNECT_TIMEOUT = "com.openshift.httpclient.timeout";,
+    private static final String SYSPROP_DEFAULT_CONNECT_TIMEOUT = "sun.net.client.defaultConnectTimeout";,
+    private static final String SYSPROP_DEFAULT_READ_TIMEOUT = "sun.net.client.defaultReadTimeout";,
+    private static final String USERAGENT_FOR_KEYAUTH = "OpenShift";,
+    private String userAgent;,
+    private boolean sslChecks;,
+    private String username;,
+    private String password;,
+    private String authKey;,
+    private String authIV;,
+    private IMediaType requestMediaType;,
+    private String acceptedMediaType;,
+    private String acceptVersion;,
+
+    public UrlConnectionHttpClient(String username, String password, String userAgent, boolean sslChecks,
 			IMediaType requestMediaType, String acceptedMediaType, String version) {
 		this(username, password, userAgent, sslChecks, requestMediaType, acceptedMediaType, version, null, null);
 	}
 
-	public UrlConnectionHttpClient(String username, String password, String userAgent, boolean sslChecks,
+    public UrlConnectionHttpClient(String username, String password, String userAgent, boolean sslChecks,
 			IMediaType requestMediaType, String acceptedMediaType, String version, String authKey, String authIV) {
 		this.username = username;
 		this.password = password;
 		this.userAgent = setupUserAgent(authKey, authIV, userAgent);
 		this.sslChecks = sslChecks;
-		this.requestedMediaType = requestMediaType;
+		this.requestMediaType = requestMediaType;
 		this.acceptedMediaType = acceptedMediaType;
-		this.acceptedVersion = version;
 		this.authKey = authKey;
 		this.authIV = authIV;
+		this.acceptVersion = version;
 	}
 
-	/** TODO: unify with #setUserAgent **/
-	private String setupUserAgent(String authKey, String authIV, String userAgent) {
+    /** TODO: unify with #setUserAgent **/
+
+    private String setupUserAgent(String authKey, String authIV, String userAgent) {
 		if (!StringUtils.isEmpty(authKey)) {
 			if (userAgent == null) {
 				userAgent = "OpenShift";
@@ -95,47 +86,160 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		return userAgent;
 	}
 
-	@Override
+    @Override
+	public void setAcceptedMediaType(String acceptedMediaType) {
+		this.acceptedMediaType = acceptedMediaType;
+	}
+
+    @Override
+	public String getAcceptedMediaType() {
+		return acceptedMediaType;
+	}
+
+    @Override
+	public void setUserAgent(String userAgent) {
+		this.userAgent = userAgent;
+	}
+
+    @Override
+	public String getUserAgent() {
+		return userAgent;
+	}
+
+    @Override
+	public void setAcceptVersion(String version) {
+		this.acceptVersion = version;
+	}
+
+    @Override
+	public String getAcceptVersion() {
+		return acceptVersion;
+	}
+
+    @Override
+	public String get(URL url) throws HttpClientException, SocketTimeoutException {
+		return get(url, NO_TIMEOUT);
+	}
+
+    @Override
 	public String get(URL url, int timeout) throws HttpClientException, SocketTimeoutException {
-		return request(HttpMethod.GET, url, null, timeout);
+<<<<<<< left_content.java
+
+		HttpURLConnection connection = null;
+		try {
+			return write(null, HttpMethod.GET.toString(), url, timeout, requestMediaType);
+		} catch (SocketTimeoutException e) {
+			throw e;
+		/* TODO: cleanup exception handling */
+		} catch (IOException e) {
+			throw createException(e, connection);
+		} finally {
+			disconnect(connection);
+		}
+=======
+		return request(HttpMethod.GET, url, timeout);
+>>>>>>> right_content.java
 	}
 
-	@Override
-	public String put(URL url, IMediaType mediaType, int timeout, RequestParameter... parameters)
-			throws HttpClientException, SocketTimeoutException, EncodingException {
-		return request(HttpMethod.PUT, url, mediaType, timeout, parameters);
+
+    @Override
+	public String put(URL url, RequestParameter... parameters)
+			throws SocketTimeoutException, UnsupportedEncodingException, HttpClientException {
+		return put(url, NO_TIMEOUT, parameters);
 	}
 
-	@Override
-	public String post(URL url, IMediaType mediaType, int timeout, RequestParameter... parameters)
-			throws HttpClientException, SocketTimeoutException, EncodingException {
-		return request(HttpMethod.POST, url, mediaType, timeout, parameters);
+    public IMediaType getRequestMediaType() {
+        return requestMediaType;
+    }
+
+    @Override
+	public String put(URL url, int timeout, RequestParameter... parameters)
+			throws HttpClientException, SocketTimeoutException, UnsupportedEncodingException {
+		return request(HttpMethod.PUT, url, timeout, parameters);
 	}
 
-	@Override
-	public String delete(URL url, IMediaType mediaType, int timeout, RequestParameter... parameters)
+    public void setRequestMediaType(IMediaType requestMediaType) {
+        this.requestMediaType = requestMediaType;
+    }
+
+    public String put(Map<String, Object> parameters, URL url)
+			throws SocketTimeoutException, EncodingException, HttpClientException {
+		return put(requestMediaType.encodeParameters(parameters), url);
+	}
+
+    protected String put(String data, URL url, RequestParameter... parameters) throws HttpClientException,
+			SocketTimeoutException {
+		return request(HttpMethod.PUT, url, NO_TIMEOUT, parameters);
+	}
+
+    @Override
+	public String put(Map<String, Object> parameters, URL url, int timeout) 
 			throws HttpClientException, SocketTimeoutException, EncodingException {
-		return request(HttpMethod.DELETE, url, mediaType, timeout, parameters);
+		return put(parameters, url, timeout, requestMediaType);
+	}
+
+    @Override
+	public String post(URL url, RequestParameter... parameters)
+			throws SocketTimeoutException, UnsupportedEncodingException, HttpClientException {
+		return request(HttpMethod.POST, url, NO_TIMEOUT, parameters);
+	}
+
+    @Override
+    public String put(Map<String, Object> parameters, URL url, int timeout, IMediaType mediaType) throws HttpClientException, SocketTimeoutException, EncodingException {
+        return write(mediaType.encodeParameters(parameters), HttpMethod.PUT.toString(), url, timeout, mediaType);
+    }
+
+    @Override
+	public String post(URL url, int timeout, RequestParameter... parameters)
+			throws HttpClientException, SocketTimeoutException, UnsupportedEncodingException {
+		return request(HttpMethod.POST, url, timeout, parameters);
 	}
 
-	@Override
-	public String delete(URL url, int timeout)
+    protected String put(String data, URL url) throws HttpClientException, SocketTimeoutException {
+		return write(data, HttpMethod.PUT.toString(), url, NO_TIMEOUT, requestMediaType);
+	}
+
+    @Override
+	public String delete(URL url, RequestParameter... parameters) throws HttpClientException, SocketTimeoutException {
+		return request(HttpMethod.DELETE, url, NO_TIMEOUT, parameters);
+	}
+
+    public String post(Map<String, Object> parameters, URL url)
+			throws SocketTimeoutException, EncodingException, HttpClientException {
+		return post(requestMediaType.encodeParameters(parameters), url);
+	}
+
+    @Override
+	public String delete(URL url, int timeout, RequestParameter... parameters)
+			throws HttpClientException, SocketTimeoutException, UnsupportedEncodingException {
+		return request(HttpMethod.DELETE, url, timeout, parameters);
+	}
+
+    protected String post(String data, URL url) throws HttpClientException, SocketTimeoutException {
+		return write(data, HttpMethod.POST.toString(), url, NO_TIMEOUT, requestMediaType);
+	}
+
+    public String post(Map<String, Object> data, URL url, int timeout) 
 			throws HttpClientException, SocketTimeoutException, EncodingException {
-		return delete(url, null, timeout);
+        return post(data, url, timeout, requestMediaType);
+	}
+
+    @Override
+	public String delete(URL url)
+			throws HttpClientException, SocketTimeoutException, UnsupportedEncodingException {
+		return delete(url, NO_TIMEOUT);
 	}
 
-	protected String request(HttpMethod httpMethod, URL url, IMediaType requestMediaType, int timeout,
-			RequestParameter... parameters)
+    protected String request(HttpMethod httpMethod, URL url, int timeout, RequestParameter... parameters)
 			throws SocketTimeoutException, HttpClientException {
 		HttpURLConnection connection = null;
 		try {
-			connection = 
-					createConnection(url, username, password, authKey, authIV, userAgent, acceptedVersion, acceptedMediaType, timeout);
+			connection = createConnection(username, password, authKey, authIV, userAgent, url, timeout);
 			connection.setRequestMethod(httpMethod.toString());
 			if (parameters != null
 					&& parameters.length > 0) {
 				connection.setDoOutput(true);
-				getAndValidateRequestMediaType(requestMediaType).write(parameters, connection.getOutputStream());
+				requestMediaType.write(parameters, connection.getOutputStream());
 			}
 			return StreamUtils.readToString(connection.getInputStream());
 		} catch (SocketTimeoutException e) {
@@ -147,24 +251,61 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	private IMediaType getAndValidateRequestMediaType(IMediaType requestedMediaType) {
-		if (requestedMediaType == null) {
-			if (this.requestedMediaType == null) {
-				throw new HttpClientException(
-						MessageFormat.format("Request media type (ex. {0}) is not defined", MEDIATYPE_APPLICATION_FORMURLENCODED));
+    @Override
+    public String post(Map<String, Object> parameters, URL url, int timeout, IMediaType mediaType) throws HttpClientException, SocketTimeoutException, EncodingException {
+        return write(mediaType.encodeParameters(parameters), HttpMethod.POST.toString(), url, timeout, mediaType);
+    }
+
+    public String delete(Map<String, Object> parameters, URL url)
+			throws HttpClientException, SocketTimeoutException, EncodingException {
+		return delete(requestMediaType.encodeParameters(parameters), url);
+	}
+
+    protected String write(String data, String requestMethod, URL url, int timeout)
+			throws SocketTimeoutException, HttpClientException {
+		HttpURLConnection connection = null;
+		try {
+			connection = createConnection(username, password, authKey, authIV, userAgent, url, timeout);
+			connection.setRequestMethod(requestMethod);
+			connection.setDoOutput(true);
+			if (data != null) {
+				LOGGER.trace("Sending \"{}\" to {}", data, url);
+				StreamUtils.writeTo(data.getBytes(), connection.getOutputStream());
 			}
-			requestedMediaType = this.requestedMediaType;
+			return StreamUtils.readToString(connection.getInputStream());
+		} catch (SocketTimeoutException e) {
+			throw e;
+		} catch (IOException e) {
+			throw createException(e, connection);
+		} finally {
+			disconnect(connection);
 		}
-		return requestedMediaType;
+
+	}
+
+    @Override
+	public String delete(Map<String, Object> parameters, URL url, int timeout) throws HttpClientException,
+			SocketTimeoutException,
+            EncodingException {
+		return delete(parameters, url, timeout, requestMediaType);
 	}
 
-	private void disconnect(HttpURLConnection connection) {
+    @Override
+    public String delete(Map<String, Object> parameters, URL url, int timeout, IMediaType mediaType) throws HttpClientException, SocketTimeoutException, EncodingException {
+        return write(mediaType.encodeParameters(parameters), HttpMethod.DELETE.toString(), url, timeout, mediaType);
+    }
+
+    private void disconnect(HttpURLConnection connection) {
 		if (connection != null) {
 			connection.disconnect();
 		}
 	}
 
-	private HttpClientException createException(IOException ioe, HttpURLConnection connection)
+    protected String delete(String data, URL url) throws HttpClientException, SocketTimeoutException {
+		return write(data, HttpMethod.DELETE.toString(), url, NO_TIMEOUT, requestMediaType);
+	}
+
+    private HttpClientException createException(IOException ioe, HttpURLConnection connection)
 			throws SocketTimeoutException {
 		try {
 			int responseCode = connection.getResponseCode();
@@ -188,7 +329,29 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	protected String createErrorMessage(IOException ioe, HttpURLConnection connection) throws IOException {
+    protected String write(String data, String requestMethod, URL url, int timeout, IMediaType mediaType)
+			throws SocketTimeoutException, HttpClientException {
+		HttpURLConnection connection = null;
+		try {
+			connection = createConnection(username, password, authKey, authIV, userAgent, url, timeout, mediaType);
+			connection.setRequestMethod(requestMethod);
+			connection.setDoOutput(true);
+			if (data != null) {
+				LOGGER.trace("Sending \"{}\" to {}", data, url);
+				StreamUtils.writeTo(data.getBytes(), connection.getOutputStream());
+			}
+			return StreamUtils.readToString(connection.getInputStream());
+		} catch (SocketTimeoutException e) {
+			throw e;
+		} catch (IOException e) {
+			throw createException(e, connection);
+		} finally {
+			disconnect(connection);
+		}
+
+	}
+
+    protected String createErrorMessage(IOException ioe, HttpURLConnection connection) throws IOException {
 		String errorMessage = StreamUtils.readToString(connection.getErrorStream());
 		if (!StringUtils.isEmpty(errorMessage)) {
 			return errorMessage;
@@ -202,17 +365,18 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		return builder.toString();
 	}
 
-	private boolean isHttps(URL url) {
+    private boolean isHttps(URL url) {
 		return "https".equals(url.getProtocol());
 	}
 
-	/**
+    /**
 	 * Sets a trust manager that will always trust.
 	 * <p>
 	 * TODO: dont swallog exceptions and setup things so that they dont disturb
 	 * other components.
 	 */
-	private void setPermissiveSSLSocketFactory(HttpsURLConnection connection) {
+
+    private void setPermissiveSSLSocketFactory(HttpsURLConnection connection) {
 		try {
 			SSLContext sslContext = SSLContext.getInstance("SSL");
 			sslContext.init(
@@ -226,11 +390,11 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	protected HttpURLConnection createConnection(URL url, String username, String password, String authKey, String authIV,
-			String userAgent, String acceptedVersion, String acceptedMediaType, int timeout) throws IOException {
+    protected HttpURLConnection createConnection(String username, String password, String authKey, String authIV,
+			String userAgent, URL url, int timeout) throws IOException {
 		LOGGER.trace(
-				"creating connection to {} using username \"{}\" and password \"{}\"", 
-				new Object[] { url, username, password });
+				"creating connection to {} using username \"{}\" and password \"{}\"", new Object[] { url, username,
+						password });
 		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
 		setSSLChecks(url, connection);
 		setAuthorisation(username, password, authKey, authIV, connection);
@@ -242,24 +406,16 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		// wont work when switching http->https
 		// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4620571
 		connection.setInstanceFollowRedirects(true);
-		setUserAgent(userAgent, connection);
-		setAcceptHeader(acceptedVersion, acceptedMediaType, connection);
-		setAcceptedMediaType(acceptedMediaType, connection);
+		setAcceptHeader(connection);
+		setUserAgent(connection);
 
-		return connection;
-	}
+		connection.setRequestProperty(PROPERTY_CONTENT_TYPE, requestMediaType.getType());
 
-	private void setAcceptedMediaType(String acceptedMediaType, HttpURLConnection connection) {
-		if (acceptedMediaType == null) {
-			if (this.acceptedMediaType == null) {
-				throw new HttpClientException(MessageFormat.format(
-						"Accepted media type (ex. {0}) is not defined", MEDIATYPE_APPLICATION_FORMURLENCODED));
-			}
-		}
-		connection.setRequestProperty(PROPERTY_CONTENT_TYPE, acceptedMediaType);
+		return connection;
 	}
 
-	private void setUserAgent(String userAgent, HttpURLConnection connection) {
+    private void setUserAgent(HttpURLConnection connection) {
+		String userAgent = this.userAgent;
 		if (!StringUtils.isEmpty(authKey)) {
 			userAgent = USERAGENT_FOR_KEYAUTH;
 		}
@@ -269,18 +425,47 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	private void setAcceptHeader(String acceptedMediaType, String acceptedVersion, HttpURLConnection connection) {
+    protected HttpURLConnection createConnection(String username, String password, String userAgent, URL url)
+			throws IOException {
+		return createConnection(username, password, null, null, userAgent, url, NO_TIMEOUT, requestMediaType);
+	}
+
+    protected HttpURLConnection createConnection(String username, String password, String authKey, String authIV,
+			String userAgent, URL url, int timeout, IMediaType mediaType) throws IOException {
+		LOGGER.trace(
+				"creating connection to {} using username \"{}\" and password \"{}\"", new Object[] { url, username,
+						password });
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		setSSLChecks(url, connection);
+		setAuthorisation(username, password, authKey, authIV, connection);
+		connection.setUseCaches(false);
+		connection.setDoInput(true);
+		connection.setAllowUserInteraction(false);
+		setConnectTimeout(connection);
+		setReadTimeout(timeout, connection);
+		// wont work when switching http->https
+		// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4620571
+		connection.setInstanceFollowRedirects(true);
+		setAcceptHeader(connection);
+		setUserAgent(connection);
+
+		connection.setRequestProperty(PROPERTY_CONTENT_TYPE, mediaType.getType());
+
+		return connection;
+	}
+
+    private void setAcceptHeader(HttpURLConnection connection) {
 		StringBuilder builder =
 				new StringBuilder(acceptedMediaType);
-		if (acceptedVersion != null) {
+		if (acceptVersion != null) {
 			builder.append(SEMICOLON).append(SPACE)
-					.append(VERSION).append(EQUALS).append(acceptedVersion);
+					.append(VERSION).append(EQUALS).append(acceptVersion);
 		}
 
 		connection.setRequestProperty(PROPERTY_ACCEPT, builder.toString());
 	}
 
-	private void setAuthorisation(String username, String password, String authKey, String authIV,
+    private void setAuthorisation(String username, String password, String authKey, String authIV,
 			HttpURLConnection connection) {
 		if (username == null || username.trim().length() == 0
 				|| password == null || password.trim().length() == 0) {
@@ -296,7 +481,7 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	private void setSSLChecks(URL url, HttpURLConnection connection) {
+    private void setSSLChecks(URL url, HttpURLConnection connection) {
 		if (isHttps(url)
 				&& !sslChecks) {
 			HttpsURLConnection httpsConnection = (HttpsURLConnection) connection;
@@ -305,7 +490,7 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	private void setConnectTimeout(URLConnection connection) {
+    private void setConnectTimeout(URLConnection connection) {
 		int timeout = getTimeout(
 				getSystemPropertyInteger(SYSPROP_OPENSHIFT_CONNECT_TIMEOUT),
 				getSystemPropertyInteger(SYSPROP_DEFAULT_CONNECT_TIMEOUT),
@@ -313,12 +498,12 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		connection.setConnectTimeout(timeout);
 	}
 
-	private void setReadTimeout(int timeout, URLConnection connection) {
+    private void setReadTimeout(int timeout, URLConnection connection) {
 		timeout = getTimeout(timeout, getSystemPropertyInteger(SYSPROP_DEFAULT_READ_TIMEOUT), DEFAULT_READ_TIMEOUT);
 		connection.setReadTimeout(timeout);
 	}
 
-	private int getTimeout(int timeout, int systemPropertyTimeout, int defaultTimeout) {
+    private int getTimeout(int timeout, int systemPropertyTimeout, int defaultTimeout) {
 		if (timeout == NO_TIMEOUT) {
 			timeout = systemPropertyTimeout;
 			if (timeout == NO_TIMEOUT) {
@@ -328,11 +513,11 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		return timeout;
 	}
 
-	protected IMediaType getMediaType() {
-		return requestedMediaType;
+    protected IMediaType getMediaType() {
+		return requestMediaType;
 	}
-	
-	private int getSystemPropertyInteger(String key) {
+
+    private int getSystemPropertyInteger(String key) {
 		try {
 			return Integer.parseInt(System.getProperty(key));
 		} catch (NumberFormatException e) {
@@ -340,35 +525,28 @@ public class UrlConnectionHttpClient implements IHttpClient {
 		}
 	}
 
-	private class PermissiveTrustManager implements X509TrustManager {
+    private class PermissiveTrustManager implements X509TrustManager{
 
-		public X509Certificate[] getAcceptedIssuers() {
+
+        public X509Certificate[] getAcceptedIssuers() {
 			return null;
 		}
 
-		public void checkServerTrusted(X509Certificate[] chain,
+        public void checkServerTrusted(X509Certificate[] chain,
 				String authType) throws CertificateException {
 		}
 
-		public void checkClientTrusted(X509Certificate[] chain,
+        public void checkClientTrusted(X509Certificate[] chain,
 				String authType) throws CertificateException {
 		}
-	}
 
-	private class NoopHostnameVerifier implements HostnameVerifier {
+    }
+    private class NoopHostnameVerifier implements HostnameVerifier{
 
-		public boolean verify(String hostname, SSLSession sslSession) {
+
+        public boolean verify(String hostname, SSLSession sslSession) {
 			return true;
 		}
-	}
-
-	@Override
-	public void setUserAgent(String userAgent) {
-		this.userAgent = userAgent;
-	}
 
-	@Override
-	public void setAcceptVersion(String version) {
-		this.acceptedVersion = version;
-	}
-}
+    }
+}
\ No newline at end of file
