diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict7/desired.java b/java_case_studies/demo_results/MethodUnion/openshift-java-client-conflict7.java
old mode 100755
new mode 100644
index e359bef..3de5fad
--- a/java_case_studies/reference_repos/openshift-java-client/conflict7/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/openshift-java-client-conflict7.java
@@ -9,12 +9,10 @@
  * Red Hat, Inc. - initial API and implementation 
  ******************************************************************************/
 package com.openshift.internal.client;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
-
 import com.openshift.client.ApplicationScale;
 import com.openshift.client.IApplication;
 import com.openshift.client.IDomain;
@@ -22,11 +20,11 @@ import com.openshift.client.IGearProfile;
 import com.openshift.client.IHttpClient;
 import com.openshift.client.IUser;
 import com.openshift.client.Messages;
+import java.util.Arrays;
 import com.openshift.client.OpenShiftException;
+import java.util.HashMap;
 import com.openshift.client.cartridge.IEmbeddableCartridge;
 import com.openshift.client.cartridge.IStandaloneCartridge;
-import com.openshift.client.cartridge.StandaloneCartridge;
-import com.openshift.internal.client.httpclient.FormUrlEncodedMediaType;
 import com.openshift.internal.client.response.ApplicationResourceDTO;
 import com.openshift.internal.client.response.DomainResourceDTO;
 import com.openshift.internal.client.response.Link;
@@ -34,28 +32,29 @@ import com.openshift.internal.client.response.LinkParameter;
 import com.openshift.internal.client.utils.Assert;
 import com.openshift.internal.client.utils.CollectionUtils;
 import com.openshift.internal.client.utils.IOpenShiftJsonConstants;
+import com.openshift.client.cartridge.ICartridge;
+import com.openshift.internal.client.httpclient.JsonMediaType;
 
-/**
- * @author Andr√© Dietisheim
- * @author Nicolas Spano
- */
-public class DomainResource extends AbstractOpenShiftResource implements IDomain {
+public class DomainResource extends AbstractOpenShiftResource implements IDomain{
 
-	private static final String LINK_GET = "GET";
-	private static final String LINK_LIST_APPLICATIONS = "LIST_APPLICATIONS";
-	private static final String LINK_ADD_APPLICATION = "ADD_APPLICATION";
-	private static final String LINK_UPDATE = "UPDATE";
-	private static final String LINK_DELETE = "DELETE";
+    private static final String LINK_GET = "GET";,
+    private static final String LINK_LIST_APPLICATIONS = "LIST_APPLICATIONS";,
+    private static final String LINK_ADD_APPLICATION = "ADD_APPLICATION";,
+    private static final String LINK_UPDATE = "UPDATE";,
+    private static final String LINK_DELETE = "DELETE";,
+    private static final String URL_REGEX="(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";,
+    private String id;,
+    private String suffix;,
 
-	private String id;
-	private String suffix;
+    /** root node in the business domain. */
+    private final APIResource connectionResource;,
 
-	private final APIResource connectionResource;
-	/** Applications for the domain. */
-	// TODO: replace by a map indexed by application names ?
-	private List<IApplication> applications = null;
+    /** Applications for the domain. */
 
-	protected DomainResource(final String namespace, final String suffix, final Map<String, Link> links,
+    // TODO: replace by a map indexed by application names ?
+    private List<IApplication> applications = null;,
+
+    protected DomainResource(final String namespace, final String suffix, final Map<String, Link> links,
 			final Messages messages, final APIResource api) {
 		super(api.getService(), links, messages);
 		this.id = namespace;
@@ -63,19 +62,19 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		this.connectionResource = api;
 	}
 
-	protected DomainResource(DomainResourceDTO domainDTO, final APIResource api) {
+    protected DomainResource(DomainResourceDTO domainDTO, final APIResource api) {
 		this(domainDTO.getId(), domainDTO.getSuffix(), domainDTO.getLinks(), domainDTO.getMessages(), api);
 	}
 
-	public String getId() {
+    public String getId() {
 		return id;
 	}
 
-	public String getSuffix() {
+    public String getSuffix() {
 		return suffix;
 	}
 
-	public void rename(String id) throws OpenShiftException {
+    public void rename(String id) throws OpenShiftException {
 		Assert.notNull(id);
 
 		DomainResourceDTO domainDTO = new UpdateDomainRequest().execute(id);
@@ -85,57 +84,78 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		this.getLinks().putAll(domainDTO.getLinks());
 	}
 
-	public IUser getUser() throws OpenShiftException {
+    public IUser getUser() throws OpenShiftException {
 		return connectionResource.getUser();
 	}
 
-	public boolean waitForAccessible(long timeout) throws OpenShiftException {
+    public boolean waitForAccessible(long timeout) throws OpenShiftException {
 		throw new UnsupportedOperationException();
 		//TODO: implement
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge)
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge)
 			throws OpenShiftException {
 		return createApplication(name, cartridge, (String) null);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final ApplicationScale scale) throws OpenShiftException {
 		return createApplication(name, cartridge, scale, null, null);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge, String initialGitUrl)
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge, String initialGitUrl)
 			throws OpenShiftException {
 		return createApplication(name, cartridge, null, null, initialGitUrl);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final ApplicationScale scale, String initialGitUrl) throws OpenShiftException {
 		return createApplication(name, cartridge, scale, null, initialGitUrl);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final IGearProfile gearProfile) throws OpenShiftException {
 		return createApplication(name, cartridge, null, gearProfile);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final IGearProfile gearProfile, String initialGitUrl) throws OpenShiftException {
 		return createApplication(name, cartridge, null, gearProfile, initialGitUrl);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final ApplicationScale scale, final IGearProfile gearProfile) throws OpenShiftException {
 		return createApplication(name, cartridge, scale, gearProfile, null);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl)
 			throws OpenShiftException {
 		return createApplication(name, cartridge, scale, gearProfile, initialGitUrl, IHttpClient.NO_TIMEOUT);
 	}
-	
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
+			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl, int timeout)
+			throws OpenShiftException {
+		if (name == null) {
+			throw new OpenShiftException("Application name is mandatory but none was given.");
+		}
+		// this would trigger lazy loading list of available applications.
+		// this is needed anyhow since we're adding the new app to the list of
+		// available apps
+		if (hasApplicationByName(name)) {
+			throw new OpenShiftException("Application with name \"{0}\" already exists.", name);
+		}
+
+		ApplicationResourceDTO applicationDTO =
+				new CreateApplicationRequest().execute(name, cartridge, scale, gearProfile, initialGitUrl, timeout);
+		IApplication application = new ApplicationResource(applicationDTO, cartridge, this);
+
+		getOrLoadApplications().add(application);
+		return application;
+	}
+
+    public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
 			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl, int timeout,
 			IEmbeddableCartridge... cartridges)
 			throws OpenShiftException {
@@ -161,12 +181,18 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		return getApplicationByName(name) != null;
 	}
 
-	public IApplication getApplicationByName(String name) throws OpenShiftException {
+    @Override
+    public IApplication createApplication(String name, IStandaloneCartridge cartridge, ApplicationScale scale, IGearProfile gearProfile, String initialGitUrl, long timeout) throws OpenShiftException {
+        //TODO
+        throw new UnsupportedOperationException();
+    }
+
+    public IApplication getApplicationByName(String name) throws OpenShiftException {
 		Assert.notNull(name);
 		return getApplicationByName(name, getApplications());
 	}
 
-	private IApplication getApplicationByName(String name, Collection<IApplication> applications) throws OpenShiftException {
+    private IApplication getApplicationByName(String name, Collection<IApplication> applications) throws OpenShiftException {
 		Assert.notNull(name);
 
 		IApplication matchingApplication = null;
@@ -179,7 +205,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		return matchingApplication;
 	}
 
-	public List<IApplication> getApplicationsByCartridge(IStandaloneCartridge cartridge) throws OpenShiftException {
+    public List<IApplication> getApplicationsByCartridge(IStandaloneCartridge cartridge) throws OpenShiftException {
 		List<IApplication> matchingApplications = new ArrayList<IApplication>();
 		for (IApplication application : getApplications()) {
 			if (cartridge.equals(application.getCartridge())) {
@@ -189,34 +215,35 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		return matchingApplications;
 	}
 
-	public boolean hasApplicationByCartridge(IStandaloneCartridge cartridge) throws OpenShiftException {
+    public boolean hasApplicationByCartridge(IStandaloneCartridge cartridge) throws OpenShiftException {
 		return getApplicationsByCartridge(cartridge).size() > 0;
 	}
 
-	public void destroy() throws OpenShiftException {
+    public void destroy() throws OpenShiftException {
 		destroy(false);
 	}
 
-	public void destroy(boolean force) throws OpenShiftException {
+    public void destroy(boolean force) throws OpenShiftException {
 		new DeleteDomainRequest().execute(force);
 		connectionResource.removeDomain(this);
 	}
 
-	protected List<IApplication> getOrLoadApplications() throws OpenShiftException {
+    protected List<IApplication> getOrLoadApplications() throws OpenShiftException {
 		if (applications == null) {
 			this.applications = loadApplications();
 		}
 		return applications;
 	}
-	
-	public List<IApplication> getApplications() throws OpenShiftException {
+
+    public List<IApplication> getApplications() throws OpenShiftException {
 		return CollectionUtils.toUnmodifiableCopy(getOrLoadApplications());
 	}
 
-	/**
+    /**
 	 * @throws OpenShiftException
 	 */
-	private List<IApplication> loadApplications() throws OpenShiftException {
+
+    private List<IApplication> loadApplications() throws OpenShiftException {
 		List<IApplication> apps = new ArrayList<IApplication>();
 		List<ApplicationResourceDTO> applicationDTOs = new ListApplicationsRequest().execute();
 		for (ApplicationResourceDTO applicationDTO : applicationDTOs) {
@@ -228,12 +255,12 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		return apps;
 	}
 
-	protected void removeApplication(IApplication application) {
+    protected void removeApplication(IApplication application) {
 		// TODO: can this collection be a null ?
 		this.applications.remove(application);
 	}
 
-	public List<String> getAvailableCartridgeNames() throws OpenShiftException {
+    public List<String> getAvailableCartridgeNames() throws OpenShiftException {
 		final List<String> cartridges = new ArrayList<String>();
 		for (LinkParameter param : getLink(LINK_ADD_APPLICATION).getRequiredParams()) {
 			// TODO: extract "cartridge" to constant
@@ -246,7 +273,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		return cartridges;
 	}
 
-	public List<IGearProfile> getAvailableGearProfiles() throws OpenShiftException {
+    public List<IGearProfile> getAvailableGearProfiles() throws OpenShiftException {
 		final List<IGearProfile> gearSizes = new ArrayList<IGearProfile>();
 		for (LinkParameter param : getLink(LINK_ADD_APPLICATION).getOptionalParams()) {
 			if (param.getName().equals(IOpenShiftJsonConstants.PROPERTY_GEAR_PROFILE)) {
@@ -257,9 +284,8 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 		return gearSizes;
 	}
-	
-	
-	public void refresh() throws OpenShiftException {
+
+    public void refresh() throws OpenShiftException {
 		final DomainResourceDTO domainResourceDTO =  new GetDomainRequest().execute();
 		this.id = domainResourceDTO.getId();
 		this.suffix = domainResourceDTO.getSuffix();
@@ -269,7 +295,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		
 	}
 
-	@Override
+    @Override
 	public String toString() {
 		return "Domain ["
 				+ "id=" + id + ", "
@@ -277,33 +303,34 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 				+ "]";
 	}
 
-	private class GetDomainRequest extends ServiceRequest {
-		public GetDomainRequest() throws OpenShiftException {
+    private class GetDomainRequest extends ServiceRequest{
+
+
+        public GetDomainRequest() throws OpenShiftException {
 			super(LINK_GET);
 		}
 
-		protected DomainResourceDTO execute() throws OpenShiftException {
+        protected DomainResourceDTO execute() throws OpenShiftException {
 			return (DomainResourceDTO) super.execute();
 		}
-		
-		
-	}
-	
-	private class ListApplicationsRequest extends ServiceRequest {
 
-		public ListApplicationsRequest() throws OpenShiftException {
+    }
+    private class ListApplicationsRequest extends ServiceRequest{
+
+
+        public ListApplicationsRequest() throws OpenShiftException {
 			super(LINK_LIST_APPLICATIONS);
 		}
 
-	}
+    }
+    private class CreateApplicationRequest extends ServiceRequest{
 
-	private class CreateApplicationRequest extends ServiceRequest {
 
-		public CreateApplicationRequest() throws OpenShiftException {
+        public CreateApplicationRequest() throws OpenShiftException {
 			super(LINK_ADD_APPLICATION);
 		}
 
-		public ApplicationResourceDTO execute(final String name, IStandaloneCartridge cartridge,
+        public ApplicationResourceDTO execute(final String name, IStandaloneCartridge cartridge,
 				final ApplicationScale scale, final IGearProfile gearProfile, final String initialGitUrl,
 				final int timeout, final IEmbeddableCartridge... embeddableCartridges)
 				throws OpenShiftException {
@@ -317,29 +344,94 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 					.addScale(scale)
 					.addGearProfile(gearProfile)
 					.add(IOpenShiftJsonConstants.PROPERTY_INITIAL_GIT_URL, initialGitUrl);
-			return super.execute(new FormUrlEncodedMediaType(), timeout, parameters.toArray());
+			return super.execute(timeout, parameters.toArray());
+		}
+
+        public ApplicationResourceDTO execute(final String name, final IStandaloneCartridge cartridge,
+				final ApplicationScale scale, final IGearProfile gearProfile, final String initialGitUrl, final int timeout) throws OpenShiftException {
+			if (cartridge == null) {
+				throw new OpenShiftException("Application cartridge is mandatory but was not given.");
+			} 
 			
+			List<ServiceParameter> parameters = new ArrayList<ServiceParameter>();
+			addStringParameter(IOpenShiftJsonConstants.PROPERTY_NAME, name, parameters);
+			addCartridgeParameter(cartridge, parameters);
+			addScaleParameter(scale, parameters);
+			addGearProfileParameter(gearProfile, parameters);
+			addStringParameter(IOpenShiftJsonConstants.PROPERTY_INITIAL_GIT_URL, initialGitUrl, parameters);
+
+			if (isDownloadableCartridge(cartridge)) {
+                return super.execute(timeout, new JsonMediaType(), (ServiceParameter[]) parameters.toArray(new ServiceParameter[parameters.size()]));
+            } else {
+                return super.execute(timeout, (ServiceParameter[]) parameters.toArray(new ServiceParameter[parameters.size()]));
+            }
+		}
+
+        private List<ServiceParameter> addCartridgeParameter(IStandaloneCartridge cartridge, List<ServiceParameter> parameters) {
+			if (cartridge == null) {
+				return parameters;
+			}
+            if (isDownloadableCartridge(cartridge)) {
+                Map<String,String> props = new HashMap<String, String>();
+                props.put(IOpenShiftJsonConstants.PROPERTY_URL, cartridge.getName());
+                parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_CARTRIDGES, Arrays.asList(props)));
+            } else {
+                parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_CARTRIDGE, cartridge.getName()));
+            }
+            return parameters;
+		}
+
+        private List<ServiceParameter> addScaleParameter(ApplicationScale scale, List<ServiceParameter> parameters) {
+			if (scale == null) {
+				return parameters;
+			}
+			parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_SCALE, scale.getValue()));
+			return parameters;
+		}
+
+        private List<ServiceParameter> addGearProfileParameter(IGearProfile gearProfile, List<ServiceParameter> parameters) {
+			if (gearProfile == null) {
+				return parameters;
+			}
+			parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_GEAR_PROFILE, gearProfile.getName()));
+			return parameters;
+		}
+
+        private List<ServiceParameter> addStringParameter(String parameterName, String value, List<ServiceParameter> parameters) {
+			if (value == null) {
+				return parameters;
+			}
+			parameters.add(new ServiceParameter(parameterName, value));
+			return parameters;
 		}
-	}
 
-	private class UpdateDomainRequest extends ServiceRequest {
+        private boolean isDownloadableCartridge(ICartridge cartridge) {
+            return cartridge.getName().matches(URL_REGEX);
+        }
 
-		public UpdateDomainRequest() throws OpenShiftException {
+    }
+    private class UpdateDomainRequest extends ServiceRequest{
+
+
+        public UpdateDomainRequest() throws OpenShiftException {
 			super(LINK_UPDATE);
 		}
 
-		public DomainResourceDTO execute(String namespace) throws OpenShiftException {
+        public DomainResourceDTO execute(String namespace) throws OpenShiftException {
 			return super.execute(new RequestParameter(IOpenShiftJsonConstants.PROPERTY_ID, namespace));
 		}
-	}
 
-	private class DeleteDomainRequest extends ServiceRequest {
-		public DeleteDomainRequest() throws OpenShiftException {
+    }
+    private class DeleteDomainRequest extends ServiceRequest{
+
+
+        public DeleteDomainRequest() throws OpenShiftException {
 			super(LINK_DELETE);
 		}
 
-		public void execute(boolean force) throws OpenShiftException {
+        public void execute(boolean force) throws OpenShiftException {
 			super.execute(new RequestParameter(IOpenShiftJsonConstants.PROPERTY_FORCE, force));
 		}
-	}
-}
+
+    }
+}
\ No newline at end of file
