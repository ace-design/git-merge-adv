diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict7/left.java b/java_case_studies/reference_repos/openshift-java-client/conflict7/right.java
index e7b2814..4e13397 100755
--- a/java_case_studies/reference_repos/openshift-java-client/conflict7/left.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict7/right.java
@@ -11,7 +11,9 @@
 package com.openshift.internal.client;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -23,8 +25,9 @@ import com.openshift.client.IHttpClient;
 import com.openshift.client.IUser;
 import com.openshift.client.Messages;
 import com.openshift.client.OpenShiftException;
-import com.openshift.client.cartridge.IEmbeddableCartridge;
+import com.openshift.client.cartridge.ICartridge;
 import com.openshift.client.cartridge.IStandaloneCartridge;
+import com.openshift.internal.client.httpclient.JsonMediaType;
 import com.openshift.internal.client.response.ApplicationResourceDTO;
 import com.openshift.internal.client.response.DomainResourceDTO;
 import com.openshift.internal.client.response.Link;
@@ -44,10 +47,10 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 	private static final String LINK_ADD_APPLICATION = "ADD_APPLICATION";
 	private static final String LINK_UPDATE = "UPDATE";
 	private static final String LINK_DELETE = "DELETE";
-
+    private static final String URL_REGEX="(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";
 	private String id;
 	private String suffix;
-
+	/** root node in the business domain. */
 	private final APIResource connectionResource;
 	/** Applications for the domain. */
 	// TODO: replace by a map indexed by application names ?
@@ -132,10 +135,9 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 			throws OpenShiftException {
 		return createApplication(name, cartridge, scale, gearProfile, initialGitUrl, IHttpClient.NO_TIMEOUT);
 	}
-	
+
 	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
-			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl, int timeout,
-			IEmbeddableCartridge... cartridges)
+			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl, int timeout)
 			throws OpenShiftException {
 		if (name == null) {
 			throw new OpenShiftException("Application name is mandatory but none was given.");
@@ -148,13 +150,20 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 
 		ApplicationResourceDTO applicationDTO =
-				new CreateApplicationRequest().execute(name, cartridge, scale, gearProfile, initialGitUrl, timeout, cartridges);
+				new CreateApplicationRequest().execute(name, cartridge, scale, gearProfile, initialGitUrl, timeout);
 		IApplication application = new ApplicationResource(applicationDTO, cartridge, this);
 
 		getOrLoadApplications().add(application);
 		return application;
 	}
 
+    @Override
+    public IApplication createApplication(String name, IStandaloneCartridge cartridge, ApplicationScale scale, IGearProfile gearProfile, String initialGitUrl, long timeout) throws OpenShiftException {
+        //TODO
+        throw new UnsupportedOperationException();
+    }
+
+
     public boolean hasApplicationByName(String name) throws OpenShiftException {
 		return getApplicationByName(name) != null;
 	}
@@ -281,7 +290,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 
 		protected DomainResourceDTO execute() throws OpenShiftException {
-			return (DomainResourceDTO) super.execute();
+			return (DomainResourceDTO)(super.execute());
 		}
 		
 		
@@ -301,22 +310,68 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 			super(LINK_ADD_APPLICATION);
 		}
 
-		public ApplicationResourceDTO execute(final String name, IStandaloneCartridge cartridge,
-				final ApplicationScale scale, final IGearProfile gearProfile, final String initialGitUrl,
-				final int timeout, final IEmbeddableCartridge... embeddableCartridges)
-				throws OpenShiftException {
+		public ApplicationResourceDTO execute(final String name, final IStandaloneCartridge cartridge,
+				final ApplicationScale scale, final IGearProfile gearProfile, final String initialGitUrl, final int timeout) throws OpenShiftException {
 			if (cartridge == null) {
 				throw new OpenShiftException("Application cartridge is mandatory but was not given.");
 			} 
 			
-			RequestParameters parameters = new RequestParameters()
-					.add(IOpenShiftJsonConstants.PROPERTY_NAME, name)
-					.addCartridges(cartridge, embeddableCartridges)
-					.addScale(scale)
-					.addGearProfile(gearProfile)
-					.add(IOpenShiftJsonConstants.PROPERTY_INITIAL_GIT_URL, initialGitUrl);
-			return super.execute(timeout, parameters.toArray());
+			List<ServiceParameter> parameters = new ArrayList<ServiceParameter>();
+			addStringParameter(IOpenShiftJsonConstants.PROPERTY_NAME, name, parameters);
+			addCartridgeParameter(cartridge, parameters);
+			addScaleParameter(scale, parameters);
+			addGearProfileParameter(gearProfile, parameters);
+			addStringParameter(IOpenShiftJsonConstants.PROPERTY_INITIAL_GIT_URL, initialGitUrl, parameters);
+
+			if (isDownloadableCartridge(cartridge)) {
+                return super.execute(timeout, new JsonMediaType(), (ServiceParameter[]) parameters.toArray(new ServiceParameter[parameters.size()]));
+            } else {
+                return super.execute(timeout, (ServiceParameter[]) parameters.toArray(new ServiceParameter[parameters.size()]));
+            }
+		}
+
+		private List<ServiceParameter> addCartridgeParameter(IStandaloneCartridge cartridge, List<ServiceParameter> parameters) {
+			if (cartridge == null) {
+				return parameters;
+			}
+            if (isDownloadableCartridge(cartridge)) {
+                Map<String,String> props = new HashMap<String, String>();
+                props.put(IOpenShiftJsonConstants.PROPERTY_URL, cartridge.getName());
+                parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_CARTRIDGES, Arrays.asList(props)));
+            } else {
+                parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_CARTRIDGE, cartridge.getName()));
+            }
+            return parameters;
+		}
+		
+		private List<ServiceParameter> addScaleParameter(ApplicationScale scale, List<ServiceParameter> parameters) {
+			if (scale == null) {
+				return parameters;
+			}
+			parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_SCALE, scale.getValue()));
+			return parameters;
+		}
+
+		private List<ServiceParameter> addGearProfileParameter(IGearProfile gearProfile, List<ServiceParameter> parameters) {
+			if (gearProfile == null) {
+				return parameters;
+			}
+			parameters.add(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_GEAR_PROFILE, gearProfile.getName()));
+			return parameters;
 		}
+
+		private List<ServiceParameter> addStringParameter(String parameterName, String value, List<ServiceParameter> parameters) {
+			if (value == null) {
+				return parameters;
+			}
+			parameters.add(new ServiceParameter(parameterName, value));
+			return parameters;
+		}
+
+        private boolean isDownloadableCartridge(ICartridge cartridge) {
+            return cartridge.getName().matches(URL_REGEX);
+        }
+
 	}
 
 	private class UpdateDomainRequest extends ServiceRequest {
@@ -326,7 +381,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 
 		public DomainResourceDTO execute(String namespace) throws OpenShiftException {
-			return super.execute(new RequestParameter(IOpenShiftJsonConstants.PROPERTY_ID, namespace));
+			return super.execute(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_ID, namespace));
 		}
 	}
 
@@ -336,7 +391,8 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 
 		public void execute(boolean force) throws OpenShiftException {
-			super.execute(new RequestParameter(IOpenShiftJsonConstants.PROPERTY_FORCE, force));
+			super.execute(new ServiceParameter(IOpenShiftJsonConstants.PROPERTY_FORCE, force));
 		}
 	}
+
 }
