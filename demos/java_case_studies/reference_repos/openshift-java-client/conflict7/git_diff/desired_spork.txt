diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict7/desired.java b/java_case_studies/reference_repos/openshift-java-client/conflict7/spork_result.java
old mode 100755
new mode 100644
index e359bef..04aa3d7
--- a/java_case_studies/reference_repos/openshift-java-client/conflict7/desired.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict7/spork_result.java
@@ -10,11 +10,6 @@
  ******************************************************************************/
 package com.openshift.internal.client;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-
 import com.openshift.client.ApplicationScale;
 import com.openshift.client.IApplication;
 import com.openshift.client.IDomain;
@@ -23,10 +18,10 @@ import com.openshift.client.IHttpClient;
 import com.openshift.client.IUser;
 import com.openshift.client.Messages;
 import com.openshift.client.OpenShiftException;
+import com.openshift.client.cartridge.ICartridge;
 import com.openshift.client.cartridge.IEmbeddableCartridge;
 import com.openshift.client.cartridge.IStandaloneCartridge;
-import com.openshift.client.cartridge.StandaloneCartridge;
-import com.openshift.internal.client.httpclient.FormUrlEncodedMediaType;
+import com.openshift.internal.client.httpclient.JsonMediaType;
 import com.openshift.internal.client.response.ApplicationResourceDTO;
 import com.openshift.internal.client.response.DomainResourceDTO;
 import com.openshift.internal.client.response.Link;
@@ -34,29 +29,43 @@ import com.openshift.internal.client.response.LinkParameter;
 import com.openshift.internal.client.utils.Assert;
 import com.openshift.internal.client.utils.CollectionUtils;
 import com.openshift.internal.client.utils.IOpenShiftJsonConstants;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 
 /**
  * @author Andr√© Dietisheim
  * @author Nicolas Spano
  */
 public class DomainResource extends AbstractOpenShiftResource implements IDomain {
-
 	private static final String LINK_GET = "GET";
+
 	private static final String LINK_LIST_APPLICATIONS = "LIST_APPLICATIONS";
+
 	private static final String LINK_ADD_APPLICATION = "ADD_APPLICATION";
+
 	private static final String LINK_UPDATE = "UPDATE";
+
 	private static final String LINK_DELETE = "DELETE";
 
+	private static final String URL_REGEX = "(https?|ftp)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";
+
 	private String id;
+
 	private String suffix;
 
 	private final APIResource connectionResource;
+
+	// TODO: replace by a map indexed by application names ?
 	/** Applications for the domain. */
 	// TODO: replace by a map indexed by application names ?
 	private List<IApplication> applications = null;
 
-	protected DomainResource(final String namespace, final String suffix, final Map<String, Link> links,
-			final Messages messages, final APIResource api) {
+	protected DomainResource(final String namespace, final String suffix, final Map<String, Link> links, final Messages messages, final APIResource api) {
 		super(api.getService(), links, messages);
 		this.id = namespace;
 		this.suffix = suffix;
@@ -129,16 +138,11 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		return createApplication(name, cartridge, scale, gearProfile, null);
 	}
 
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
-			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl)
-			throws OpenShiftException {
+	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge, final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl) throws OpenShiftException {
 		return createApplication(name, cartridge, scale, gearProfile, initialGitUrl, IHttpClient.NO_TIMEOUT);
 	}
-	
-	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge,
-			final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl, int timeout,
-			IEmbeddableCartridge... cartridges)
-			throws OpenShiftException {
+
+	public IApplication createApplication(final String name, final IStandaloneCartridge cartridge, final ApplicationScale scale, final IGearProfile gearProfile, String initialGitUrl, int timeout, IEmbeddableCartridge... cartridges) throws OpenShiftException {
 		if (name == null) {
 			throw new OpenShiftException("Application name is mandatory but none was given.");
 		}
@@ -148,18 +152,15 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		if (hasApplicationByName(name)) {
 			throw new OpenShiftException("Application with name \"{0}\" already exists.", name);
 		}
-
-		ApplicationResourceDTO applicationDTO =
-				new CreateApplicationRequest().execute(name, cartridge, scale, gearProfile, initialGitUrl, timeout, cartridges);
+		ApplicationResourceDTO applicationDTO = new CreateApplicationRequest().execute(name, cartridge, scale, gearProfile, initialGitUrl, timeout, cartridges);
 		IApplication application = new ApplicationResource(applicationDTO, cartridge, this);
-
 		getOrLoadApplications().add(application);
 		return application;
 	}
 
-    public boolean hasApplicationByName(String name) throws OpenShiftException {
-		return getApplicationByName(name) != null;
-	}
+				public boolean hasApplicationByName(String name) throws OpenShiftException {
+						return getApplicationByName(name) != null;
+					}
 
 	public IApplication getApplicationByName(String name) throws OpenShiftException {
 		Assert.notNull(name);
@@ -208,7 +209,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 		return applications;
 	}
-	
+
 	public List<IApplication> getApplications() throws OpenShiftException {
 		return CollectionUtils.toUnmodifiableCopy(getOrLoadApplications());
 	}
@@ -257,8 +258,7 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 		return gearSizes;
 	}
-	
-	
+
 	public void refresh() throws OpenShiftException {
 		final DomainResourceDTO domainResourceDTO =  new GetDomainRequest().execute();
 		this.id = domainResourceDTO.getId();
@@ -283,47 +283,52 @@ public class DomainResource extends AbstractOpenShiftResource implements IDomain
 		}
 
 		protected DomainResourceDTO execute() throws OpenShiftException {
-			return (DomainResourceDTO) super.execute();
+			return ((DomainResourceDTO) (super.execute()));
 		}
-		
-		
 	}
-	
-	private class ListApplicationsRequest extends ServiceRequest {
 
+	private class ListApplicationsRequest extends ServiceRequest {
 		public ListApplicationsRequest() throws OpenShiftException {
 			super(LINK_LIST_APPLICATIONS);
 		}
-
 	}
 
 	private class CreateApplicationRequest extends ServiceRequest {
-
 		public CreateApplicationRequest() throws OpenShiftException {
 			super(LINK_ADD_APPLICATION);
 		}
 
-		public ApplicationResourceDTO execute(final String name, IStandaloneCartridge cartridge,
-				final ApplicationScale scale, final IGearProfile gearProfile, final String initialGitUrl,
-				final int timeout, final IEmbeddableCartridge... embeddableCartridges)
-				throws OpenShiftException {
-			if (cartridge == null) {
+		public ApplicationResourceDTO execute(final String name, IStandaloneCartridge cartridge, final ApplicationScale scale, final IGearProfile gearProfile, final String initialGitUrl, final int timeout, final IEmbeddableCartridge... embeddableCartridges) throws OpenShiftException {
+							if (cartridge == null) {
 				throw new OpenShiftException("Application cartridge is mandatory but was not given.");
-			} 
-			
-			RequestParameters parameters = new RequestParameters()
+							} 
+							
+<<<<<<< LEFT
+							RequestParameters parameters = new RequestParameters()
 					.add(IOpenShiftJsonConstants.PROPERTY_NAME, name)
 					.addCartridges(cartridge, embeddableCartridges)
 					.addScale(scale)
 					.addGearProfile(gearProfile)
 					.add(IOpenShiftJsonConstants.PROPERTY_INITIAL_GIT_URL, initialGitUrl);
-			return super.execute(new FormUrlEncodedMediaType(), timeout, parameters.toArray());
-			
-		}
+							return super.execute(timeout, parameters.toArray());
+=======
+							List<ServiceParameter> parameters = new ArrayList<ServiceParameter>();
+							addStringParameter(IOpenShiftJsonConstants.PROPERTY_NAME, name, parameters);
+							addCartridgeParameter(cartridge, parameters);
+							addScaleParameter(scale, parameters);
+							addGearProfileParameter(gearProfile, parameters);
+							addStringParameter(IOpenShiftJsonConstants.PROPERTY_INITIAL_GIT_URL, initialGitUrl, parameters);
+
+							if (isDownloadableCartridge(cartridge)) {
+				            return super.execute(timeout, new JsonMediaType(), (ServiceParameter[]) parameters.toArray(new ServiceParameter[parameters.size()]));
+				        } else {
+				            return super.execute(timeout, (ServiceParameter[]) parameters.toArray(new ServiceParameter[parameters.size()]));
+				        }
+>>>>>>> RIGHT
+						}
 	}
 
 	private class UpdateDomainRequest extends ServiceRequest {
-
 		public UpdateDomainRequest() throws OpenShiftException {
 			super(LINK_UPDATE);
 		}
