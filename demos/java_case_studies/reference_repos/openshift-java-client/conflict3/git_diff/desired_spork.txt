diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict3/desired.java b/java_case_studies/reference_repos/openshift-java-client/conflict3/spork_result.java
index 65f03cd..bd55f85 100644
--- a/java_case_studies/reference_repos/openshift-java-client/conflict3/desired.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict3/spork_result.java
@@ -10,22 +10,7 @@
  ******************************************************************************/
 package com.openshift.client.utils;
 
-import static org.fest.assertions.Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-
-import java.io.IOException;
-import java.net.URL;
-import java.util.Collection;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.fest.assertions.AssertExtension;
-
+import com.openshift.client.ApplicationScale;
 import com.openshift.client.IApplication;
 import com.openshift.client.IDomain;
 import com.openshift.client.IField;
@@ -39,6 +24,21 @@ import com.openshift.client.cartridge.IEmbeddedCartridge;
 import com.openshift.client.cartridge.IStandaloneCartridge;
 import com.openshift.client.cartridge.selector.LatestEmbeddableCartridge;
 import com.openshift.internal.client.utils.StreamUtils;
+import java.io.IOException;
+import java.net.URL;
+import java.util.Collection;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.xml.datatype.DatatypeConfigurationException;
+import org.fest.assertions.AssertExtension;
+import static org.fest.assertions.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+
 
 /**
  * @author Andr√© Dietisheim
@@ -77,8 +77,8 @@ public class ApplicationAssert implements AssertExtension {
 		return this;
 	}
 
-	public ApplicationAssert hasCreationTime(String creationTime) {
-		assertEquals(creationTime, application.getCreationTime());
+	public ApplicationAssert hasCreationTime(String creationTime) throws DatatypeConfigurationException {
+		assertEquals(RFC822DateUtils.getDate(creationTime), application.getCreationTime());
 		return this;
 	}
 
@@ -145,7 +145,16 @@ public class ApplicationAssert implements AssertExtension {
 		assertThat(application.getGearProfile()).isEqualTo(gearProfile);
 		return this;
 	}
+<<<<<<< LEFT
 
+=======
+	
+	public ApplicationAssert hasApplicationScale(ApplicationScale applicationScale) {
+		assertThat(application.getApplicationScale()).isEqualTo(applicationScale);
+		return this;
+	}
+	
+>>>>>>> RIGHT
 	public ApplicationAssert hasEmbeddedCartridges(LatestEmbeddableCartridge... selectors)
 			throws OpenShiftException {
 		for (LatestEmbeddableCartridge selector : selectors) {
@@ -222,22 +231,25 @@ public class ApplicationAssert implements AssertExtension {
 		return this;
 	}
 
-	public void hasNotEmbeddableCartridge(LatestEmbeddableCartridge constraint) {
+	public ApplicationAssert hasNotEmbeddableCartridge(LatestEmbeddableCartridge constraint) {
 		hasNotEmbeddableCartridge(constraint.get(application));
+		return this;
 	}
 
-	public void hasNotEmbeddableCartridge(IEmbeddableCartridge cartridge) {
+	public ApplicationAssert hasNotEmbeddableCartridge(IEmbeddableCartridge cartridge) {
 		hasNotEmbeddableCartridge(cartridge.getName());
+		return this;
 	}
 
 	public void hasNotEmbeddableCartridge(String name) {
 		assertNull(getEmbeddableCartridge(name));
 	}
 
-	public void assertThatDoesntContainCartridges(Collection<IEmbeddableCartridge> shouldNotBeContained, List<IEmbeddedCartridge> cartridges) {
+	public ApplicationAssert assertThatDoesntContainCartridges(Collection<IEmbeddableCartridge> shouldNotBeContained, List<IEmbeddedCartridge> cartridges) {
 		for(IEmbeddableCartridge shouldNot : shouldNotBeContained) {
 			assertFalse(cartridges.contains(shouldNot));
 		}
+		return this;
 	}
 
 	private IEmbeddedCartridge getEmbeddableCartridge(String name) {
@@ -251,10 +263,16 @@ public class ApplicationAssert implements AssertExtension {
 		return matchingCartridge;
 	}
 
-	public void assertThatContainsCartridges(Collection<IEmbeddableCartridge> shouldBeContained, List<IEmbeddedCartridge> cartridgesToCheck) {
+	public ApplicationAssert assertThatContainsCartridges(Collection<IEmbeddableCartridge> shouldBeContained, List<IEmbeddedCartridge> cartridgesToCheck) {
 		for (IEmbeddableCartridge cartridge : shouldBeContained) {
 			assertTrue(cartridgesToCheck.contains(cartridge));
 		}
+		return this;
+	}
+	
+	public ApplicationAssert hasDomain(IDomain domain) {
+		assertThat(application.getDomain()).isEqualTo(domain);
+		return this;
 	}
 	
 	public ApplicationAssert hasContent(String page, String contains) throws IOException {
