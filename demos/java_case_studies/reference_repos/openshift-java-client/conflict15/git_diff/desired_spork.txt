diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict15/desired.java b/java_case_studies/reference_repos/openshift-java-client/conflict15/spork_result.java
index e4e941b..97249b5 100644
--- a/java_case_studies/reference_repos/openshift-java-client/conflict15/desired.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict15/spork_result.java
@@ -19,18 +19,23 @@ import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.SocketTimeoutException;
 import java.net.URL;
 
+<<<<<<< LEFT
 import org.mockito.Matchers;
+=======
+import com.openshift.internal.client.httpclient.EncodingException;
+import com.openshift.internal.client.httpclient.IMediaType;
+import org.mockito.ArgumentCaptor;
+>>>>>>> RIGHT
 import org.mockito.Mockito;
 
 import com.openshift.client.IHttpClient;
 import com.openshift.client.utils.Samples;
-import com.openshift.internal.client.httpclient.EncodingException;
 import com.openshift.internal.client.httpclient.HttpClientException;
-import com.openshift.internal.client.httpclient.IMediaType;
 
 /**
  * @author Andre Dietisheim
@@ -46,15 +51,15 @@ public class HttpClientMockDirector {
 				.mockGetUser(Samples.GET_USER);
 	}
 	
-//	public HttpClientMockDirector mockUserAgent(String userAgent) throws SocketTimeoutException, HttpClientException {
-//		when(client.getUserAgent()).thenReturn(userAgent);
-//		return this;
-//	}
+	public HttpClientMockDirector mockUserAgent(String userAgent) throws SocketTimeoutException, HttpClientException {
+		when(client.getUserAgent()).thenReturn(userAgent);
+		return this;
+	}
 
-//    public HttpClientMockDirector mockMediaType(IMediaType mediaType) throws SocketTimeoutException, HttpClientException {
-//        when(client.getRequestMediaType()).thenReturn(mediaType);
-//        return this;
-//    }
+    public HttpClientMockDirector mockMediaType(IMediaType mediaType) throws SocketTimeoutException, HttpClientException {
+        when(client.getRequestMediaType()).thenReturn(mediaType);
+        return this;
+    }
 
 	public HttpClientMockDirector mockGetAny(String response) throws SocketTimeoutException, HttpClientException {
 		when(client.get(any(URL.class), anyInt())).thenReturn(response);
@@ -72,29 +77,49 @@ public class HttpClientMockDirector {
 	}
 
 	public HttpClientMockDirector mockPostAny(String jsonResponse)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.post(any(URL.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.post(any(URL.class), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.post(anyMapOf(String.class, Object.class), any(URL.class), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(jsonResponse);
 		return this;
 	}
 
 	public HttpClientMockDirector mockPostAny(Exception exception)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.post(any(URL.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.post(any(URL.class), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.post(anyMapOf(String.class, Object.class), any(URL.class), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenThrow(exception);
 		return this;
 	}
 
 	public HttpClientMockDirector mockPutAny(String jsonResponse)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.put(any(URL.class), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.put(any(URL.class), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.put(anyMapOf(String.class, Object.class), any(URL.class)))
+>>>>>>> RIGHT
 				.thenReturn(jsonResponse);
 		return this;
 	}
 
 	public HttpClientMockDirector mockDeleteAny(String jsonResponse)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.delete(any(URL.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.delete(any(URL.class), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.delete(anyMapOf(String.class, Object.class), any(URL.class), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(jsonResponse);
 		return this;
 	}
@@ -136,18 +161,31 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		when(client.post(
 				urlEndsWith("/user/keys"),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(createKeyRequestResponse.getContentAsString());
 		return this;
 	}
 
+<<<<<<< LEFT
 	public HttpClientMockDirector mockUpdateKey(String keyName, Samples updateKeyRequestResponse, RequestParameter... parameters) 
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+=======
+	public HttpClientMockDirector mockUpdateKey(String keyName, Samples updateKeyRequestResponse, Pair... pairs) 
 			throws SocketTimeoutException, HttpClientException, EncodingException {
+>>>>>>> RIGHT
 		when(client.put(
 				urlEndsWith("/user/keys/" + keyName),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(updateKeyRequestResponse.getContentAsString());
 		return this;
 	}
@@ -160,29 +198,49 @@ public class HttpClientMockDirector {
 	}
 
 	public HttpClientMockDirector mockCreateDomain(Samples domainResourceResponse)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.post(urlEndsWith("/domains"), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.post(urlEndsWith("/domains"), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.post(anyMapOf(String.class, Object.class), urlEndsWith("/domains"), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(domainResourceResponse.getContentAsString());
 		return this;
 	}
 
 	public HttpClientMockDirector mockDeleteDomain(String domainId, Samples deleteDomainResourceResponse)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.delete(urlEndsWith("/domains/" + domainId), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.delete(urlEndsWith("/domains/" + domainId), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.delete(anyMapOf(String.class, Object.class), urlEndsWith("/domains/" + domainId), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(deleteDomainResourceResponse.getContentAsString());
 		return this;
 	}
 
 	public HttpClientMockDirector mockDeleteDomain(String domainId, Exception exception)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.delete(urlEndsWith("/domains/" + domainId), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.delete(urlEndsWith("/domains/" + domainId), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.delete(anyMapOf(String.class, Object.class), urlEndsWith("/domains/" + domainId), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenThrow(exception);
 		return this;
 	}
 
 	public HttpClientMockDirector mockRenameDomain(String domainId, Samples getDomainsResourceResponse)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		when(client.put(urlEndsWith("/domains/" + domainId), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		when(client.put(urlEndsWith("/domains/" + domainId), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+		when(client.put(anyMapOf(String.class, Object.class), urlEndsWith("/domains/" + domainId), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(getDomainsResourceResponse.getContentAsString());
 		return this;
 	}
@@ -210,9 +268,15 @@ public class HttpClientMockDirector {
 	}
 
 	public HttpClientMockDirector mockCreateApplication(String domainId, Samples postDomainsResourceResponse)
-			throws SocketTimeoutException, HttpClientException, EncodingException {
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
 		when(client.post(
-				urlEndsWith("/domains/" + domainId + "/applications"), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+				urlEndsWith("/domains/" + domainId + "/applications"), anyInt(), Matchers.<RequestParameter[]>anyVararg()))
+=======
+			throws SocketTimeoutException, HttpClientException, EncodingException {
+		when(client.post(anyMapOf(String.class, Object.class),
+				urlEndsWith("/domains/" + domainId + "/applications"), anyInt(), any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(postDomainsResourceResponse.getContentAsString());
 		return this;
 	}
@@ -222,8 +286,12 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		when(client.post(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/events"),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(postApplicationEvent.getContentAsString());
 		return this;
 	}
@@ -231,7 +299,7 @@ public class HttpClientMockDirector {
 	public HttpClientMockDirector mockGetApplication(String domainId, String applicationName,
 			Samples applicationResourceResponse)
 			throws SocketTimeoutException, HttpClientException {
-		when(client.get(urlEndsWith("/domains/" + domainId + "/applications/" + applicationName), anyInt()))
+		when(client.get(urlEndsWith("/domains/" + domainId + "/applications/" + applicationName)))
 				.thenReturn(applicationResourceResponse.getContentAsString());
 		return this;
 	}
@@ -260,8 +328,12 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		when(client.post(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/events"),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenThrow(exception);
 		return this;
 	}
@@ -271,8 +343,12 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		when(client.post(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/cartridges"),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenReturn(addEmbeddedCartridgeResponse.getContentAsString());
 		return this;
 	}
@@ -282,8 +358,13 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		when(client.post(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/cartridges"),
-				any(IMediaType.class), anyInt(), 
+<<<<<<< LEFT
+				anyInt(), 
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+				anyInt(),
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenThrow(exception);
 		return this;
 	}
@@ -295,8 +376,12 @@ public class HttpClientMockDirector {
 		when(client.delete(
 				urlEndsWith(
 				"/domains/" + domainId + "/applications/" + applicationName + "/cartridges/" + cartridgeName),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg()))
+=======
+                any(IMediaType.class)))
+>>>>>>> RIGHT
 				.thenThrow(exception);
 		return this;
 	}
@@ -305,8 +390,12 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		verify(client, times(1)).post(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/events"),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg());
+=======
+                any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
@@ -331,8 +420,12 @@ public class HttpClientMockDirector {
 			throws SocketTimeoutException, HttpClientException, EncodingException {
 		verify(client, times(1)).post(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/cartridges"),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg());
+=======
+                any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
@@ -342,8 +435,12 @@ public class HttpClientMockDirector {
 		verify(client, times(1)).delete(
 				urlEndsWith("/domains/" + domainId + "/applications/" + applicationName + "/cartridges/"
 						+ cartridgeName),
-				any(IMediaType.class), anyInt(),
+				anyInt(),
+<<<<<<< LEFT
 				Matchers.<RequestParameter[]>anyVararg());
+=======
+                any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
@@ -359,44 +456,74 @@ public class HttpClientMockDirector {
 	}
 
 	public HttpClientMockDirector verifyPostAny(int times)
-			throws SocketTimeoutException, HttpClientException, EncodingException {
-		verify(client, times(times)).post(any(URL.class), any(IMediaType.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		verify(client, times(times)).post(any(URL.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
 		return this;
 	}
 
 	public HttpClientMockDirector verifyPost(RequestParameter... parameters)
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		verify(client).post(any(URL.class), anyInt(), eq(parameters));
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		verify(client).post(any(URL.class), any(IMediaType.class), anyInt(), eq(parameters));
+		verify(client, times(times)).post(anyMapOf(String.class, Object.class), any(URL.class), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
 	public HttpClientMockDirector verifyPost(String url, int times)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException, MalformedURLException {
+		verify(client, times(times)).post(new URL(url), anyInt(), Matchers.<RequestParameter[]>anyVararg());
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException, MalformedURLException {
-		verify(client, times(times)).post(new URL(url), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg());
+		verify(client, times(times)).post(anyMapOf(String.class, Object.class), new URL(url), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
 	public HttpClientMockDirector verifyPutAny(int times)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		verify(client, times(times)).put(any(URL.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		verify(client, times(times)).put(any(URL.class), any(IMediaType.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+		verify(client, times(times)).put(anyMapOf(String.class, Object.class), any(URL.class), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
 	public HttpClientMockDirector verifyPut(String url, int times)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException, MalformedURLException {
+		verify(client, times(times)).put(new URL(url), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException, MalformedURLException {
-		verify(client, times(times)).put(new URL(url), any(IMediaType.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+		verify(client, times(times)).put(anyMapOf(String.class, Object.class), new URL(url), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
 	public HttpClientMockDirector verifyDeleteAny(int times)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		verify(client, times(times)).delete(any(URL.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		verify(client, times(times)).delete(any(URL.class), any(IMediaType.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+		verify(client, times(times)).delete(anyMapOf(String.class, Object.class), any(URL.class), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
 	public HttpClientMockDirector verifyDelete(String url, int times)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException, MalformedURLException {
+		verify(client, times(times)).delete(new URL(url), anyInt(), Matchers.<RequestParameter[]>anyVararg());
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException, MalformedURLException {
-		verify(client, times(times)).delete(new URL(url), any(IMediaType.class), anyInt(), Matchers.<RequestParameter[]>anyVararg());
+		verify(client, times(times)).delete(anyMapOf(String.class, Object.class), new URL(url), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
@@ -406,8 +533,13 @@ public class HttpClientMockDirector {
 	}
 
 	public HttpClientMockDirector verifyRenameDomain(String domainId)
+<<<<<<< LEFT
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
+		verify(client, times(1)).put(urlEndsWith(domainId), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+=======
 			throws SocketTimeoutException, HttpClientException, EncodingException {
-		verify(client, times(1)).put(urlEndsWith(domainId), any(IMediaType.class), anyInt(),Matchers.<RequestParameter[]>anyVararg());
+		verify(client, times(1)).put(anyMapOf(String.class, Object.class), urlEndsWith(domainId), anyInt(), any(IMediaType.class));
+>>>>>>> RIGHT
 		return this;
 	}
 
@@ -432,27 +564,89 @@ public class HttpClientMockDirector {
 		return this;
 	}
 
+<<<<<<< LEFT
 	public HttpClientMockDirector verifyCreateKey(RequestParameter... parameters)
-			throws SocketTimeoutException, HttpClientException, EncodingException {
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
 		verify(client).post(
-				urlEndsWith("/user/keys"), any(IMediaType.class), anyInt(), eq(parameters));
+				urlEndsWith("/user/keys"), eq(IHttpClient.NO_TIMEOUT), eq(parameters));
+=======
+	public HttpClientMockDirector verifyCreateKey(Pair... pairs)
+			throws SocketTimeoutException, HttpClientException, EncodingException {
+		verify(client).post(anyMapOf(String.class, Object.class),
+				urlEndsWith("/user/keys"), eq(IHttpClient.NO_TIMEOUT), any(IMediaType.class));
+		assertPostParameters(pairs);
+>>>>>>> RIGHT
 		return this;
 	}
 
+<<<<<<< LEFT
 	public HttpClientMockDirector verifyUpdateKey(String keyName, RequestParameter... parameters)
-			throws SocketTimeoutException, HttpClientException, EncodingException {
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
 		verify(client).put(
-				urlEndsWith("/user/keys/" + keyName), any(IMediaType.class), anyInt(), eq(parameters));
+				urlEndsWith("/user/keys/" + keyName), eq(IHttpClient.NO_TIMEOUT), eq(parameters));
+=======
+	public HttpClientMockDirector verifyUpdateKey(String keyName, Pair... pairs)
+			throws SocketTimeoutException, HttpClientException, EncodingException {
+		verify(client).put(anyMapOf(String.class, Object.class),
+				urlEndsWith("/user/keys/" + keyName), eq(IHttpClient.NO_TIMEOUT), any(IMediaType.class));
+		assertPutParameters(pairs);
+>>>>>>> RIGHT
 		return this;
 	}
 
+<<<<<<< LEFT
 	public HttpClientMockDirector verifyCreateApplication(String domainId, int timeout, RequestParameter... parameters)
-			throws SocketTimeoutException, HttpClientException, EncodingException {
+			throws SocketTimeoutException, HttpClientException, UnsupportedEncodingException {
 		verify(client).post(
-				urlEndsWith("/domains/" + domainId + "/applications"), any(IMediaType.class), eq(timeout), eq(parameters));
+				urlEndsWith("/domains/" + domainId + "/applications"), eq(timeout), eq(parameters));
+=======
+	public HttpClientMockDirector verifyCreateApplication(String domainId, int timeout, Pair... pairs)
+			throws SocketTimeoutException, HttpClientException, EncodingException {
+		verify(client).post(anyMapOf(String.class, Object.class),
+				urlEndsWith("/domains/" + domainId + "/applications"), eq(timeout), any(IMediaType.class));
+		assertPostParameters(pairs);
+>>>>>>> RIGHT
+		return this;
+	}
+
+<<<<<<< LEFT
+=======
+    public HttpClientMockDirector verifyCreateApplication(String domainId, int timeout, Class<? extends IMediaType> mediaType, Pair... pairs)
+            throws SocketTimeoutException, HttpClientException, EncodingException {
+        verify(client).post(anyMapOf(String.class, Object.class),
+                urlEndsWith("/domains/" + domainId + "/applications"), eq(timeout), any(mediaType));
+        assertPostParameters(pairs);
+        return this;
+    }
+
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	public HttpClientMockDirector assertPostParameters(Pair... pairs)
+			throws SocketTimeoutException, HttpClientException, EncodingException {
+		ArgumentCaptor<Map> captor = ArgumentCaptor.forClass(Map.class);
+		verify(client).post(captor.capture(), any(URL.class), anyInt(), any(IMediaType.class));
+		assertParameters(captor.getValue(), pairs);
 		return this;
 	}
 
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	public HttpClientMockDirector assertPutParameters(Pair... pairs)
+			throws SocketTimeoutException, HttpClientException, EncodingException {
+		ArgumentCaptor<Map> captor = ArgumentCaptor.forClass(Map.class);
+		verify(client).put(captor.capture(), any(URL.class), anyInt(), any(IMediaType.class));
+		assertParameters(captor.getValue(), pairs);
+		return this;
+	}
+
+	private void assertParameters(@SuppressWarnings("rawtypes") Map postedParameters, Pair... pairs) {
+		assertThat(postedParameters).hasSize(pairs.length);
+		for (Pair pair : pairs) {
+			Object value = postedParameters.get(pair.getKey());
+            //It's possible that the value is not a String (e.g. a Map), so we convert to String before checking.
+			assertThat(value.toString()).isNotNull().isEqualTo(pair.getValue());
+		}
+	}
+
+>>>>>>> RIGHT
 	public IHttpClient client() {
 		return client;
 	}
