diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict9/desired.java b/java_case_studies/reference_repos/openshift-java-client/conflict9/spork_result.java
old mode 100755
new mode 100644
index 7210343..47e95a1
--- a/java_case_studies/reference_repos/openshift-java-client/conflict9/desired.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict9/spork_result.java
@@ -10,13 +10,6 @@
  ******************************************************************************/
 package com.openshift.internal.client;
 
-import java.net.MalformedURLException;
-import java.net.SocketTimeoutException;
-import java.net.URL;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.openshift.client.HttpMethod;
 import com.openshift.client.IHttpClient;
 import com.openshift.client.InvalidCredentialsOpenShiftException;
@@ -38,20 +31,28 @@ import com.openshift.internal.client.response.ResourceDTOFactory;
 import com.openshift.internal.client.response.RestResponse;
 import com.openshift.internal.client.utils.StringUtils;
 import com.openshift.internal.client.utils.UrlUtils;
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.SocketTimeoutException;
+import java.net.URL;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * @author Andr√© Dietisheim
  */
 public class RestService implements IRestService {
-
 	private static final Logger LOGGER = LoggerFactory.getLogger(RestService.class);
 
 	private static final String HTTP = "http";
-	
+
 	private static final String SERVICE_PATH = "/broker/rest/";
+
 	private static final char SLASH = '/';
 
 	private String baseUrl;
+
 	private IHttpClient client;
 
 	public RestService(String baseUrl, String clientId, IHttpClient client) {
@@ -59,10 +60,10 @@ public class RestService implements IRestService {
 	}
 
 	RestService(String baseUrl, String clientId, RestServiceProperties properties, IHttpClient client) {
-		this(baseUrl, clientId, null,  properties, client);
+		this(baseUrl, clientId, null, properties, client);
 	}
 
-	protected RestService(String baseUrl, String clientId, String protocolVersion, RestServiceProperties properties, IHttpClient client) {
+	RestService(String baseUrl, String clientId, String protocolVersion, RestServiceProperties properties, IHttpClient client) {
 		this.baseUrl = UrlUtils.ensureStartsWithHttps(baseUrl);
 		this.client = client;
 		setupClient(properties.getUseragent(clientId), protocolVersion, client);
@@ -75,43 +76,62 @@ public class RestService implements IRestService {
 		client.setAcceptVersion(protocolVersion);
 		client.setUserAgent(userAgent);
 	}
-	
+
 	@Override
 	public RestResponse request(Link link, RequestParameter... parameters) throws OpenShiftException {
-		return request(link, null, IHttpClient.NO_TIMEOUT, parameters);
+		return request(link, IHttpClient.NO_TIMEOUT, parameters);
 	}
-	
+
+	public RestResponse request(Link link, int timeout, Map<String, Object> parameters) throws OpenShiftException {
+		return request(link, timeout, client.getRequestMediaType(), parameters);
+	}
+
+<<<<<<< LEFT
 	@Override
-	public RestResponse request(Link link, int timeout, RequestParameter... parameters) throws OpenShiftException {
-		return request(link, timeout, parameters);
+=======
+    @Override
+>>>>>>> RIGHT
+
+	public RestResponse request(Link link, int timeout, IMediaType mediaType, RequestParameter... parameters) throws OpenShiftException {
+		validateParameters(parameters, link);
+		HttpMethod httpMethod = link.getHttpMethod();
+		String response = request(link.getHref(), httpMethod, timeout, mediaType, parameters);
+		return ResourceDTOFactory.get(response);
 	}
 
 	@Override
-    public RestResponse request(Link link, IMediaType mediaType, int timeout, RequestParameter... parameters) throws OpenShiftException {
-        validateParameters(parameters, link);
-        String url = getUrlString(link.getHref());
-        try {
-            String response = request(new URL(url), link.getHttpMethod(), mediaType, timeout, parameters);
-            return ResourceDTOFactory.get(response);
-        } catch (EncodingException e) {
-            throw new OpenShiftException(e, e.getMessage());
-		} catch (MalformedURLException e) {
+	public String request(String href, HttpMethod httpMethod, RequestParameter... parameters) throws OpenShiftException {
+		return request(href, httpMethod, IHttpClient.NO_TIMEOUT, parameters);
+	}
+
+	public String request(String href, HttpMethod httpMethod, int timeout, Map<String, Object> parameters) throws OpenShiftException {
+		return request(href, httpMethod, timeout, client.getRequestMediaType(), parameters);
+	}
+
+<<<<<<< LEFT
+	@Override
+=======
+    @Override
+>>>>>>> RIGHT
+
+	public String request(String href, HttpMethod httpMethod, int timeout, IMediaType mediaType, RequestParameter... parameters) throws OpenShiftException {
+		URL url = getUrl(href);
+		try {
+			return request(url, httpMethod, timeout, mediaType, parameters);
+		} catch (EncodingException e) {
 			throw new OpenShiftException(e, e.getMessage());
-        } catch (UnauthorizedException e) {
-            throw new InvalidCredentialsOpenShiftException(url, e);
-        } catch (NotFoundException e) {
-            throw new NotFoundOpenShiftException(url, e);
-        } catch (HttpClientException e) {
-            throw new OpenShiftEndpointException(
-                    url.toString(), e, e.getMessage(),
-                    "Could not request {0}: {1}", url, getResponseMessage(e));
-        } catch (SocketTimeoutException e) {
-            throw new OpenShiftTimeoutException(url, e, e.getMessage(),
-                    "Could not request url {0}, connection timed out", url);
-        }
-    }
-
-    private String getResponseMessage(HttpClientException clientException) {
+		} catch (UnauthorizedException e) {
+			throw new InvalidCredentialsOpenShiftException(url.toString(), e);
+		} catch (NotFoundException e) {
+			throw new NotFoundOpenShiftException(url.toString(), e);
+		} catch (HttpClientException e) {
+			throw new OpenShiftEndpointException(url.toString(), e, e.getMessage(), "Could not request {0}: {1}", url.toString(), getResponseMessage(e));
+		} catch (SocketTimeoutException e) {
+			throw new OpenShiftTimeoutException(url.toString(), e, e.getMessage(), "Could not request url {0}, connection timed out", url.toString());
+		}
+	}
+
+	private String getResponseMessage(HttpClientException clientException) {
 		try {
 			RestResponse restResponse = ResourceDTOFactory.get(clientException.getMessage());
 			if (restResponse == null) {
@@ -132,45 +152,61 @@ public class RestService implements IRestService {
 		}
 	}
 
-	private String request(URL url, HttpMethod httpMethod, IMediaType mediaType, int timeout, RequestParameter... parameters)
-			throws HttpClientException, SocketTimeoutException, OpenShiftException, EncodingException {
-		LOGGER.info("Requesting {} with protocol {} on {}",
-				new Object[] { httpMethod.name(), SERVICE_VERSION, url });
-		
+	private String request(URL url, HttpMethod httpMethod, int timeout, IMediaType mediaType, RequestParameter... parameters) throws HttpClientException, SocketTimeoutException, OpenShiftException, EncodingException {
+		LOGGER.info("Requesting {} with protocol {} on {}", new Object[]{ httpMethod.name(), client.getAcceptVersion(), url });
 		switch (httpMethod) {
-		case GET:
-			return client.get(url, timeout);
-		case POST:
-			return client.post(url, mediaType, timeout, parameters);
-		case PUT:
-			return client.put(url, mediaType,timeout, parameters);
-		case DELETE:
-			return client.delete(url, mediaType, timeout, parameters);
-		default:
-			throw new OpenShiftException("Unexpected HTTP method {0}", httpMethod.toString());
+			case GET :
+				return client.get(url, timeout);
+			case POST :
+				return client.post(url, timeout, 
+<<<<<<< LEFT
+parameters
+=======
+mediaType
+>>>>>>> RIGHT
+				);
+			case PUT :
+				return client.put(url, timeout, 
+<<<<<<< LEFT
+parameters
+=======
+mediaType
+>>>>>>> RIGHT
+				);
+			case DELETE :
+				return client.delete(url, timeout, 
+<<<<<<< LEFT
+parameters
+=======
+mediaType
+>>>>>>> RIGHT
+				);
+			default :
+				throw new OpenShiftException("Unexpected HTTP method {0}", httpMethod.toString());
 		}
-		
-		
 	}
-	
-	private String getUrlString(String href) {
-		if (StringUtils.isEmpty(href)) {
-			throw new OpenShiftException("Invalid empty url");
-		}
-		if (href.startsWith(HTTP)) {
-			return href;
-		}
-		if (href.startsWith(SERVICE_PATH)) {
-			return baseUrl + href;
-		}
-		if (href.charAt(0) == SLASH) {
-			href = href.substring(1, href.length());
+
+	private URL getUrl(String href) throws OpenShiftException {
+		try {
+			if (href == null) {
+				throw new OpenShiftException("Invalid empty url");
+			}
+			if (href.startsWith(HTTP)) {
+				return new URL(href);
+			}
+			if (href.startsWith(SERVICE_PATH)) {
+				return new URL(baseUrl + href);
+			}
+			if (href.charAt(0) == SLASH) {
+				href = href.substring(1, href.length());
+			}
+			return new URL(getServiceUrl() + href);
+		} catch (MalformedURLException e) {
+			throw new OpenShiftException(e, e.getMessage());
 		}
-		return getServiceUrl() + href;
 	}
 
-	private void validateParameters(RequestParameter[] parameters, Link link)
-			throws OpenShiftRequestException {
+	private void validateParameters(RequestParameter[] parameters, Link link) throws OpenShiftRequestException {
 		if (link.getRequiredParams() != null) {
 			for (LinkParameter requiredParameter : link.getRequiredParams()) {
 				validateRequiredParameter(requiredParameter, parameters, link);
@@ -183,18 +219,13 @@ public class RestService implements IRestService {
 		}
 	}
 
-	private void validateRequiredParameter(LinkParameter linkParameter, RequestParameter[] parameters, Link link)
-			throws OpenShiftRequestException {
+	private void validateRequiredParameter(LinkParameter linkParameter, RequestParameter[] parameters, Link link) throws OpenShiftRequestException {
 		RequestParameter requestParameter = getRequestParameter(linkParameter.getName(), parameters);
 		if (requestParameter == null) {
-			throw new OpenShiftRequestException(
-					"Requesting {0}: required request parameter \"{1}\" is missing", link.getHref(),
-					linkParameter.getName());
+			throw new OpenShiftRequestException("Requesting {0}: required request parameter \"{1}\" is missing", link.getHref(), linkParameter.getName());
 		}
-
 		if (isEmptyString(linkParameter, requestParameter.getValue())) {
-			throw new OpenShiftRequestException("Requesting {0}: required request parameter \"{1}\" is empty",
-					link.getHref(), linkParameter.getName());
+			throw new OpenShiftRequestException("Requesting {0}: required request parameter \"{1}\" is empty", link.getHref(), linkParameter.getName());
 		}
 		// TODO: check valid options (still reported in a very incosistent way)
 	}
@@ -210,7 +241,7 @@ public class RestService implements IRestService {
 		}
 		return null;
 	}
-	
+
 	private void validateOptionalParameters(LinkParameter optionalParameter, Link link) {
 		// TODO: implement
 	}
