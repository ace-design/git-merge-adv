diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict10/left.java b/java_case_studies/reference_repos/openshift-java-client/conflict10/right.java
index adf12b9..53eb9eb 100644
--- a/java_case_studies/reference_repos/openshift-java-client/conflict10/left.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict10/right.java
@@ -10,14 +10,12 @@
  ******************************************************************************/
 package com.openshift.internal.client.httpclient;
 
-import java.io.IOException;
-import java.io.OutputStream;
+import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
-import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
 
 import com.openshift.client.IHttpClient;
-import com.openshift.internal.client.RequestParameter;
-import com.openshift.internal.client.utils.StringUtils;
 
 /**
  * @author Andre Dietisheim
@@ -25,52 +23,38 @@ import com.openshift.internal.client.utils.StringUtils;
 public class FormUrlEncodedMediaType implements IMediaType {
 
 	private static final String UTF8 = "UTF-8";
-	private static final char ARRAY_START = '[';
-	private static final char ARRAY_STOP = ']';
 
-	@Override
 	public String getType() {
 		return IHttpClient.MEDIATYPE_APPLICATION_FORMURLENCODED;
 	}
 
-	@Override
-	public void write(RequestParameter[] parameters, OutputStream out) throws IOException {
+	public String encodeParameters(Map<String, Object> parameters) throws EncodingException {
+        try {
+            return toUrlEncoded(parameters);
+        } catch (UnsupportedEncodingException e) {
+            throw new EncodingException(e);
+        }
+    }
+
+	private String toUrlEncoded(Map<String, Object> parameters) throws UnsupportedEncodingException {
 		if (parameters == null
-				|| parameters.length == 0) {
-			return;
+				|| parameters.isEmpty()) {
+			return null;
 		}
-		for (RequestParameter parameter : parameters) {
-			parameter.writeTo(out, this);
-			out.write(IHttpClient.AMPERSAND);
+		StringBuilder builder = new StringBuilder();
+		for (Entry<String, Object> entry : parameters.entrySet()) {
+			append(entry.getKey(), URLEncoder.encode(String.valueOf(entry.getValue()), UTF8), builder);
 		}
+		return builder.toString();
 	}
 
-	@Override
-	public void write(String name, String value, OutputStream out) throws IOException {
-		out.write(name.getBytes());
-		out.write(IHttpClient.EQUALS);
-		out.write(URLEncoder.encode(value, UTF8).getBytes());
-	}
-
-	@Override
-	public void write(String name, List<String> values, OutputStream out) throws IOException {
-		/**
-		 * <name>[]=<value>&<name>[]=<value>
-		 */
-		boolean firstValueWritten = false;
-		for (String value : values) {
-			if (StringUtils.isEmpty(value)) {
-				continue;
-			}
-			if (firstValueWritten) {
-				out.write(IHttpClient.AMPERSAND);
-			}
-			out.write(name.getBytes());
-			out.write(ARRAY_START);
-			out.write(ARRAY_STOP);
-			out.write(IHttpClient.EQUALS);
-			out.write(URLEncoder.encode(value, UTF8).getBytes());
-			firstValueWritten = true;
+	private void append(String name, Object value, StringBuilder builder) {
+		if (builder.length() > 0) {
+			builder.append(IHttpClient.AMPERSAND);
 		}
+		builder.append(name)
+				.append(IHttpClient.EQUALS)
+				.append(value.toString());
 	}
+
 }
