diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict10/base.java b/java_case_studies/reference_repos/openshift-java-client/conflict10/left.java
index bbf7172..adf12b9 100644
--- a/java_case_studies/reference_repos/openshift-java-client/conflict10/base.java
+++ b/java_case_studies/reference_repos/openshift-java-client/conflict10/left.java
@@ -10,12 +10,14 @@
  ******************************************************************************/
 package com.openshift.internal.client.httpclient;
 
-import java.io.UnsupportedEncodingException;
+import java.io.IOException;
+import java.io.OutputStream;
 import java.net.URLEncoder;
-import java.util.Map;
-import java.util.Map.Entry;
+import java.util.List;
 
 import com.openshift.client.IHttpClient;
+import com.openshift.internal.client.RequestParameter;
+import com.openshift.internal.client.utils.StringUtils;
 
 /**
  * @author Andre Dietisheim
@@ -23,34 +25,52 @@ import com.openshift.client.IHttpClient;
 public class FormUrlEncodedMediaType implements IMediaType {
 
 	private static final String UTF8 = "UTF-8";
+	private static final char ARRAY_START = '[';
+	private static final char ARRAY_STOP = ']';
 
+	@Override
 	public String getType() {
 		return IHttpClient.MEDIATYPE_APPLICATION_FORMURLENCODED;
 	}
 
-	public String encodeParameters(Map<String, Object> parameters) throws UnsupportedEncodingException {
-		return toUrlEncoded(parameters);
-	}
-
-	private String toUrlEncoded(Map<String, Object> parameters) throws UnsupportedEncodingException {
+	@Override
+	public void write(RequestParameter[] parameters, OutputStream out) throws IOException {
 		if (parameters == null
-				|| parameters.isEmpty()) {
-			return null;
+				|| parameters.length == 0) {
+			return;
 		}
-		StringBuilder builder = new StringBuilder();
-		for (Entry<String, Object> entry : parameters.entrySet()) {
-			append(entry.getKey(), URLEncoder.encode(String.valueOf(entry.getValue()), UTF8), builder);
+		for (RequestParameter parameter : parameters) {
+			parameter.writeTo(out, this);
+			out.write(IHttpClient.AMPERSAND);
 		}
-		return builder.toString();
 	}
 
-	private void append(String name, Object value, StringBuilder builder) {
-		if (builder.length() > 0) {
-			builder.append(IHttpClient.AMPERSAND);
-		}
-		builder.append(name)
-				.append(IHttpClient.EQUALS)
-				.append(value.toString());
+	@Override
+	public void write(String name, String value, OutputStream out) throws IOException {
+		out.write(name.getBytes());
+		out.write(IHttpClient.EQUALS);
+		out.write(URLEncoder.encode(value, UTF8).getBytes());
 	}
 
+	@Override
+	public void write(String name, List<String> values, OutputStream out) throws IOException {
+		/**
+		 * <name>[]=<value>&<name>[]=<value>
+		 */
+		boolean firstValueWritten = false;
+		for (String value : values) {
+			if (StringUtils.isEmpty(value)) {
+				continue;
+			}
+			if (firstValueWritten) {
+				out.write(IHttpClient.AMPERSAND);
+			}
+			out.write(name.getBytes());
+			out.write(ARRAY_START);
+			out.write(ARRAY_STOP);
+			out.write(IHttpClient.EQUALS);
+			out.write(URLEncoder.encode(value, UTF8).getBytes());
+			firstValueWritten = true;
+		}
+	}
 }
