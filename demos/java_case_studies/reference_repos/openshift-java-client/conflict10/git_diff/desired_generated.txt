diff --git a/java_case_studies/reference_repos/openshift-java-client/conflict10/desired.java b/java_case_studies/demo_results/MethodUnion/openshift-java-client-conflict10.java
index 28bfddc..a04af36 100644
--- a/java_case_studies/reference_repos/openshift-java-client/conflict10/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/openshift-java-client-conflict10.java
@@ -9,31 +9,37 @@
  * Red Hat, Inc. - initial API and implementation 
  ******************************************************************************/
 package com.openshift.internal.client.httpclient;
-
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URLEncoder;
-import java.text.MessageFormat;
 import java.util.List;
-import java.util.Map;
-
 import com.openshift.client.IHttpClient;
 import com.openshift.internal.client.RequestParameter;
 import com.openshift.internal.client.utils.StringUtils;
+import java.io.UnsupportedEncodingException;
+import java.util.Map;
+import java.util.Map.Entry;
 
-/**
- * @author Andre Dietisheim
- */
-public class FormUrlEncodedMediaType implements IMediaType {
+public class FormUrlEncodedMediaType implements IMediaType{
 
-	private static final String UTF8 = "UTF-8";
+    private static final String UTF8 = "UTF-8";,
+    private static final char ARRAY_START = '[';,
+    private static final char ARRAY_STOP = ']';,
 
-	@Override
+    @Override
 	public String getType() {
 		return IHttpClient.MEDIATYPE_APPLICATION_FORMURLENCODED;
 	}
 
-	@Override
+    public String encodeParameters(Map<String, Object> parameters) throws EncodingException {
+        try {
+            return toUrlEncoded(parameters);
+        } catch (UnsupportedEncodingException e) {
+            throw new EncodingException(e);
+        }
+    }
+
+    @Override
 	public void write(RequestParameter[] parameters, OutputStream out) throws IOException {
 		if (parameters == null
 				|| parameters.length == 0) {
@@ -45,18 +51,35 @@ public class FormUrlEncodedMediaType implements IMediaType {
 		}
 	}
 
-	@Override
-	public void write(String name, String value, OutputStream out) throws IOException {
-		writeSimpleParameterName(name, out);
-		out.write(URLEncoder.encode(value, UTF8).getBytes());
+    private String toUrlEncoded(Map<String, Object> parameters) throws UnsupportedEncodingException {
+		if (parameters == null
+				|| parameters.isEmpty()) {
+			return null;
+		}
+		StringBuilder builder = new StringBuilder();
+		for (Entry<String, Object> entry : parameters.entrySet()) {
+			append(entry.getKey(), URLEncoder.encode(String.valueOf(entry.getValue()), UTF8), builder);
+		}
+		return builder.toString();
 	}
 
-	private void writeSimpleParameterName(String name, OutputStream out) throws IOException {
+    @Override
+	public void write(String name, String value, OutputStream out) throws IOException {
 		out.write(name.getBytes());
 		out.write(IHttpClient.EQUALS);
+		out.write(URLEncoder.encode(value, UTF8).getBytes());
+	}
+
+    private void append(String name, Object value, StringBuilder builder) {
+		if (builder.length() > 0) {
+			builder.append(IHttpClient.AMPERSAND);
+		}
+		builder.append(name)
+				.append(IHttpClient.EQUALS)
+				.append(value.toString());
 	}
 
-	@Override
+    @Override
 	public void write(String name, List<String> values, OutputStream out) throws IOException {
 		/**
 		 * <name>[]=<value>&<name>[]=<value>
@@ -69,33 +92,13 @@ public class FormUrlEncodedMediaType implements IMediaType {
 			if (firstValueWritten) {
 				out.write(IHttpClient.AMPERSAND);
 			}
-			out.write(
-					MessageFormat.format("{0}[]={1}",
-							name,
-							URLEncoder.encode(value, UTF8).getBytes())
-							.getBytes());
+			out.write(name.getBytes());
+			out.write(ARRAY_START);
+			out.write(ARRAY_STOP);
+			out.write(IHttpClient.EQUALS);
+			out.write(URLEncoder.encode(value, UTF8).getBytes());
 			firstValueWritten = true;
 		}
 	}
 
-	@Override
-	public void write(String name, Map<String, String> values, OutputStream out) throws IOException {
-		/**
-		 * <name>[][<key>]=<value>&<name>[<key>]=<value>
-		 */
-		boolean firstValueWritten = false;
-		for (Map.Entry<String, String> entry: values.entrySet()) {
-			if (StringUtils.isEmpty(entry.getValue())) {
-				continue;
-			}
-			if (firstValueWritten) {
-				out.write(IHttpClient.AMPERSAND);
-			}
-			out.write(MessageFormat.format("{0}[][{1}]={2}",
-					name,
-					entry.getKey(),
-					URLEncoder.encode(entry.getValue(), UTF8).getBytes()).getBytes());
-			firstValueWritten = true;
-		}
-	}
-}
+}
\ No newline at end of file
