diff --git a/java_case_studies/reference_repos/antlr4/importC2/desired.java b/java_case_studies/reference_repos/antlr4/importC2/spork_result.java
index 0db7b24..d6fb1ce 100644
--- a/java_case_studies/reference_repos/antlr4/importC2/desired.java
+++ b/java_case_studies/reference_repos/antlr4/importC2/spork_result.java
@@ -27,10 +27,13 @@
  *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.automata;
 
-
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 import org.antlr.runtime.RecognitionException;
 import org.antlr.runtime.Token;
 import org.antlr.runtime.tree.CommonTreeNodeStream;
@@ -87,15 +90,11 @@ import org.antlr.v4.tool.ast.PredAST;
 import org.antlr.v4.tool.ast.QuantifierAST;
 import org.antlr.v4.tool.ast.TerminalAST;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
 
-/** ATN construction routines triggered by ATNBuilder.g.
+/**
+ * ATN construction routines triggered by ATNBuilder.g.
  *
- *  No side-effects. It builds an {@link ATN} object and returns it.
+ * No side-effects. It builds an {@link ATN} object and returns it.
  */
 public class ParserATNFactory implements ATNFactory {
 	@NotNull
@@ -108,20 +107,17 @@ public class ParserATNFactory implements ATNFactory {
 
 	public int currentOuterAlt;
 
-	protected final List<Triple<Rule, ATNState, ATNState>> preventEpsilonClosureBlocks =
-		new ArrayList<Triple<Rule, ATNState, ATNState>>();
+	protected final List<Triple<Rule, ATNState, ATNState>> preventEpsilonClosureBlocks = new ArrayList<Triple<Rule, ATNState, ATNState>>();
 
-	protected final List<Triple<Rule, ATNState, ATNState>> preventEpsilonOptionalBlocks =
-		new ArrayList<Triple<Rule, ATNState, ATNState>>();
+	protected final List<Triple<Rule, ATNState, ATNState>> preventEpsilonOptionalBlocks = new ArrayList<Triple<Rule, ATNState, ATNState>>();
 
-	public ParserATNFactory(@NotNull Grammar g) {
+	public ParserATNFactory(@NotNull
+	Grammar g) {
 		if (g == null) {
 			throw new NullPointerException("g");
 		}
-
 		this.g = g;
-
-		ATNType atnType = g instanceof LexerGrammar ? ATNType.LEXER : ATNType.PARSER;
+		ATNType atnType = (g instanceof LexerGrammar) ? ATNType.LEXER : ATNType.PARSER;
 		int maxTokenType = g.getMaxTokenType();
 		this.atn = new ATN(atnType, maxTokenType);
 	}
@@ -130,20 +126,17 @@ public class ParserATNFactory implements ATNFactory {
 	public ATN createATN() {
 		_createATN(g.rules.values());
 		assert atn.maxTokenType == g.getMaxTokenType();
-        addRuleFollowLinks();
+		addRuleFollowLinks();
 		addEOFTransitionToStartRules();
 		ATNOptimizer.optimize(g, atn);
-
 		for (Triple<Rule, ATNState, ATNState> pair : preventEpsilonClosureBlocks) {
 			LL1Analyzer analyzer = new LL1Analyzer(atn);
 			if (analyzer.LOOK(pair.b, pair.c, null).contains(org.antlr.v4.runtime.Token.EPSILON)) {
-				ErrorType errorType = pair.a instanceof LeftRecursiveRule ? ErrorType.EPSILON_LR_FOLLOW : ErrorType.EPSILON_CLOSURE;
-				g.tool.errMgr.grammarError(errorType, g.fileName, ((GrammarAST)pair.a.ast.getChild(0)).getToken(), pair.a.name);
+				ErrorType errorType = (pair.a instanceof LeftRecursiveRule) ? ErrorType.EPSILON_LR_FOLLOW : ErrorType.EPSILON_CLOSURE;
+				g.tool.errMgr.grammarError(errorType, g.fileName, ((GrammarAST) (pair.a.ast.getChild(0))).getToken(), pair.a.name);
 			}
 		}
-
-		optionalCheck:
-		for (Triple<Rule, ATNState, ATNState> pair : preventEpsilonOptionalBlocks) {
+		optionalCheck : for (Triple<Rule, ATNState, ATNState> pair : preventEpsilonOptionalBlocks) {
 			int bypassCount = 0;
 			for (int i = 0; i < pair.b.getNumberOfTransitions(); i++) {
 				ATNState startState = pair.b.transition(i).target;
@@ -151,37 +144,32 @@ public class ParserATNFactory implements ATNFactory {
 					bypassCount++;
 					continue;
 				}
-
 				LL1Analyzer analyzer = new LL1Analyzer(atn);
 				if (analyzer.LOOK(startState, pair.c, null).contains(org.antlr.v4.runtime.Token.EPSILON)) {
-					g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL, g.fileName, ((GrammarAST)pair.a.ast.getChild(0)).getToken(), pair.a.name);
+					g.tool.errMgr.grammarError(ErrorType.EPSILON_OPTIONAL, g.fileName, ((GrammarAST) (pair.a.ast.getChild(0))).getToken(), pair.a.name);
 					continue optionalCheck;
 				}
 			}
-
 			if (bypassCount != 1) {
 				throw new UnsupportedOperationException("Expected optional block with exactly 1 bypass alternative.");
 			}
 		}
-
 		return atn;
 	}
 
 	protected void _createATN(Collection<Rule> rules) {
 		createRuleStartAndStopATNStates();
-
 		GrammarASTAdaptor adaptor = new GrammarASTAdaptor();
 		for (Rule r : rules) {
 			// find rule's block
-			GrammarAST blk = (GrammarAST)r.ast.getFirstChildWithType(ANTLRParser.BLOCK);
-			CommonTreeNodeStream nodes = new CommonTreeNodeStream(adaptor,blk);
-			ATNBuilder b = new ATNBuilder(nodes,this);
+			GrammarAST blk = ((GrammarAST) (r.ast.getFirstChildWithType(ANTLRParser.BLOCK)));
+			CommonTreeNodeStream nodes = new CommonTreeNodeStream(adaptor, blk);
+			ATNBuilder b = new ATNBuilder(nodes, this);
 			try {
 				setCurrentRuleName(r.name);
 				Handle h = b.ruleBlock(null);
 				rule(r.ast, r.name, h);
-			}
-			catch (RecognitionException re) {
+			} catch (RecognitionException re) {
 				ErrorManager.fatalInternalError("bad grammar AST structure", re);
 			}
 		}
@@ -206,8 +194,8 @@ public class ParserATNFactory implements ATNFactory {
 		RuleStopState stop = atn.ruleToStopState[r.index];
 		epsilon(blk.right, stop);
 		Handle h = new Handle(start, stop);
-//		ATNPrinter ser = new ATNPrinter(g, h.left);
-//		System.out.println(ruleAST.toStringTree()+":\n"+ser.asString());
+	//		ATNPrinter ser = new ATNPrinter(g, h.left);
+	//		System.out.println(ruleAST.toStringTree()+":\n"+ser.asString());
 		ruleAST.atnState = start;
 		return h;
 	}
@@ -224,9 +212,9 @@ public class ParserATNFactory implements ATNFactory {
 	}
 
 	/** From set build single edge graph {@code o->o-set->o}.  To conform to
-     *  what an alt block looks like, must have extra state on left.
+	    *  what an alt block looks like, must have extra state on left.
 	 *  This also handles {@code ~A}, converted to {@code ~{A}} set.
-     */
+	    */
 	@Override
 	public Handle set(GrammarAST associatedAST, List<GrammarAST> terminals, boolean invert) {
 		ATNState left = newState(associatedAST);
@@ -294,20 +282,19 @@ public class ParserATNFactory implements ATNFactory {
 
 	public Handle _ruleRef(GrammarAST node) {
 		Rule r = g.getRule(node.getText());
-		if ( r==null ) {
-			g.tool.errMgr.toolError(ErrorType.INTERNAL_ERROR, "Rule "+node.getText()+" undefined");
+		if (r == null) {
+			g.tool.errMgr.toolError(ErrorType.INTERNAL_ERROR, ("Rule " + node.getText()) + " undefined");
 			return null;
 		}
 		RuleStartState start = atn.ruleToStartState[r.index];
 		ATNState left = newState(node);
 		ATNState right = newState(node);
 		int precedence = 0;
-		if (((GrammarASTWithOptions)node).getOptionString(LeftRecursiveRuleTransformer.PRECEDENCE_OPTION_NAME) != null) {
-			precedence = Integer.parseInt(((GrammarASTWithOptions)node).getOptionString(LeftRecursiveRuleTransformer.PRECEDENCE_OPTION_NAME));
+		if (((GrammarASTWithOptions) (node)).getOptionString(LeftRecursiveRuleTransformer.PRECEDENCE_OPTION_NAME) != null) {
+			precedence = Integer.parseInt(((GrammarASTWithOptions) (node)).getOptionString(LeftRecursiveRuleTransformer.PRECEDENCE_OPTION_NAME));
 		}
 		RuleTransition call = new RuleTransition(start, r.index, precedence, right);
 		left.addTransition(call);
-
 		node.atnState = left;
 		return new Handle(left, right);
 	}
@@ -315,7 +302,7 @@ public class ParserATNFactory implements ATNFactory {
 	public void addFollowLink(int ruleIndex, ATNState right) {
 		// add follow edge from end of invoked rule
 		RuleStopState stop = atn.ruleToStopState[ruleIndex];
-//        System.out.println("add follow link from "+ruleIndex+" to "+right);
+	//        System.out.println("add follow link from "+ruleIndex+" to "+right);
 		epsilon(stop, right);
 	}
 
@@ -335,20 +322,17 @@ public class ParserATNFactory implements ATNFactory {
 	 */
 	@Override
 	public Handle sempred(PredAST pred) {
-		//System.out.println("sempred: "+ pred);
+		// System.out.println("sempred: "+ pred);
 		ATNState left = newState(pred);
 		ATNState right = newState(pred);
-
 		AbstractPredicateTransition p;
 		if (pred.getOptionString(LeftRecursiveRuleTransformer.PRECEDENCE_OPTION_NAME) != null) {
 			int precedence = Integer.parseInt(pred.getOptionString(LeftRecursiveRuleTransformer.PRECEDENCE_OPTION_NAME));
 			p = new PrecedencePredicateTransition(right, precedence);
-		}
-		else {
+		} else {
 			boolean isCtxDependent = UseDefAnalyzer.actionIsContextDependent(pred);
 			p = new PredicateTransition(right, currentRule.index, g.sempreds.get(pred), isCtxDependent);
 		}
-
 		left.addTransition(p);
 		pred.atnState = left;
 		return new Handle(left, right);
@@ -400,17 +384,19 @@ public class ParserATNFactory implements ATNFactory {
 	 */
 	@Override
 	public Handle block(BlockAST blkAST, GrammarAST ebnfRoot, List<Handle> alts) {
-		if ( ebnfRoot==null ) {
-			if ( alts.size()==1 ) {
+		if (ebnfRoot == null) {
+			if (alts.size() == 1) {
 				Handle h = alts.get(0);
 				blkAST.atnState = h.left;
 				return h;
 			}
 			BlockStartState start = newState(BasicBlockStartState.class, blkAST);
-			if ( alts.size()>1 ) atn.defineDecisionState(start);
+			if (alts.size() > 1) {
+				atn.defineDecisionState(start);
+			}
 			return makeBlock(start, blkAST, alts);
 		}
-		switch ( ebnfRoot.getType() ) {
+		switch (ebnfRoot.getType()) {
 			case ANTLRParser.OPTIONAL :
 				BlockStartState start = newState(BasicBlockStartState.class, blkAST);
 				atn.defineDecisionState(start);
@@ -418,12 +404,16 @@ public class ParserATNFactory implements ATNFactory {
 				return optional(ebnfRoot, h);
 			case ANTLRParser.CLOSURE :
 				BlockStartState star = newState(StarBlockStartState.class, ebnfRoot);
-				if ( alts.size()>1 ) atn.defineDecisionState(star);
+				if (alts.size() > 1) {
+					atn.defineDecisionState(star);
+				}
 				h = makeBlock(star, blkAST, alts);
 				return star(ebnfRoot, h);
 			case ANTLRParser.POSITIVE_CLOSURE :
 				PlusBlockStartState plus = newState(PlusBlockStartState.class, ebnfRoot);
-				if ( alts.size()>1 ) atn.defineDecisionState(plus);
+				if (alts.size() > 1) {
+					atn.defineDecisionState(plus);
+				}
 				h = makeBlock(plus, blkAST, alts);
 				return plus(ebnfRoot, h);
 		}
@@ -446,7 +436,6 @@ public class ParserATNFactory implements ATNFactory {
 //		FASerializer ser = new FASerializer(g, h.left);
 //		System.out.println(blkAST.toStringTree()+":\n"+ser);
 		blkAST.atnState = start;
-
 		return h;
 	}
 
@@ -457,31 +446,36 @@ public class ParserATNFactory implements ATNFactory {
 	}
 
 	@NotNull
-	public Handle elemList(@NotNull List<Handle> els) {
+	public Handle elemList(@NotNull
+	List<Handle> els) {
 		int n = els.size();
-		for (int i = 0; i < n - 1; i++) {	// hook up elements (visit all but last)
+		for (int i = 0; i < (n - 1); i++) {
+			// hook up elements (visit all but last)
 			Handle el = els.get(i);
 			// if el is of form o-x->o for x in {rule, action, pred, token, ...}
 			// and not last in alt
-            Transition tr = null;
-            if ( el.left.getNumberOfTransitions()==1 ) tr = el.left.transition(0);
-            boolean isRuleTrans = tr instanceof RuleTransition;
-            if ( el.left.getStateType() == ATNState.BASIC &&
-				el.right.getStateType()== ATNState.BASIC &&
-				tr!=null && (isRuleTrans && ((RuleTransition)tr).followState == el.right || tr.target == el.right) )
-			{
-				// we can avoid epsilon edge to next el
-				if ( isRuleTrans ) ((RuleTransition)tr).followState = els.get(i+1).left;
-                else tr.target = els.get(i+1).left;
-				atn.removeState(el.right); // we skipped over this state
+			Transition tr = null;
+			if (el.left.getNumberOfTransitions() == 1) {
+				tr = el.left.transition(0);
 			}
-			else { // need epsilon if previous block's right end node is complicated
-				epsilon(el.right, els.get(i+1).left);
+			boolean isRuleTrans = tr instanceof RuleTransition;
+			if ((((el.left.getStateType() == ATNState.BASIC) && (el.right.getStateType() == ATNState.BASIC)) && (tr != null)) && ((isRuleTrans && (((RuleTransition) (tr)).followState == el.right)) || (tr.target == el.right))) {
+				// we can avoid epsilon edge to next el
+				if (isRuleTrans) {
+					((RuleTransition) (tr)).followState = els.get(i + 1).left;
+				} else {
+					tr.target = els.get(i + 1).left;
+				}
+				atn.removeState(el.right);// we skipped over this state
+
+			} else {
+				// need epsilon if previous block's right end node is complicated
+				epsilon(el.right, els.get(i + 1).left);
 			}
 		}
 		Handle first = els.get(0);
-		Handle last = els.get(n -1);
-		if ( first==null || last==null ) {
+		Handle last = els.get(n - 1);
+		if ((first == null) || (last == null)) {
 			g.tool.errMgr.toolError(ErrorType.INTERNAL_ERROR, "element list has first|last == null");
 		}
 		return new Handle(first.left, last.right);
@@ -501,15 +495,15 @@ public class ParserATNFactory implements ATNFactory {
 	 */
 	@NotNull
 	@Override
-	public Handle optional(@NotNull GrammarAST optAST, @NotNull Handle blk) {
-		BlockStartState blkStart = (BlockStartState)blk.left;
+	public Handle optional(@NotNull
+	GrammarAST optAST, @NotNull
+	Handle blk) {
+		BlockStartState blkStart = ((BlockStartState) (blk.left));
 		ATNState blkEnd = blk.right;
 		preventEpsilonOptionalBlocks.add(new Triple<Rule, ATNState, ATNState>(currentRule, blkStart, blkEnd));
-
-		boolean greedy = ((QuantifierAST)optAST).isGreedy();
+		boolean greedy = ((QuantifierAST) (optAST)).isGreedy();
 		blkStart.nonGreedy = !greedy;
 		epsilon(blkStart, blk.right, !greedy);
-
 		optAST.atnState = blk.left;
 		return blk;
 	}
@@ -528,36 +522,37 @@ public class ParserATNFactory implements ATNFactory {
 	 */
 	@NotNull
 	@Override
-	public Handle plus(@NotNull GrammarAST plusAST, @NotNull Handle blk) {
-		PlusBlockStartState blkStart = (PlusBlockStartState)blk.left;
-		BlockEndState blkEnd = (BlockEndState)blk.right;
+	public Handle plus(@NotNull
+	GrammarAST plusAST, @NotNull
+	Handle blk) {
+		PlusBlockStartState blkStart = ((PlusBlockStartState) (blk.left));
+		BlockEndState blkEnd = ((BlockEndState) (blk.right));
 		preventEpsilonClosureBlocks.add(new Triple<Rule, ATNState, ATNState>(currentRule, blkStart, blkEnd));
-
 		PlusLoopbackState loop = newState(PlusLoopbackState.class, plusAST);
-		loop.nonGreedy = !((QuantifierAST)plusAST).isGreedy();
+		loop.nonGreedy = !((QuantifierAST) (plusAST)).isGreedy();
 		atn.defineDecisionState(loop);
 		LoopEndState end = newState(LoopEndState.class, plusAST);
 		blkStart.loopBackState = loop;
 		end.loopBackState = loop;
-
 		plusAST.atnState = blkStart;
-		epsilon(blkEnd, loop);		// blk can see loop back
+		epsilon(blkEnd, loop);// blk can see loop back
 
-		BlockAST blkAST = (BlockAST)plusAST.getChild(0);
-		if ( ((QuantifierAST)plusAST).isGreedy() ) {
+		BlockAST blkAST = ((BlockAST) (plusAST.getChild(0)));
+		if (((QuantifierAST) (plusAST)).isGreedy()) {
 			if (expectNonGreedy(blkAST)) {
 				g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK, g.fileName, plusAST.getToken(), plusAST.getToken().getText());
 			}
+			epsilon(loop, blkStart);// loop back to start
 
-			epsilon(loop, blkStart);	// loop back to start
-			epsilon(loop, end);			// or exit
-		}
-		else {
+			epsilon(loop, end);// or exit
+
+		} else {
 			// if not greedy, priority to exit branch; make it first
-			epsilon(loop, end);			// exit
-			epsilon(loop, blkStart);	// loop back to start
-		}
+			epsilon(loop, end);// exit
+
+			epsilon(loop, blkStart);// loop back to start
 
+		}
 		return new Handle(blkStart, end);
 	}
 
@@ -578,37 +573,41 @@ public class ParserATNFactory implements ATNFactory {
 	 */
 	@NotNull
 	@Override
-	public Handle star(@NotNull GrammarAST starAST, @NotNull Handle elem) {
-		StarBlockStartState blkStart = (StarBlockStartState)elem.left;
-		BlockEndState blkEnd = (BlockEndState)elem.right;
+	public Handle star(@NotNull
+	GrammarAST starAST, @NotNull
+	Handle elem) {
+		StarBlockStartState blkStart = ((StarBlockStartState) (elem.left));
+		BlockEndState blkEnd = ((BlockEndState) (elem.right));
 		preventEpsilonClosureBlocks.add(new Triple<Rule, ATNState, ATNState>(currentRule, blkStart, blkEnd));
-
 		StarLoopEntryState entry = newState(StarLoopEntryState.class, starAST);
-		entry.nonGreedy = !((QuantifierAST)starAST).isGreedy();
+		entry.nonGreedy = !((QuantifierAST) (starAST)).isGreedy();
 		atn.defineDecisionState(entry);
 		LoopEndState end = newState(LoopEndState.class, starAST);
 		StarLoopbackState loop = newState(StarLoopbackState.class, starAST);
 		entry.loopBackState = loop;
 		end.loopBackState = loop;
-
-		BlockAST blkAST = (BlockAST)starAST.getChild(0);
-		if ( ((QuantifierAST)starAST).isGreedy() ) {
+		BlockAST blkAST = ((BlockAST) (starAST.getChild(0)));
+		if (((QuantifierAST) (starAST)).isGreedy()) {
 			if (expectNonGreedy(blkAST)) {
 				g.tool.errMgr.grammarError(ErrorType.EXPECTED_NON_GREEDY_WILDCARD_BLOCK, g.fileName, starAST.getToken(), starAST.getToken().getText());
 			}
+			epsilon(entry, blkStart);// loop enter edge (alt 1)
 
-			epsilon(entry, blkStart);	// loop enter edge (alt 1)
-			epsilon(entry, end);		// bypass loop edge (alt 2)
-		}
-		else {
+			epsilon(entry, end);// bypass loop edge (alt 2)
+
+		} else {
 			// if not greedy, priority to exit branch; make it first
-			epsilon(entry, end);		// bypass loop edge (alt 1)
-			epsilon(entry, blkStart);	// loop enter edge (alt 2)
+			epsilon(entry, end);// bypass loop edge (alt 1)
+
+			epsilon(entry, blkStart);// loop enter edge (alt 2)
+
 		}
-		epsilon(blkEnd, loop);		// block end hits loop back
-		epsilon(loop, entry);		// loop back to entry/exit decision
+		epsilon(blkEnd, loop);// block end hits loop back
+
+		epsilon(loop, entry);// loop back to entry/exit decision
+
+		starAST.atnState = entry;// decision is to enter/exit; blk is its own decision
 
-		starAST.atnState = entry;	// decision is to enter/exit; blk is its own decision
 		return new Handle(entry, end);
 	}
 
@@ -627,9 +626,10 @@ public class ParserATNFactory implements ATNFactory {
 		epsilon(a, b, false);
 	}
 
-	protected void epsilon(ATNState a, @NotNull ATNState b, boolean prepend) {
-		if ( a!=null ) {
-			int index = prepend ? 0 : a.getNumberOfTransitions();
+	protected void epsilon(ATNState a, @NotNull
+	ATNState b, boolean prepend) {
+		if (a != null) {
+			int index = (prepend) ? 0 : a.getNumberOfTransitions();
 			a.addTransition(index, new EpsilonTransition(b));
 		}
 	}
@@ -652,26 +652,23 @@ public class ParserATNFactory implements ATNFactory {
 		}
 	}
 
-    public void addRuleFollowLinks() {
-        for (ATNState p : atn.states) {
-            if ( p!=null &&
-                 p.getStateType() == ATNState.BASIC && p.getNumberOfTransitions()==1 &&
-                 p.transition(0) instanceof RuleTransition )
-            {
-                RuleTransition rt = (RuleTransition) p.transition(0);
-                addFollowLink(rt.ruleIndex, rt.followState);
-            }
-        }
-    }
+	public void addRuleFollowLinks() {
+		for (ATNState p : atn.states) {
+			if ((((p != null) && (p.getStateType() == ATNState.BASIC)) && (p.getNumberOfTransitions() == 1)) && (p.transition(0) instanceof RuleTransition)) {
+				RuleTransition rt = ((RuleTransition) (p.transition(0)));
+				addFollowLink(rt.ruleIndex, rt.followState);
+			}
+		}
+	}
 
 	/** Add an EOF transition to any rule end ATNState that points to nothing
-     *  (i.e., for all those rules not invoked by another rule).  These
-     *  are start symbols then.
+	    *  (i.e., for all those rules not invoked by another rule).  These
+	    *  are start symbols then.
 	 *
 	 *  Return the number of grammar entry points; i.e., how many rules are
 	 *  not invoked by another rule (they can only be invoked from outside).
 	 *  These are the start rules.
-     */
+	    */
 	public int addEOFTransitionToStartRules() {
 		int n = 0;
 		ATNState eofTarget = newState(null); // one unique EOF target for all rules
@@ -696,35 +693,39 @@ public class ParserATNFactory implements ATNFactory {
 	}
 
 	@NotNull
-	public <T extends ATNState> T newState(@NotNull Class<T> nodeType, GrammarAST node) {
+	public <T extends ATNState> T newState(@NotNull
+	Class<T> nodeType, GrammarAST node) {
 		Exception cause;
 		try {
 			Constructor<T> ctor = nodeType.getConstructor();
 			T s = ctor.newInstance();
-			if ( currentRule==null ) s.setRuleIndex(-1);
-			else s.setRuleIndex(currentRule.index);
+			if (currentRule == null) {
+				s.setRuleIndex(-1);
+			} else {
+				s.setRuleIndex(currentRule.index);
+			}
 			atn.addState(s);
 			return s;
-		} catch (InstantiationException ex) {
+		} catch (java.lang.InstantiationException ex) {
 			cause = ex;
-		} catch (IllegalAccessException ex) {
+		} catch (java.lang.IllegalAccessException ex) {
 			cause = ex;
-		} catch (IllegalArgumentException ex) {
+		} catch (java.lang.IllegalArgumentException ex) {
 			cause = ex;
 		} catch (InvocationTargetException ex) {
 			cause = ex;
-		} catch (NoSuchMethodException ex) {
+		} catch (java.lang.NoSuchMethodException ex) {
 			cause = ex;
-		} catch (SecurityException ex) {
+		} catch (java.lang.SecurityException ex) {
 			cause = ex;
 		}
-
 		String message = String.format("Could not create %s of type %s.", ATNState.class.getName(), nodeType.getName());
 		throw new UnsupportedOperationException(message, cause);
 	}
 
 	@NotNull
-	public ATNState newState(@Nullable GrammarAST node) {
+	public ATNState newState(@Nullable
+	GrammarAST node) {
 		ATNState n = new BasicState();
 		n.setRuleIndex(currentRule.index);
 		atn.addState(n);
