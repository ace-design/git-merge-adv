diff --git a/java_case_studies/reference_repos/antlr4/importC6/desired.java b/java_case_studies/reference_repos/antlr4/importC6/spork_result.java
index 1bb1eaf..56bb307 100644
--- a/java_case_studies/reference_repos/antlr4/importC6/desired.java
+++ b/java_case_studies/reference_repos/antlr4/importC6/spork_result.java
@@ -26,9 +26,10 @@
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.automata;
 
+import java.util.ArrayList;
+import java.util.List;
 import org.antlr.v4.misc.Utils;
 import org.antlr.v4.parse.ANTLRParser;
 import org.antlr.v4.runtime.atn.ATN;
@@ -49,12 +50,12 @@ import org.antlr.v4.runtime.misc.IntervalSet;
 import org.antlr.v4.tool.Grammar;
 import org.antlr.v4.tool.Rule;
 
-import java.util.ArrayList;
-import java.util.List;
 
 public class ATNSerializer {
 	public Grammar g;
+
 	public ATN atn;
+
 	public List<IntervalSet> sets = new ArrayList<IntervalSet>();
 
 	public ATNSerializer(Grammar g, ATN atn) {
@@ -86,37 +87,44 @@ public class ATNSerializer {
 	public IntegerList serialize() {
 		IntegerList data = new IntegerList();
 		// convert grammar type to ATN const to avoid dependence on ANTLRParser
-		if ( g.getType()== ANTLRParser.LEXER ) data.add(ATN.LEXER);
-		else if ( g.getType()== ANTLRParser.PARSER ) data.add(ATN.PARSER);
-		else data.add(ATN.TREE_PARSER);
+		if (g.getType() == ANTLRParser.LEXER) {
+			data.add(ATN.LEXER);
+		} else if (g.getType() == ANTLRParser.PARSER) {
+			data.add(ATN.PARSER);
+		} else {
+			data.add(ATN.TREE_PARSER);
+		}
 		data.add(g.getMaxTokenType());
 		data.add(atn.states.size());
 		int nedges = 0;
 		// dump states, count edges and collect sets while doing so
 		for (ATNState s : atn.states) {
-			if ( s==null ) { // might be optimized away
+			if (s == null) {
+			// might be optimized away
 				data.add(ATNState.INVALID_TYPE);
 				continue;
 			}
 			data.add(s.getStateType());
 			data.add(s.ruleIndex);
-			if ( s.getStateType() == ATNState.LOOP_END ) data.add(((LoopEndState)s).loopBackStateNumber);
+			if (s.getStateType() == ATNState.LOOP_END) {
+				data.add(((LoopEndState) (s)).loopBackStateNumber);
+			}
 			nedges += s.getNumberOfTransitions();
-			for (int i=0; i<s.getNumberOfTransitions(); i++) {
+			for (int i = 0; i < s.getNumberOfTransitions(); i++) {
 				Transition t = s.transition(i);
 				int edgeType = Transition.serializationTypes.get(t.getClass());
-				if ( edgeType == Transition.SET || edgeType == Transition.NOT_SET ) {
-					SetTransition st = (SetTransition)t;
+				if ((edgeType == Transition.SET) || (edgeType == Transition.NOT_SET)) {
+					SetTransition st = ((SetTransition) (t));
 					sets.add(st.set);
 				}
 			}
 		}
 		int nrules = atn.ruleToStartState.length;
 		data.add(nrules);
-		for (int r=0; r<nrules; r++) {
+		for (int r = 0; r < nrules; r++) {
 			ATNState ruleStartState = atn.ruleToStartState[r];
 			data.add(ruleStartState.stateNumber);
-			if ( g.isLexer() ) {
+			if (g.isLexer()) {
 				data.add(atn.ruleToTokenType[r]);
 				String ruleName = g.rules.getKey(r);
 				Rule rule = g.getRule(ruleName);
@@ -125,7 +133,7 @@ public class ATNSerializer {
 		}
 		int nmodes = atn.modeToStartState.size();
 		data.add(nmodes);
-		if ( nmodes>0 ) {
+		if (nmodes > 0) {
 			for (ATNState modeStartState : atn.modeToStartState) {
 				data.add(modeStartState.stateNumber);
 			}
@@ -142,44 +150,45 @@ public class ATNSerializer {
 		data.add(nedges);
 		int setIndex = 0;
 		for (ATNState s : atn.states) {
-			if ( s==null ) continue; // might be optimized away
-			for (int i=0; i<s.getNumberOfTransitions(); i++) {
+			// might be optimized away
+			if (s == null) {
+				continue;
+			}
+			for (int i = 0; i < s.getNumberOfTransitions(); i++) {
 				Transition t = s.transition(i);
-
 				if (atn.states.get(t.target.stateNumber) == null) {
 					throw new IllegalStateException("Cannot serialize a transition to a removed state.");
 				}
-
 				int src = s.stateNumber;
 				int trg = t.target.stateNumber;
 				int edgeType = Transition.serializationTypes.get(t.getClass());
 				int arg1 = 0;
 				int arg2 = 0;
 				int arg3 = 0;
-				switch ( edgeType ) {
+				switch (edgeType) {
 					case Transition.RULE :
-						trg = ((RuleTransition)t).followState.stateNumber;
-						arg1 = ((RuleTransition)t).target.stateNumber;
-						arg2 = ((RuleTransition)t).ruleIndex;
+						trg = ((RuleTransition) (t)).followState.stateNumber;
+						arg1 = ((RuleTransition) (t)).target.stateNumber;
+						arg2 = ((RuleTransition) (t)).ruleIndex;
 						break;
 					case Transition.PREDICATE :
-						PredicateTransition pt = (PredicateTransition)t;
+						PredicateTransition pt = ((PredicateTransition) (t));
 						arg1 = pt.ruleIndex;
 						arg2 = pt.predIndex;
-						arg3 = pt.isCtxDependent ? 1 : 0 ;
+						arg3 = (pt.isCtxDependent) ? 1 : 0;
 						break;
 					case Transition.RANGE :
-						arg1 = ((RangeTransition)t).from;
-						arg2 = ((RangeTransition)t).to;
+						arg1 = ((RangeTransition) (t)).from;
+						arg2 = ((RangeTransition) (t)).to;
 						break;
 					case Transition.ATOM :
-						arg1 = ((AtomTransition)t).label;
+						arg1 = ((AtomTransition) (t)).label;
 						break;
 					case Transition.ACTION :
-						ActionTransition at = (ActionTransition)t;
+						ActionTransition at = ((ActionTransition) (t));
 						arg1 = at.ruleIndex;
 						arg2 = at.actionIndex;
-						arg3 = at.isCtxDependent ? 1 : 0 ;
+						arg3 = (at.isCtxDependent) ? 1 : 0;
 						break;
 					case Transition.SET :
 						arg1 = setIndex++;
@@ -202,7 +211,7 @@ public class ATNSerializer {
 		data.add(ndecisions);
 		for (DecisionState decStartState : atn.decisionToState) {
 			data.add(decStartState.stateNumber);
-			data.add(decStartState.isGreedy?1:0);
+			data.add(decStartState.isGreedy ? 1 : 0);
 		}
 		return data;
 	}
@@ -214,66 +223,65 @@ public class ATNSerializer {
 		int maxType = ATNSimulator.toInt(data[p++]);
 		buf.append("max type ").append(maxType).append("\n");
 		int nstates = ATNSimulator.toInt(data[p++]);
-		for (int i=1; i<=nstates; i++) {
+		for (int i = 1; i <= nstates; i++) {
 			int stype = ATNSimulator.toInt(data[p++]);
-            if ( stype==ATNState.INVALID_TYPE ) continue; // ignore bad type of states
+												// ignore bad type of states
+			if (stype == ATNState.INVALID_TYPE) {
+				continue;
+			}
 			int ruleIndex = ATNSimulator.toInt(data[p++]);
 			String arg = "";
-			if ( stype == ATNState.LOOP_END ) {
+			if (stype == ATNState.LOOP_END) {
 				int loopBackStateNumber = ATNSimulator.toInt(data[p++]);
-				arg = " "+loopBackStateNumber;
+				arg = " " + loopBackStateNumber;
 			}
-			buf.append(i - 1).append(":")
-				.append(ATNState.serializationNames.get(stype)).append(" ")
-				.append(ruleIndex).append(arg).append("\n");
+			buf.append(i - 1).append(":").append(ATNState.serializationNames.get(stype)).append(" ").append(ruleIndex).append(arg).append("\n");
 		}
 		int nrules = ATNSimulator.toInt(data[p++]);
-		for (int i=0; i<nrules; i++) {
+		for (int i = 0; i < nrules; i++) {
 			int s = ATNSimulator.toInt(data[p++]);
-            if ( g.isLexer() ) {
-                int arg1 = ATNSimulator.toInt(data[p++]);
-                int arg2 = ATNSimulator.toInt(data[p++]);
-                buf.append("rule ").append(i).append(":").append(s).append(" ").append(arg1).append(",").append(arg2).append('\n');
-            }
-            else {
-                buf.append("rule ").append(i).append(":").append(s).append('\n');
-            }
+			if (g.isLexer()) {
+				int arg1 = ATNSimulator.toInt(data[p++]);
+				int arg2 = ATNSimulator.toInt(data[p++]);
+				buf.append("rule ").append(i).append(":").append(s).append(" ").append(arg1).append(",").append(arg2).append('\n');
+			} else {
+				buf.append("rule ").append(i).append(":").append(s).append('\n');
+			}
 		}
 		int nmodes = ATNSimulator.toInt(data[p++]);
-		for (int i=0; i<nmodes; i++) {
+		for (int i = 0; i < nmodes; i++) {
 			int s = ATNSimulator.toInt(data[p++]);
 			buf.append("mode ").append(i).append(":").append(s).append('\n');
 		}
 		int nsets = ATNSimulator.toInt(data[p++]);
-		for (int i=1; i<=nsets; i++) {
+		for (int i = 1; i <= nsets; i++) {
 			int nintervals = ATNSimulator.toInt(data[p++]);
-			buf.append(i-1).append(":");
-			for (int j=1; j<=nintervals; j++) {
-				if ( j>1 ) buf.append(", ");
+			buf.append(i - 1).append(":");
+			for (int j = 1; j <= nintervals; j++) {
+				if (j > 1) {
+					buf.append(", ");
+				}
 				buf.append(getTokenName(ATNSimulator.toInt(data[p]))).append("..").append(getTokenName(ATNSimulator.toInt(data[p + 1])));
 				p += 2;
 			}
 			buf.append("\n");
 		}
 		int nedges = ATNSimulator.toInt(data[p++]);
-		for (int i=1; i<=nedges; i++) {
+		for (int i = 1; i <= nedges; i++) {
 			int src = ATNSimulator.toInt(data[p]);
 			int trg = ATNSimulator.toInt(data[p + 1]);
 			int ttype = ATNSimulator.toInt(data[p + 2]);
 			int arg1 = ATNSimulator.toInt(data[p + 3]);
 			int arg2 = ATNSimulator.toInt(data[p + 4]);
 			int arg3 = ATNSimulator.toInt(data[p + 5]);
-			buf.append(src).append("->").append(trg)
-				.append(" ").append(Transition.serializationNames.get(ttype))
-				.append(" ").append(arg1).append(",").append(arg2).append(",").append(arg3)
-				.append("\n");
+			buf.append(src).append("->").append(trg).append(" ").append(Transition.serializationNames.get(ttype)).append(" ").append(arg1).append(",").append(arg2).append(",").append(arg3).append("\n");
 			p += 6;
 		}
 		int ndecisions = ATNSimulator.toInt(data[p++]);
-		for (int i=1; i<=ndecisions; i++) {
+		for (int i = 1; i <= ndecisions; i++) {
 			int s = ATNSimulator.toInt(data[p++]);
 			int isGreedy = ATNSimulator.toInt(data[p++]);
-			buf.append(i-1).append(":").append(s).append(" ").append(isGreedy).append("\n");
+			buf.append(i - 1).append(":").append(s).append(" ").append(isGreedy).append("\n");
 		}
 		return buf.toString();
 	}
