diff --git a/java_case_studies/reference_repos/antlr4/importC6/desired.java b/java_case_studies/demo_results/MethodUnion/antlr4-importC6.java
index 1bb1eaf..a207acd 100644
--- a/java_case_studies/reference_repos/antlr4/importC6/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/antlr4-importC6.java
@@ -26,9 +26,7 @@
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.automata;
-
 import org.antlr.v4.misc.Utils;
 import org.antlr.v4.parse.ANTLRParser;
 import org.antlr.v4.runtime.atn.ATN;
@@ -43,26 +41,27 @@ import org.antlr.v4.runtime.atn.RangeTransition;
 import org.antlr.v4.runtime.atn.RuleTransition;
 import org.antlr.v4.runtime.atn.SetTransition;
 import org.antlr.v4.runtime.atn.Transition;
-import org.antlr.v4.runtime.misc.IntegerList;
 import org.antlr.v4.runtime.misc.Interval;
 import org.antlr.v4.runtime.misc.IntervalSet;
 import org.antlr.v4.tool.Grammar;
 import org.antlr.v4.tool.Rule;
-
 import java.util.ArrayList;
 import java.util.List;
+import org.antlr.v4.runtime.atn.*;
+import org.antlr.v4.runtime.misc.IntegerList;
 
-public class ATNSerializer {
-	public Grammar g;
-	public ATN atn;
-	public List<IntervalSet> sets = new ArrayList<IntervalSet>();
+public class ATNSerializer{
 
-	public ATNSerializer(Grammar g, ATN atn) {
+    public Grammar g;,
+    public ATN atn;,
+    public List<IntervalSet> sets = new ArrayList<IntervalSet>();,
+
+    public ATNSerializer(Grammar g, ATN atn) {
 		this.g = g;
 		this.atn = atn;
 	}
 
-	/** Serialize state descriptors, edge descriptors, and decision->state map
+    /** Serialize state descriptors, edge descriptors, and decision->state map
 	 *  into list of ints:
 	 *
 	 * 		grammar-type, (ANTLRParser.LEXER, ...)
@@ -83,7 +82,8 @@ public class ATNSerializer {
 	 *
 	 *  Convenient to pack into unsigned shorts to make as Java string.
 	 */
-	public IntegerList serialize() {
+
+    public IntegerList serialize() {
 		IntegerList data = new IntegerList();
 		// convert grammar type to ATN const to avoid dependence on ANTLRParser
 		if ( g.getType()== ANTLRParser.LEXER ) data.add(ATN.LEXER);
@@ -207,7 +207,7 @@ public class ATNSerializer {
 		return data;
 	}
 
-	public String decode(char[] data) {
+    public String decode(char[] data) {
 		StringBuilder buf = new StringBuilder();
 		int p = 0;
 		int grammarType = ATNSimulator.toInt(data[p++]);
@@ -278,28 +278,30 @@ public class ATNSerializer {
 		return buf.toString();
 	}
 
-	public String getTokenName(int t) {
+    public String getTokenName(int t) {
 		if ( t==-1 ) return "EOF";
 		if ( g!=null ) return g.getTokenDisplayName(t);
 		return String.valueOf(t);
 	}
 
-	/** Used by Java target to encode short/int array as chars in string. */
-	public static String getSerializedAsString(Grammar g, ATN atn) {
+    /** Used by Java target to encode short/int array as chars in string. */
+
+    public static String getSerializedAsString(Grammar g, ATN atn) {
 		return new String(Utils.toCharArray(getSerialized(g, atn)));
 	}
 
-	public static IntegerList getSerialized(Grammar g, ATN atn) {
+    public static IntegerList getSerialized(Grammar g, ATN atn) {
 		return new ATNSerializer(g, atn).serialize();
 	}
 
-	public static char[] getSerializedAsChars(Grammar g, ATN atn) {
+    public static char[] getSerializedAsChars(Grammar g, ATN atn) {
 		return Utils.toCharArray(new ATNSerializer(g, atn).serialize());
 	}
 
-	public static String getDecoded(Grammar g, ATN atn) {
+    public static String getDecoded(Grammar g, ATN atn) {
 		IntegerList serialized = getSerialized(g, atn);
 		char[] data = Utils.toCharArray(serialized);
 		return new ATNSerializer(g, atn).decode(data);
 	}
-}
+
+}
\ No newline at end of file
