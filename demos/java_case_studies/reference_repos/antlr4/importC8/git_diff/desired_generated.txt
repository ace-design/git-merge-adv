diff --git a/java_case_studies/reference_repos/antlr4/importC8/desired.java b/java_case_studies/demo_results/MethodUnion/antlr4-importC8.java
index 92a6e5a..4594d93 100644
--- a/java_case_studies/reference_repos/antlr4/importC8/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/antlr4-importC8.java
@@ -25,99 +25,117 @@
  *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.test;
-
 import org.antlr.v4.runtime.*;
 import org.antlr.v4.runtime.atn.*;
 import org.antlr.v4.runtime.dfa.*;
 import org.antlr.v4.runtime.misc.Nullable;
+import org.antlr.v4.runtime.tree.*;
+import org.junit.*;
+import java.io.*;
+import java.lang.reflect.*;
+import java.net.*;
+import java.util.*;
+import java.util.logging.*;
 import org.antlr.v4.runtime.tree.ParseTree;
 import org.antlr.v4.runtime.tree.ParseTreeListener;
 import org.antlr.v4.runtime.tree.ParseTreeWalker;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.antlr.v4.runtime.atn.ATNConfig;
+import org.antlr.v4.runtime.atn.ParserATNSimulator;
+import org.antlr.v4.runtime.dfa.DFA;
+import org.antlr.v4.runtime.dfa.DFAState;
+
+public class TestPerformance extends BaseTest{
 
-import java.io.*;
-import java.lang.reflect.*;
-import java.net.*;
-import java.util.*;
-import java.util.logging.*;
 
-public class TestPerformance extends BaseTest {
     /** Parse all java files under this package within the JDK_SOURCE_ROOT. */
-    private static final String TOP_PACKAGE = "java.lang";
+    private static final String TOP_PACKAGE = "java.lang";,
+
     /** True to load java files from sub-packages of {@link #TOP_PACKAGE}. */
-    private static final boolean RECURSIVE = true;
+    private static final boolean RECURSIVE = true;,
 
     /**
      *  True to use the Java grammar with expressions in the v4 left-recursive syntax (Java-LR.g). False to use
      *  the standard grammar (Java.g). In either case, the grammar is renamed in the temporary directory to Java.g
      *  before compiling.
      */
-    private static final boolean USE_LR_GRAMMAR = true;
+    private static final boolean USE_LR_GRAMMAR = true;,
+
     /**
      *  True to specify the -Xforce-atn option when generating the grammar, forcing all decisions in JavaParser to
      *  be handled by {@link ParserATNSimulator#adaptivePredict}.
      */
-    private static final boolean FORCE_ATN = false;
+    private static final boolean FORCE_ATN = false;,
+
     /**
      *  True to specify the -atn option when generating the grammar. This will cause ANTLR
      *  to export the ATN for each decision as a DOT (GraphViz) file.
      */
-    private static final boolean EXPORT_ATN_GRAPHS = true;
+    private static final boolean EXPORT_ATN_GRAPHS = true;,
+
     /**
      *  True to delete temporary (generated and compiled) files when the test completes.
      */
-    private static final boolean DELETE_TEMP_FILES = true;
-
-    private static final boolean PAUSE_FOR_HEAP_DUMP = false;
+    private static final boolean DELETE_TEMP_FILES = true;,
+    private static final boolean PAUSE_FOR_HEAP_DUMP = false;,
 
     /** Parse each file with JavaParser.compilationUnit */
-    private static final boolean RUN_PARSER = true;
+    private static final boolean RUN_PARSER = true;,
+
     /** True to use {@link BailErrorStrategy}, False to use {@link DefaultErrorStrategy} */
-    private static final boolean BAIL_ON_ERROR = true;
+    private static final boolean BAIL_ON_ERROR = true;,
+
     /** This value is passed to {@link Parser#setBuildParseTree}. */
-    private static final boolean BUILD_PARSE_TREES = false;
+    private static final boolean BUILD_PARSE_TREES = false;,
+
     /**
      *  Use ParseTreeWalker.DEFAULT.walk with the BlankJavaParserListener to show parse tree walking overhead.
      *  If {@link #BUILD_PARSE_TREES} is false, the listener will instead be called during the parsing process via
      *  {@link Parser#addParseListener}.
      */
-    private static final boolean BLANK_LISTENER = false;
-
-    private static final boolean SHOW_DFA_STATE_STATS = true;
-
-    private static final boolean SHOW_CONFIG_STATS = false;
+    private static final boolean BLANK_LISTENER = false;,
+    private static final boolean SHOW_DFA_STATE_STATS = true;,
+    private static final boolean SHOW_CONFIG_STATS = false;,
 
     /**
      *  If true, a single JavaLexer will be used, and {@link Lexer#setInputStream} will be called to initialize it
      *  for each source file. In this mode, the cached DFA will be persisted throughout the lexing process.
      */
-    private static final boolean REUSE_LEXER = true;
+    private static final boolean REUSE_LEXER = true;,
+
     /**
      *  If true, a single JavaParser will be used, and {@link Parser#setInputStream} will be called to initialize it
      *  for each source file. In this mode, the cached DFA will be persisted throughout the parsing process.
      */
-    private static final boolean REUSE_PARSER = true;
+    private static final boolean REUSE_PARSER = true;,
+
     /**
      * If true, the shared lexer and parser are reset after each pass. If false, all passes after the first will
      * be fully "warmed up", which makes them faster and can compare them to the first warm-up pass, but it will
      * not distinguish bytecode load/JIT time from warm-up time during the first pass.
      */
-    private static final boolean CLEAR_DFA = false;
+    private static final boolean CLEAR_DFA = false;,
 
     /** Total number of passes to make over the source */
-    private static final int PASSES = 4;
-
-    private static Lexer sharedLexer;
-    private static Parser sharedParser;
+    private static final int PASSES = 4;,
+    private static Lexer sharedLexer;,
+    private static Parser sharedParser;,
     @SuppressWarnings({"FieldCanBeLocal"})
-    private static ParseTreeListener<Token> sharedListener;
-
-    private int tokenCount;
-    private int currentPass;
+    private static ParseTreeListener<Token> sharedListener;,
+    private int tokenCount;,
+    private int currentPass;,
 
     @Test
     //@Ignore
@@ -211,6 +229,7 @@ public class TestPerformance extends BaseTest {
      *  This method is separate from {@link #parse2} so the first pass can be distinguished when analyzing
      *  profiler results.
      */
+
     protected void parse1(JavaParserFactory factory, Collection<CharStream> sources) {
         System.gc();
         parseSources(factory, sources);
@@ -220,6 +239,7 @@ public class TestPerformance extends BaseTest {
      *  This method is separate from {@link #parse1} so the first pass can be distinguished when analyzing
      *  profiler results.
      */
+
     protected void parse2(JavaParserFactory factory, Collection<CharStream> sources) {
         System.gc();
         parseSources(factory, sources);
@@ -259,7 +279,11 @@ public class TestPerformance extends BaseTest {
         }
     }
 
-    int configOutputSize = 0;
+    @Override
+            public boolean accept(File dir, String name) {
+                return name.toLowerCase().endsWith(".java");
+            }
+    int configOutputSize = 0;,
 
     protected void parseSources(JavaParserFactory factory, Collection<CharStream> sources) {
         long startTime = System.currentTimeMillis();
@@ -481,7 +505,55 @@ public class TestPerformance extends BaseTest {
         }
     }
 
-    protected interface JavaParserFactory {
+    @SuppressWarnings({"PointlessBooleanExpression"})
+                @Override
+                public void parseFile(CharStream input) {
+                    try {
+                        if (REUSE_LEXER && sharedLexer != null) {
+                            sharedLexer.setInputStream(input);
+                        } else {
+                            sharedLexer = lexerCtor.newInstance(input);
+                        }
+
+                        CommonTokenStream tokens = new CommonTokenStream(sharedLexer);
+                        tokens.fill();
+                        tokenCount += tokens.size();
+
+                        if (!RUN_PARSER) {
+                            return;
+                        }
+
+                        if (REUSE_PARSER && sharedParser != null) {
+                            sharedParser.setInputStream(tokens);
+                        } else {
+                            sharedParser = parserCtor.newInstance(tokens);
+                            sharedParser.setBuildParseTree(BUILD_PARSE_TREES);
+                            if (!BUILD_PARSE_TREES && BLANK_LISTENER) {
+								// TJP commented out for now; changed interface
+//                                sharedParser.addParseListener(sharedListener);
+                            }
+                            if (BAIL_ON_ERROR) {
+                                sharedParser.setErrorHandler(new BailErrorStrategy());
+                            }
+                        }
+
+                        Method parseMethod = parserClass.getMethod("compilationUnit");
+                        Object parseResult = parseMethod.invoke(sharedParser);
+                        Assert.assertTrue(parseResult instanceof ParseTree);
+
+                        if (BUILD_PARSE_TREES && BLANK_LISTENER) {
+                            ParseTreeWalker.DEFAULT.walk(sharedListener, (ParseTree)parseResult);
+                        }
+                    } catch (Exception e) {
+                        e.printStackTrace(System.out);
+                        throw new IllegalStateException(e);
+                    }
+                }
+
+    protected interface JavaParserFactory{
+
+
         void parseFile(CharStream input);
+
     }
-}
+}
\ No newline at end of file
