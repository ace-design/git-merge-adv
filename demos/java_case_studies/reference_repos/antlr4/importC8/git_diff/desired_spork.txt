diff --git a/java_case_studies/reference_repos/antlr4/importC8/desired.java b/java_case_studies/reference_repos/antlr4/importC8/spork_result.java
index 92a6e5a..91f4a33 100644
--- a/java_case_studies/reference_repos/antlr4/importC8/desired.java
+++ b/java_case_studies/reference_repos/antlr4/importC8/spork_result.java
@@ -25,48 +25,48 @@
  *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.test;
 
+import java.io.*;
+import java.lang.reflect.*;
+import java.net.*;
+import java.util.*;
+import java.util.logging.*;
 import org.antlr.v4.runtime.*;
 import org.antlr.v4.runtime.atn.*;
 import org.antlr.v4.runtime.dfa.*;
 import org.antlr.v4.runtime.misc.Nullable;
-import org.antlr.v4.runtime.tree.ParseTree;
-import org.antlr.v4.runtime.tree.ParseTreeListener;
-import org.antlr.v4.runtime.tree.ParseTreeWalker;
-import org.junit.Assert;
+import org.antlr.v4.runtime.tree.*;
+import org.junit.*;
 import org.junit.Ignore;
-import org.junit.Test;
 
-import java.io.*;
-import java.lang.reflect.*;
-import java.net.*;
-import java.util.*;
-import java.util.logging.*;
 
 public class TestPerformance extends BaseTest {
     /** Parse all java files under this package within the JDK_SOURCE_ROOT. */
     private static final String TOP_PACKAGE = "java.lang";
+
     /** True to load java files from sub-packages of {@link #TOP_PACKAGE}. */
     private static final boolean RECURSIVE = true;
 
     /**
-     *  True to use the Java grammar with expressions in the v4 left-recursive syntax (Java-LR.g). False to use
-     *  the standard grammar (Java.g). In either case, the grammar is renamed in the temporary directory to Java.g
-     *  before compiling.
+     * True to use the Java grammar with expressions in the v4 left-recursive syntax (Java-LR.g). False to use
+     * the standard grammar (Java.g). In either case, the grammar is renamed in the temporary directory to Java.g
+     * before compiling.
      */
     private static final boolean USE_LR_GRAMMAR = true;
+
     /**
-     *  True to specify the -Xforce-atn option when generating the grammar, forcing all decisions in JavaParser to
-     *  be handled by {@link ParserATNSimulator#adaptivePredict}.
+     * True to specify the -Xforce-atn option when generating the grammar, forcing all decisions in JavaParser to
+     * be handled by {@link ParserATNSimulator#adaptivePredict}.
      */
     private static final boolean FORCE_ATN = false;
+
     /**
      *  True to specify the -atn option when generating the grammar. This will cause ANTLR
      *  to export the ATN for each decision as a DOT (GraphViz) file.
      */
     private static final boolean EXPORT_ATN_GRAPHS = true;
+
     /**
      *  True to delete temporary (generated and compiled) files when the test completes.
      */
@@ -76,14 +76,19 @@ public class TestPerformance extends BaseTest {
 
     /** Parse each file with JavaParser.compilationUnit */
     private static final boolean RUN_PARSER = true;
-    /** True to use {@link BailErrorStrategy}, False to use {@link DefaultErrorStrategy} */
+
+    /**
+     * True to use {@link BailErrorStrategy}, False to use {@link DefaultErrorStrategy}
+     */
     private static final boolean BAIL_ON_ERROR = true;
+
     /** This value is passed to {@link Parser#setBuildParseTree}. */
     private static final boolean BUILD_PARSE_TREES = false;
+
     /**
-     *  Use ParseTreeWalker.DEFAULT.walk with the BlankJavaParserListener to show parse tree walking overhead.
-     *  If {@link #BUILD_PARSE_TREES} is false, the listener will instead be called during the parsing process via
-     *  {@link Parser#addParseListener}.
+     * Use ParseTreeWalker.DEFAULT.walk with the BlankJavaParserListener to show parse tree walking overhead.
+     * If {@link #BUILD_PARSE_TREES} is false, the listener will instead be called during the parsing process via
+     * {@link Parser#addParseListener}.
      */
     private static final boolean BLANK_LISTENER = false;
 
@@ -92,15 +97,17 @@ public class TestPerformance extends BaseTest {
     private static final boolean SHOW_CONFIG_STATS = false;
 
     /**
-     *  If true, a single JavaLexer will be used, and {@link Lexer#setInputStream} will be called to initialize it
-     *  for each source file. In this mode, the cached DFA will be persisted throughout the lexing process.
+     * If true, a single JavaLexer will be used, and {@link Lexer#setInputStream} will be called to initialize it
+     * for each source file. In this mode, the cached DFA will be persisted throughout the lexing process.
      */
     private static final boolean REUSE_LEXER = true;
+
     /**
-     *  If true, a single JavaParser will be used, and {@link Parser#setInputStream} will be called to initialize it
-     *  for each source file. In this mode, the cached DFA will be persisted throughout the parsing process.
+     * If true, a single JavaParser will be used, and {@link Parser#setInputStream} will be called to initialize it
+     * for each source file. In this mode, the cached DFA will be persisted throughout the parsing process.
      */
     private static final boolean REUSE_PARSER = true;
+
     /**
      * If true, the shared lexer and parser are reset after each pass. If false, all passes after the first will
      * be fully "warmed up", which makes them faster and can compare them to the first warm-up pass, but it will
@@ -112,15 +119,18 @@ public class TestPerformance extends BaseTest {
     private static final int PASSES = 4;
 
     private static Lexer sharedLexer;
+
     private static Parser sharedParser;
-    @SuppressWarnings({"FieldCanBeLocal"})
+
+    @SuppressWarnings({ "FieldCanBeLocal" })
     private static ParseTreeListener<Token> sharedListener;
 
     private int tokenCount;
+
     private int currentPass;
 
-    @Test
     //@Ignore
+    @Test
     public void compileJdk() throws IOException {
         String jdkSourceRoot = System.getenv("JDK_SOURCE_ROOT");
         if (jdkSourceRoot == null) {
@@ -130,43 +140,35 @@ public class TestPerformance extends BaseTest {
             System.err.println("The JDK_SOURCE_ROOT environment variable must be set for performance testing.");
             return;
         }
-
         compileParser(USE_LR_GRAMMAR);
         JavaParserFactory factory = getParserFactory();
-
-		if (!TOP_PACKAGE.isEmpty()) {
-            jdkSourceRoot = jdkSourceRoot + '/' + TOP_PACKAGE.replace('.', '/');
+        if (!TOP_PACKAGE.isEmpty()) {
+            jdkSourceRoot = (jdkSourceRoot + '/') + TOP_PACKAGE.replace('.', '/');
         }
-
         File directory = new File(jdkSourceRoot);
         assertTrue(directory.isDirectory());
-
         Collection<CharStream> sources = loadSources(directory, RECURSIVE);
-
-		System.out.print(getOptionsDescription());
-
+        System.out.print(getOptionsDescription());
         currentPass = 0;
         parse1(factory, sources);
-        for (int i = 0; i < PASSES - 1; i++) {
+        for (int i = 0; i < (PASSES - 1); i++) {
             currentPass = i + 1;
             if (CLEAR_DFA) {
                 sharedLexer = null;
                 sharedParser = null;
             }
-
             parse2(factory, sources);
         }
-
-		sources.clear();
-		if (PAUSE_FOR_HEAP_DUMP) {
-			System.gc();
-			System.out.println("Pausing before application exit.");
-			try {
-				Thread.sleep(4000);
-			} catch (InterruptedException ex) {
-				Logger.getLogger(TestPerformance.class.getName()).log(Level.SEVERE, null, ex);
-			}
-		}
+        sources.clear();
+        if (PAUSE_FOR_HEAP_DUMP) {
+            System.gc();
+            System.out.println("Pausing before application exit.");
+            try {
+                Thread.sleep(4000);
+            } catch (java.lang.InterruptedException ex) {
+                Logger.getLogger(TestPerformance.class.getName()).log(Level.SEVERE, null, ex);
+            }
+        }
     }
 
     @Override
@@ -265,69 +267,54 @@ public class TestPerformance extends BaseTest {
         long startTime = System.currentTimeMillis();
         tokenCount = 0;
         int inputSize = 0;
-
         for (CharStream input : sources) {
             input.seek(0);
             inputSize += input.size();
             // this incurred a great deal of overhead and was causing significant variations in performance results.
-            //System.out.format("Parsing file %s\n", input.getSourceName());
+            // System.out.format("Parsing file %s\n", input.getSourceName());
             try {
                 factory.parseFile(input);
-            } catch (IllegalStateException ex) {
+            } catch (java.lang.IllegalStateException ex) {
                 ex.printStackTrace(System.out);
             }
         }
-
-        System.out.format("Total parse time for %d files (%d KB, %d tokens): %dms\n",
-                          sources.size(),
-                          inputSize / 1024,
-                          tokenCount,
-                          System.currentTimeMillis() - startTime);
-
+        System.out.format("Total parse time for %d files (%d KB, %d tokens): %dms\n", sources.size(), inputSize / 1024, tokenCount, System.currentTimeMillis() - startTime);
         if (RUN_PARSER) {
             // make sure the individual DFAState objects actually have unique ATNConfig arrays
             final ParserATNSimulator<?> interpreter = sharedParser.getInterpreter();
             final DFA[] decisionToDFA = interpreter.decisionToDFA;
-
             if (SHOW_DFA_STATE_STATS) {
                 int states = 0;
-				int configs = 0;
-				Set<ATNConfig> uniqueConfigs = new HashSet<ATNConfig>();
-
+                int configs = 0;
+                Set<ATNConfig> uniqueConfigs = new HashSet<ATNConfig>();
                 for (int i = 0; i < decisionToDFA.length; i++) {
                     DFA dfa = decisionToDFA[i];
-                    if (dfa == null || dfa.states == null) {
+                    if ((dfa == null) || (dfa.states == null)) {
                         continue;
                     }
-
                     states += dfa.states.size();
-					for (DFAState state : dfa.states.values()) {
-						configs += state.configset.size();
-						uniqueConfigs.addAll(state.configset);
-					}
+                    for (DFAState state : dfa.states.values()) {
+                        configs += state.configset.size();
+                        uniqueConfigs.addAll(state.configset);
+                    }
                 }
-
                 System.out.format("There are %d DFAState instances, %d configs (%d unique).\n", states, configs, uniqueConfigs.size());
             }
-
             int localDfaCount = 0;
             int globalDfaCount = 0;
             int localConfigCount = 0;
             int globalConfigCount = 0;
             int[] contextsInDFAState = new int[0];
-
             for (int i = 0; i < decisionToDFA.length; i++) {
                 DFA dfa = decisionToDFA[i];
-                if (dfa == null || dfa.states == null) {
+                if ((dfa == null) || (dfa.states == null)) {
                     continue;
                 }
-
                 if (SHOW_CONFIG_STATS) {
                     for (DFAState state : dfa.states.keySet()) {
                         if (state.configset.size() >= contextsInDFAState.length) {
                             contextsInDFAState = Arrays.copyOf(contextsInDFAState, state.configset.size() + 1);
                         }
-
                         if (state.isAcceptState) {
                             boolean hasGlobal = false;
                             for (ATNConfig config : state.configset) {
@@ -338,20 +325,17 @@ public class TestPerformance extends BaseTest {
                                     localConfigCount++;
                                 }
                             }
-
                             if (hasGlobal) {
                                 globalDfaCount++;
                             } else {
                                 localDfaCount++;
                             }
                         }
-
                         contextsInDFAState[state.configset.size()]++;
                     }
                 }
             }
-
-            if (SHOW_CONFIG_STATS && currentPass == 0) {
+            if (SHOW_CONFIG_STATS && (currentPass == 0)) {
                 System.out.format("  DFA accept states: %d total, %d with only local context, %d with a global context\n", localDfaCount + globalDfaCount, localDfaCount, globalDfaCount);
                 System.out.format("  Config stats: %d total, %d local, %d global\n", localConfigCount + globalConfigCount, localConfigCount, globalConfigCount);
                 if (SHOW_DFA_STATE_STATS) {
@@ -411,69 +395,61 @@ public class TestPerformance extends BaseTest {
 
     protected JavaParserFactory getParserFactory() {
         try {
-            ClassLoader loader = new URLClassLoader(new URL[] { new File(tmpdir).toURI().toURL() }, ClassLoader.getSystemClassLoader());
-            @SuppressWarnings({"unchecked"})
-            final Class<? extends Lexer> lexerClass = (Class<? extends Lexer>)loader.loadClass("JavaLexer");
-            @SuppressWarnings({"unchecked"})
-            final Class<? extends Parser> parserClass = (Class<? extends Parser>)loader.loadClass("JavaParser");
-            @SuppressWarnings({"unchecked"})
-            final Class<? extends ParseTreeListener<Token>> listenerClass = (Class<? extends ParseTreeListener<Token>>)loader.loadClass("JavaBaseListener");
+            ClassLoader loader = new URLClassLoader(new URL[]{ new File(tmpdir).toURI().toURL() }, ClassLoader.getSystemClassLoader());
+            @SuppressWarnings({ "unchecked" })
+            final Class<? extends Lexer> lexerClass = ((Class<? extends Lexer>) (loader.loadClass("JavaLexer")));
+            @SuppressWarnings({ "unchecked" })
+            final Class<? extends Parser> parserClass = ((Class<? extends Parser>) (loader.loadClass("JavaParser")));
+            @SuppressWarnings({ "unchecked" })
+            final Class<? extends ParseTreeListener<Token>> listenerClass = ((Class<? extends ParseTreeListener<Token>>) (loader.loadClass("JavaBaseListener")));
             TestPerformance.sharedListener = listenerClass.newInstance();
-
             final Constructor<? extends Lexer> lexerCtor = lexerClass.getConstructor(CharStream.class);
             final Constructor<? extends Parser> parserCtor = parserClass.getConstructor(TokenStream.class);
-
             // construct initial instances of the lexer and parser to deserialize their ATNs
             lexerCtor.newInstance(new ANTLRInputStream(""));
             parserCtor.newInstance(new CommonTokenStream());
-
             return new JavaParserFactory() {
-                @SuppressWarnings({"PointlessBooleanExpression"})
+                @SuppressWarnings({ "PointlessBooleanExpression" })
                 @Override
                 public void parseFile(CharStream input) {
                     try {
-                        if (REUSE_LEXER && sharedLexer != null) {
+                        if (REUSE_LEXER && (sharedLexer != null)) {
                             sharedLexer.setInputStream(input);
                         } else {
                             sharedLexer = lexerCtor.newInstance(input);
                         }
-
                         CommonTokenStream tokens = new CommonTokenStream(sharedLexer);
                         tokens.fill();
                         tokenCount += tokens.size();
-
                         if (!RUN_PARSER) {
                             return;
                         }
-
-                        if (REUSE_PARSER && sharedParser != null) {
+                        if (REUSE_PARSER && (sharedParser != null)) {
                             sharedParser.setInputStream(tokens);
                         } else {
                             sharedParser = parserCtor.newInstance(tokens);
                             sharedParser.setBuildParseTree(BUILD_PARSE_TREES);
-                            if (!BUILD_PARSE_TREES && BLANK_LISTENER) {
-								// TJP commented out for now; changed interface
+                            if ((!BUILD_PARSE_TREES) && BLANK_LISTENER) {
+        // TJP commented out for now; changed interface
 //                                sharedParser.addParseListener(sharedListener);
                             }
                             if (BAIL_ON_ERROR) {
                                 sharedParser.setErrorHandler(new BailErrorStrategy());
                             }
                         }
-
                         Method parseMethod = parserClass.getMethod("compilationUnit");
                         Object parseResult = parseMethod.invoke(sharedParser);
                         Assert.assertTrue(parseResult instanceof ParseTree);
-
                         if (BUILD_PARSE_TREES && BLANK_LISTENER) {
-                            ParseTreeWalker.DEFAULT.walk(sharedListener, (ParseTree)parseResult);
+                            ParseTreeWalker.DEFAULT.walk(sharedListener, ((ParseTree) (parseResult)));
                         }
-                    } catch (Exception e) {
+                    } catch (java.lang.Exception e) {
                         e.printStackTrace(System.out);
                         throw new IllegalStateException(e);
                     }
                 }
             };
-        } catch (Exception e) {
+        } catch (java.lang.Exception e) {
             e.printStackTrace(System.out);
             lastTestFailed = true;
             Assert.fail(e.getMessage());
@@ -482,6 +458,6 @@ public class TestPerformance extends BaseTest {
     }
 
     protected interface JavaParserFactory {
-        void parseFile(CharStream input);
+        public abstract void parseFile(CharStream input);
     }
 }
