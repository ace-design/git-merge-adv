diff --git a/java_case_studies/reference_repos/antlr4/importC5/desired.java b/java_case_studies/demo_results/MethodUnion/antlr4-importC5.java
index 1b89168..61edae7 100644
--- a/java_case_studies/reference_repos/antlr4/importC5/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/antlr4-importC5.java
@@ -26,52 +26,27 @@
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.semantics;
-
 import org.antlr.v4.analysis.LeftRecursiveRuleTransformer;
 import org.antlr.v4.parse.ANTLRParser;
 import org.antlr.v4.runtime.Token;
-import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.misc.Pair;
 import org.antlr.v4.tool.ErrorType;
 import org.antlr.v4.tool.Grammar;
 import org.antlr.v4.tool.Rule;
 import org.antlr.v4.tool.ast.GrammarAST;
-
 import java.util.List;
+import org.antlr.v4.runtime.misc.NotNull;
 
-/** Do as much semantic checking as we can and fill in grammar
- *  with rules, actions, and token definitions.
- *  The only side effects are in the grammar passed to process().
- *  We consume a bunch of memory here while we build up data structures
- *  to perform checking, but all of it goes away after this pipeline object
- *  gets garbage collected.
- *
- *  After this pipeline finishes, we can be sure that the grammar
- *  is syntactically correct and that it's semantically correct enough for us
- *  to attempt grammar analysis. We have assigned all token types.
- *  Note that imported grammars bring in token and rule definitions
- *  but only the root grammar and any implicitly created lexer grammar
- *  get their token definitions filled up. We are treating the
- *  imported grammars like includes.
- *
- *  The semantic pipeline works on root grammars (those that do the importing,
- *  if any). Upon entry to the semantic pipeline, all imported grammars
- *  should have been loaded into delegate grammar objects with their
- *  ASTs created.  The pipeline does the BasicSemanticChecks on the
- *  imported grammar before collecting symbols. We cannot perform the
- *  simple checks such as undefined rule until we have collected all
- *  tokens and rules from the imported grammars into a single collection.
- */
-public class SemanticPipeline {
-	public Grammar g;
+public class SemanticPipeline{
+
+    public Grammar g;,
 
-	public SemanticPipeline(Grammar g) {
+    public SemanticPipeline(Grammar g) {
 		this.g = g;
 	}
 
-	public void process() {
+    public void process() {
 		if ( g.ast==null ) return;
 
 		// COLLECT RULE OBJECTS
@@ -138,7 +113,7 @@ public class SemanticPipeline {
 		UseDefAnalyzer.trackTokenRuleRefsInActions(g);
 	}
 
-	void identifyStartRules(SymbolCollector collector) {
+    void identifyStartRules(SymbolCollector collector) {
 		for (GrammarAST ref : collector.rulerefs) {
 			String ruleName = ref.getText();
 			Rule r = g.getRule(ruleName);
@@ -146,7 +121,7 @@ public class SemanticPipeline {
 		}
 	}
 
-	void assignLexerTokenTypes(Grammar g, List<GrammarAST> tokensDefs) {
+    void assignLexerTokenTypes(Grammar g, List<GrammarAST> tokensDefs) {
 		Grammar G = g.getOutermostGrammar(); // put in root, even if imported
 		for (GrammarAST def : tokensDefs) {
 			if ( def.getType()== ANTLRParser.ID ) G.defineTokenName(def.getText());
@@ -180,7 +155,8 @@ public class SemanticPipeline {
 
 	}
 
-	boolean hasTypeOrMoreCommand(@NotNull Rule r) {
+
+    boolean hasTypeOrMoreCommand(@NotNull Rule r) {
 		GrammarAST ast = r.ast;
 		if (ast == null) {
 			return false;
@@ -208,7 +184,7 @@ public class SemanticPipeline {
 		return false;
 	}
 
-	void assignTokenTypes(Grammar g, List<GrammarAST> tokensDefs,
+    void assignTokenTypes(Grammar g, List<GrammarAST> tokensDefs,
 						  List<GrammarAST> tokenIDs, List<GrammarAST> terminals)
 	{
 		//Grammar G = g.getOutermostGrammar(); // put in root, even if imported
@@ -248,4 +224,5 @@ public class SemanticPipeline {
 		g.tool.log("semantics", "tokens="+g.tokenNameToTypeMap);
         g.tool.log("semantics", "strings="+g.stringLiteralToTypeMap);
 	}
-}
+
+}
\ No newline at end of file
