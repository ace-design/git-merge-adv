diff --git a/java_case_studies/reference_repos/antlr4/importC5/base.java b/java_case_studies/reference_repos/antlr4/importC5/left.java
index 7c442f5..f4a96b0 100644
--- a/java_case_studies/reference_repos/antlr4/importC5/base.java
+++ b/java_case_studies/reference_repos/antlr4/importC5/left.java
@@ -32,13 +32,13 @@ package org.antlr.v4.semantics;
 import org.antlr.v4.analysis.LeftRecursiveRuleTransformer;
 import org.antlr.v4.parse.ANTLRParser;
 import org.antlr.v4.runtime.Token;
+import org.antlr.v4.runtime.misc.Pair;
 import org.antlr.v4.tool.ErrorType;
 import org.antlr.v4.tool.Grammar;
 import org.antlr.v4.tool.Rule;
 import org.antlr.v4.tool.ast.GrammarAST;
 
 import java.util.List;
-import java.util.Map;
 
 /** Do as much semantic checking as we can and fill in grammar
  *  with rules, actions, and token definitions.
@@ -157,10 +157,19 @@ public class SemanticPipeline {
 		}
 
 		// FOR ALL X : 'xxx'; RULES, DEFINE 'xxx' AS TYPE X
-		Map<String,String> litAliases = Grammar.getStringLiteralAliasesFromLexerRules(g.ast);
+		List<Pair<GrammarAST,GrammarAST>> litAliases = Grammar.getStringLiteralAliasesFromLexerRules(g.ast);
 		if ( litAliases!=null ) {
-			for (String lit : litAliases.keySet()) {
-				G.defineTokenAlias(litAliases.get(lit), lit);
+			for (Pair<GrammarAST,GrammarAST> pair : litAliases) {
+				GrammarAST nameAST = pair.a;
+				GrammarAST litAST = pair.b;
+				if ( !G.stringLiteralToTypeMap.containsKey(litAST.getText()) ) {
+					G.defineTokenAlias(nameAST.getText(), litAST.getText());
+				}
+				else {
+					g.tool.errMgr.grammarError(ErrorType.ALIAS_REASSIGNMENT,
+											   g.fileName, nameAST.token,
+											   litAST.getText(), nameAST.getText());
+				}
 			}
 		}
 
