diff --git a/java_case_studies/reference_repos/antlr4/importC7/base.java b/java_case_studies/reference_repos/antlr4/importC7/left.java
index 19687e5..affdda6 100644
--- a/java_case_studies/reference_repos/antlr4/importC7/base.java
+++ b/java_case_studies/reference_repos/antlr4/importC7/left.java
@@ -29,7 +29,11 @@
 
 package org.antlr.v4.runtime.atn;
 
-import org.antlr.v4.runtime.*;
+import org.antlr.v4.runtime.CharStream;
+import org.antlr.v4.runtime.IntStream;
+import org.antlr.v4.runtime.Lexer;
+import org.antlr.v4.runtime.LexerNoViableAltException;
+import org.antlr.v4.runtime.Token;
 import org.antlr.v4.runtime.dfa.DFA;
 import org.antlr.v4.runtime.dfa.DFAState;
 import org.antlr.v4.runtime.misc.NotNull;
@@ -40,8 +44,6 @@ import java.io.OutputStream;
 
 /** "dup" of ParserInterpreter */
 public class LexerATNSimulator extends ATNSimulator {
-	public static final RuleContext EMPTY_LEXER_RULE_CONTEXT = new RuleContext();
-
 	public static boolean debug = false;
 	public static boolean dfa_debug = false;
 	public static final int MAX_DFA_EDGE = 127; // forces unicode to stay in ATN
@@ -492,7 +494,7 @@ public class LexerATNSimulator extends ATNSimulator {
 	protected ATNConfigSet computeStartState(@NotNull IntStream input,
 											 @NotNull ATNState p)
 	{
-		RuleContext initialContext = EMPTY_LEXER_RULE_CONTEXT;
+		PredictionContext initialContext = EmptyPredictionContext.EMPTY;
 		ATNConfigSet configs = new ATNConfigSet();
 		for (int i=0; i<p.getNumberOfTransitions(); i++) {
 			ATNState target = p.transition(i).target;
@@ -523,12 +525,18 @@ public class LexerATNSimulator extends ATNSimulator {
 				configs.add(config);
 				return;
 			}
-			RuleContext newContext = config.context.parent; // "pop" invoking state
-			ATNState invokingState = atn.states.get(config.context.invokingState);
-			RuleTransition rt = (RuleTransition)invokingState.transition(0);
-			ATNState retState = rt.followState;
-			ATNConfig c = new ATNConfig(retState, config.alt, newContext);
-			closure(c, configs);
+			if ( config.context!=null && !config.context.isEmpty() ) {
+				for (SingletonPredictionContext ctx : config.context) {
+					if ( !ctx.isEmpty() ) {
+						PredictionContext newContext = ctx.parent; // "pop" invoking state
+						ATNState invokingState = atn.states.get(ctx.invokingState);
+						RuleTransition rt = (RuleTransition)invokingState.transition(0);
+						ATNState retState = rt.followState;
+						ATNConfig c = new ATNConfig(retState, config.alt, newContext);
+						closure(c, configs);
+					}
+				}
+			}
 			return;
 		}
 
@@ -550,8 +558,8 @@ public class LexerATNSimulator extends ATNSimulator {
 		ATNState p = config.state;
 		ATNConfig c = null;
 		if ( t.getClass() == RuleTransition.class ) {
-			RuleContext newContext =
-				new RuleContext(config.context, p.stateNumber);
+			PredictionContext newContext =
+				new SingletonPredictionContext(config.context, p.stateNumber);
 			c = new ATNConfig(config, t.target, newContext);
 		}
 		else if ( t.getClass() == PredicateTransition.class ) {
