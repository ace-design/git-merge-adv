diff --git a/java_case_studies/reference_repos/antlr4/importC7/desired.java b/java_case_studies/reference_repos/antlr4/importC7/spork_result.java
index fe1c2d3..be4673c 100644
--- a/java_case_studies/reference_repos/antlr4/importC7/desired.java
+++ b/java_case_studies/reference_repos/antlr4/importC7/spork_result.java
@@ -26,13 +26,15 @@
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
 package org.antlr.v4.runtime.atn;
 
+import java.io.IOException;
+import java.io.OutputStream;
 import org.antlr.v4.runtime.CharStream;
 import org.antlr.v4.runtime.IntStream;
 import org.antlr.v4.runtime.Lexer;
 import org.antlr.v4.runtime.LexerNoViableAltException;
+import org.antlr.v4.runtime.RuleContext;
 import org.antlr.v4.runtime.Token;
 import org.antlr.v4.runtime.dfa.DFA;
 import org.antlr.v4.runtime.dfa.DFAState;
@@ -40,39 +42,47 @@ import org.antlr.v4.runtime.misc.Interval;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.misc.Nullable;
 
-import java.io.IOException;
-import java.io.OutputStream;
 
 /** "dup" of ParserInterpreter */
 public class LexerATNSimulator extends ATNSimulator {
 	public static boolean debug = false;
+
 	public static boolean dfa_debug = false;
+
+	// forces unicode to stay in ATN
 	public static final int MAX_DFA_EDGE = 127; // forces unicode to stay in ATN
 
 	private boolean trace = false;
+
 	private OutputStream traceStream = null;
+
 	private boolean traceFailed = false;
 
-	/** When we hit an accept state in either the DFA or the ATN, we
-	 *  have to notify the character stream to start buffering characters
-	 *  via mark() and record the current state. The current state includes
-	 *  the current index into the input, the current line, and current
-	 *  character position in that line. Note that the Lexer is tracking
-	 *  the starting line and characterization of the token. These
-	 *  variables track the state of the simulator when it hits an accept state.
+	/**
+	 * When we hit an accept state in either the DFA or the ATN, we
+	 * have to notify the character stream to start buffering characters
+	 * via mark() and record the current state. The current state includes
+	 * the current index into the input, the current line, and current
+	 * character position in that line. Note that the Lexer is tracking
+	 * the starting line and characterization of the token. These
+	 * variables track the state of the simulator when it hits an accept state.
 	 *
-	 *  We track these variables separately for the DFA and ATN simulation
-	 *  because the DFA simulation often has to fail over to the ATN
-	 *  simulation. If the ATN simulation fails, we need the DFA to fall
-	 *  back to its previously accepted state, if any. If the ATN succeeds,
-	 *  then the ATN does the accept and the DFA simulator that invoked it
-	 *  can simply return the predicted token type.
+	 * We track these variables separately for the DFA and ATN simulation
+	 * because the DFA simulation often has to fail over to the ATN
+	 * simulation. If the ATN simulation fails, we need the DFA to fall
+	 * back to its previously accepted state, if any. If the ATN succeeds,
+	 * then the ATN does the accept and the DFA simulator that invoked it
+	 * can simply return the predicted token type.
 	 */
 	protected static class ExecState {
 		protected int index = -1;
+
 		protected int line = 0;
+
 		protected int charPos = -1;
+
 		protected DFAState state;
+
 		protected ATNConfig config;
 
 		protected void reset() {
@@ -87,10 +97,11 @@ public class LexerATNSimulator extends ATNSimulator {
 	@Nullable
 	protected final Lexer recog;
 
-	/** The current token's starting index into the character stream.
-	 *  Shared across DFA to ATN simulation in case the ATN fails and the
-	 *  DFA did not have a previous accept state. In this case, we use the
-	 *  ATN-generated exception object.
+	/**
+	 * The current token's starting index into the character stream.
+	 * Shared across DFA to ATN simulation in case the ATN fails and the
+	 * DFA did not have a previous accept state. In this case, we use the
+	 * ATN-generated exception object.
 	 */
 	protected int startIndex = -1;
 
@@ -102,6 +113,7 @@ public class LexerATNSimulator extends ATNSimulator {
 
 	@NotNull
 	public final DFA[] dfa;
+
 	protected int mode = Lexer.DEFAULT_MODE;
 
 	/** Used during DFA/ATN exec to record the most recent accept configuration info */
@@ -109,16 +121,20 @@ public class LexerATNSimulator extends ATNSimulator {
 	protected final ExecState prevAccept = new ExecState();
 
 	public static int ATN_failover = 0;
+
 	public static int match_calls = 0;
 
-	public LexerATNSimulator(@NotNull ATN atn) {
+	public LexerATNSimulator(@NotNull
+	ATN atn) {
 		this(null, atn);
 	}
 
-	public LexerATNSimulator(@Nullable Lexer recog, @NotNull ATN atn) {
+	public LexerATNSimulator(@Nullable
+	Lexer recog, @NotNull
+	ATN atn) {
 		super(atn);
 		dfa = new DFA[atn.modeToStartState.size()];
-		for (int i=0; i<atn.modeToStartState.size(); i++) {
+		for (int i = 0; i < atn.modeToStartState.size(); i++) {
 			dfa[i] = new DFA(atn.modeToStartState.get(i));
 		}
 		this.recog = recog;
@@ -145,20 +161,19 @@ public class LexerATNSimulator extends ATNSimulator {
 		this.traceFailed = false;
 	}
 
-	public int match(@NotNull CharStream input, int mode) {
+	public int match(@NotNull
+	CharStream input, int mode) {
 		match_calls++;
 		this.mode = mode;
 		int mark = input.mark();
 		traceBeginMatch(input, mode);
 		try {
-			if ( dfa[mode].s0==null ) {
+			if (dfa[mode].s0 == null) {
 				return matchATN(input);
-			}
-			else {
+			} else {
 				return execDFA(input, dfa[mode].s0);
 			}
-		}
-        finally {
+		} finally {
 			traceEndMatch();
 			input.release(mark);
 		}
@@ -174,97 +189,91 @@ public class LexerATNSimulator extends ATNSimulator {
 	}
 
 	// only called from test code from outside
-	public int matchATN(@NotNull CharStream input) {
+	public int matchATN(@NotNull
+	CharStream input) {
 		traceMatchATN();
 		startIndex = input.index();
 		this.prevAccept.reset();
 		ATNState startState = atn.modeToStartState.get(mode);
-
-		if ( debug ) {
+		if (debug) {
 			System.out.format("mode %d start: %s\n", mode, startState);
 		}
-
 		ATNConfigSet s0_closure = computeStartState(input, startState);
 		int old_mode = mode;
 		dfa[mode].s0 = addDFAState(s0_closure);
 		int predict = execATN(input, s0_closure, dfa[mode].s0);
-
-		if ( debug ) {
+		if (debug) {
 			System.out.format("DFA after matchATN: %s\n", dfa[old_mode].toLexerString());
 		}
-
 		tracePredict(predict);
 		return predict;
 	}
 
-	protected int execDFA(@NotNull CharStream input, @NotNull DFAState s0) {
+	protected int execDFA(@NotNull
+	CharStream input, @NotNull
+	DFAState s0) {
 		traceMatchDFA();
-
-		if ( dfa_debug ) {
+		if (dfa_debug) {
 			System.out.format("DFA[mode %d] exec LA(1)==%s\n", recog == null ? 0 : recog._mode, getTokenName(input.LA(1)));
 		}
-
 		//System.out.println("DFA start of execDFA: "+dfa[mode].toLexerString());
 		startIndex = input.index();
 		this.prevAccept.reset();
 		DFAState s = s0;
 		traceLookahead1();
 		int t = input.LA(1);
-	loop:
-		while ( true ) {
-			if ( dfa_debug ) {
+		loop : while (true) {
+			if (dfa_debug) {
 				System.out.format("state %d LA(1)==%s\n", s.stateNumber, getTokenName(t));
 			}
-
 			// if no edge, pop over to ATN interpreter, update DFA and return
-			if ( s.edges == null || t >= s.edges.length || t <= CharStream.EOF ||
-				 s.edges[t] == null )
-			{
+			if ((((s.edges == null) || (t >= s.edges.length)) || (t <= CharStream.EOF)) || (s.edges[t] == null)) {
 				ATN_failover++;
 				return failOverToATN(input, s);
 			}
-
 			DFAState target = s.edges[t];
-			if ( target == ERROR ) break;
+			if (target == ERROR) {
+				break;
+			}
 			s = target;
-
-			if ( s.isAcceptState ) {
-				if ( dfa_debug ) {
+			if (s.isAcceptState) {
+				if (dfa_debug) {
 					System.out.format("accept; predict %d in state %d\n", s.prediction, s.stateNumber);
 				}
-
 				markAcceptState(prevAccept, input, s);
 				// keep going unless we're at EOF; check if something else could match
 				// EOF never in DFA
-				if ( t==CharStream.EOF ) break;
+				if (t == CharStream.EOF) {
+					break;
+				}
 			}
-
 			consume(input);
 			traceLookahead1();
 			t = input.LA(1);
-		}
-
-		ATNConfigSet reach = prevAccept.state != null ? prevAccept.state.configset : null;
+		} 
+		ATNConfigSet reach = (prevAccept.state != null) ? prevAccept.state.configset : null;
 		return failOrAccept(prevAccept, input, reach, t);
 	}
 
-	protected int execATN(@NotNull CharStream input, @NotNull ATNConfigSet s0, @Nullable DFAState ds0) {
+	protected int execATN(@NotNull
+	CharStream input, @NotNull
+	ATNConfigSet s0, @Nullable
+	DFAState ds0) {
 		//System.out.println("enter exec index "+input.index()+" from "+s0);
 		@NotNull
 		ATNConfigSet closure = s0;
-		if ( debug ) {
+		if (debug) {
 			System.out.format("start state closure=%s\n", closure);
 		}
-
 		traceLookahead1();
 		int t = input.LA(1);
-		DFAState s = ds0; // s is current/from DFA state
+		DFAState s = ds0;// s is current/from DFA state
 
-		while ( true ) { // while more work
-			if ( debug ) {
+		while (true) {
+			// while more work
+			if (debug) {
 				System.out.format("in reach starting closure: %s\n", closure);
 			}
-
 			// As we move src->trg, src->trg, we keep track of the previous trg to
 			// avoid looking up the DFA state again, which is expensive.
 			// If the previous target was already part of the DFA, we might
@@ -285,30 +294,27 @@ public class LexerATNSimulator extends ATNSimulator {
 			DFAState target = null;
 			ATNConfigSet reach = null;
 			if (s != null) {
-				if ( s.edges != null && t < s.edges.length && t > CharStream.EOF ) {
+				if (((s.edges != null) && (t < s.edges.length)) && (t > CharStream.EOF)) {
 					closure = s.configset;
 					target = s.edges[t];
 					if (target == ERROR) {
 						break;
-					}
-					else if (target != null) {
+					} else if (target != null) {
 						reach = target.configset;
 					}
 				}
 			}
-
 			if (target == null) {
 				reach = new ATNConfigSet();
-
 				// if we don't find an existing DFA state
 				// Fill reach starting from closure, following t transitions
 				getReachableConfigSet(closure, reach, t);
-
-				if ( reach.isEmpty() ) { // we got nowhere on t from s
+				if (reach.isEmpty()) {
+					// we got nowhere on t from s
 					// we reached state associated with closure for sure, so
 					// make sure it's defined. worst case, we define s0 from
 					// start state configs.
-					DFAState from = s != null ? s : addDFAState(closure);
+					DFAState from = (s != null) ? s : addDFAState(closure);
 					// we got nowhere on t, don't throw out this knowledge; it'd
 					// cause a failover from DFA later.
 					if (from != null) {
@@ -316,52 +322,40 @@ public class LexerATNSimulator extends ATNSimulator {
 					}
 					break;
 				}
-
 				// Did we hit a stop state during reach op?
 				processAcceptStates(input, reach);
-
 				// Add an edge from s to target DFA found/created for reach
 				target = addDFAEdge(s, t, reach);
-			}
-			else if (target.isAcceptState) {
+			} else if (target.isAcceptState) {
 				traceAcceptState(target.prediction);
 				markAcceptState(prevAccept, input, target);
 			}
-
 			consume(input);
 			traceLookahead1();
 			t = input.LA(1);
-
 			closure = reach;
-			s = target; // flip; current DFA target becomes new src/from state
-		}
+			s = target;// flip; current DFA target becomes new src/from state
 
+		} 
 		return failOrAccept(prevAccept, input, closure, t);
 	}
 
-	protected int failOrAccept(ExecState prevAccept, CharStream input,
-							   ATNConfigSet reach, int t)
-	{
+	protected int failOrAccept(ExecState prevAccept, CharStream input, ATNConfigSet reach, int t) {
 		if (prevAccept.state != null) {
 			int ruleIndex = prevAccept.state.lexerRuleIndex;
 			int actionIndex = prevAccept.state.lexerActionIndex;
-			accept(input, ruleIndex, actionIndex,
-				prevAccept.index, prevAccept.line, prevAccept.charPos);
+			accept(input, ruleIndex, actionIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);
 			tracePredict(prevAccept.state.prediction);
 			return prevAccept.state.prediction;
-		}
-		else if (prevAccept.config != null) {
+		} else if (prevAccept.config != null) {
 			int ruleIndex = prevAccept.config.state.ruleIndex;
-			accept(input, ruleIndex, prevAccept.config.lexerActionIndex,
-				prevAccept.index, prevAccept.line, prevAccept.charPos);
+			accept(input, ruleIndex, prevAccept.config.lexerActionIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);
 			return atn.ruleToTokenType[ruleIndex];
-		}
-		else {
+		} else {
 			// if no accept and EOF is first char, return EOF
-			if ( t==CharStream.EOF && input.index()==startIndex ) {
+			if ((t == CharStream.EOF) && (input.index() == startIndex)) {
 				return Token.EOF;
 			}
-
 			throw new LexerNoViableAltException(recog, input, startIndex, reach);
 		}
 	}
@@ -371,60 +365,58 @@ public class LexerATNSimulator extends ATNSimulator {
 	 */
 	protected void getReachableConfigSet(ATNConfigSet closure, ATNConfigSet reach, int t) {
 		for (ATNConfig c : closure) {
-			if ( debug ) {
+			if (debug) {
 				System.out.format("testing %s at %s\n", getTokenName(t), c.toString(recog, true));
 			}
-
 			int n = c.state.getNumberOfTransitions();
-			for (int ti=0; ti<n; ti++) {               // for each transition
+			for (int ti = 0; ti < n; ti++) {
+			// for each transition
 				Transition trans = c.state.transition(ti);
 				ATNState target = getReachableTarget(trans, t);
-				if ( target!=null ) {
+				if (target != null) {
 					closure(new ATNConfig(c, target), reach);
 				}
 			}
 		}
 	}
 
-	protected void processAcceptStates(@NotNull CharStream input, @NotNull ATNConfigSet reach) {
-		for (int ci=0; ci<reach.size(); ci++) {
+	protected void processAcceptStates(@NotNull
+	CharStream input, @NotNull
+	ATNConfigSet reach) {
+		for (int ci = 0; ci < reach.size(); ci++) {
 			ATNConfig c = reach.get(ci);
-			if ( c.state instanceof RuleStopState) {
-				if ( debug ) {
-					System.out.format("in reach we hit accept state %s index %d, reach=%s, prevAccept=%s, prevIndex=%d\n",
-						c, input.index(), reach, prevAccept.config, prevAccept.index);
+			if (c.state instanceof RuleStopState) {
+				if (debug) {
+					System.out.format("in reach we hit accept state %s index %d, reach=%s, prevAccept=%s, prevIndex=%d\n", c, input.index(), reach, prevAccept.config, prevAccept.index);
 				}
-
 				int index = input.index();
-				if ( index > prevAccept.index ) {
+				if (index > prevAccept.index) {
 					traceAcceptState(c.alt);
 					// will favor prev accept at same index so "int" is keyword not ID
 					markAcceptState(prevAccept, input, c);
-					if ( debug ) {
+					if (debug) {
 						System.out.format("mark %s @ index=%d, %d:%d\n", c, index, prevAccept.line, prevAccept.charPos);
 					}
 				}
-
 				// if we reach lexer accept state, toss out any configs in rest
 				// of configs work list associated with this rule (config.alt);
 				// that rule is done. this is how we cut off nongreedy .+ loops.
-				deleteWildcardConfigsForAlt(reach, ci, c.alt); // CAUSES INF LOOP if reach not closure
+				deleteWildcardConfigsForAlt(reach, ci, c.alt);// CAUSES INF LOOP if reach not closure
 
-				 // move to next char, looking for longer match
+					// move to next char, looking for longer match
 				// (we continue processing if there are states in reach)
 			}
 		}
 	}
 
-	protected void accept(@NotNull CharStream input, int ruleIndex, int actionIndex,
-						  int index, int line, int charPos)
-	{
-		if ( debug ) {
+	protected void accept(@NotNull
+	CharStream input, int ruleIndex, int actionIndex, int index, int line, int charPos) {
+		if (debug) {
 			System.out.format("ACTION %s:%d\n", recog != null ? recog.getRuleNames()[ruleIndex] : ruleIndex, actionIndex);
 		}
-
-		if ( actionIndex>=0 && recog!=null ) recog.action(null, ruleIndex, actionIndex);
-
+		if ((actionIndex >= 0) && (recog != null)) {
+			recog.action(null, ruleIndex, actionIndex);
+		}
 		// seek to after last char in token
 		traceSeek(index);
 		input.seek(index);
@@ -435,103 +427,95 @@ public class LexerATNSimulator extends ATNSimulator {
 
 	@Nullable
 	public ATNState getReachableTarget(Transition trans, int t) {
-		if ( trans instanceof AtomTransition ) {
-			AtomTransition at = (AtomTransition)trans;
-			if ( at.label == t ) {
-				if ( debug ) {
+		if (trans instanceof AtomTransition) {
+			AtomTransition at = ((AtomTransition) (trans));
+			if (at.label == t) {
+				if (debug) {
 					System.out.format("match %s\n", getTokenName(at.label));
 				}
-
 				return at.target;
 			}
-		}
-		else if ( trans.getClass() == RangeTransition.class ) {
-			RangeTransition rt = (RangeTransition)trans;
-			if ( t>=rt.from && t<=rt.to ) {
-				if ( debug ) {
+		} else if (trans.getClass() == RangeTransition.class) {
+			RangeTransition rt = ((RangeTransition) (trans));
+			if ((t >= rt.from) && (t <= rt.to)) {
+				if (debug) {
 					System.out.format("match range %s\n", rt);
 				}
-
 				return rt.target;
 			}
-		}
-		else if ( trans instanceof SetTransition ) {
-			SetTransition st = (SetTransition)trans;
+		} else if (trans instanceof SetTransition) {
+			SetTransition st = ((SetTransition) (trans));
 			boolean not = trans instanceof NotSetTransition;
-			if ( (!not && st.set.contains(t)) ||
-				 (not && !st.set.contains(t) && t!=CharStream.EOF) ) // ~set doesn't not match EOF
-			{
-				if ( debug ) {
+					// ~set doesn't not match EOF
+			if (((!not) && st.set.contains(t)) || ((not && (!st.set.contains(t))) && (t != CharStream.EOF))) {
+				if (debug) {
 					System.out.format("match %sset %s\n", not ? "~" : "", st.set.toString(true));
 				}
-
 				return st.target;
 			}
-		}
-		else if ( trans instanceof WildcardTransition && t!=CharStream.EOF ) {
+		} else if ((trans instanceof WildcardTransition) && (t != CharStream.EOF)) {
 			return trans.target;
 		}
 		return null;
 	}
 
-	public void deleteWildcardConfigsForAlt(@NotNull ATNConfigSet closure, int ci, int alt) {
-		int j=ci+1;
-		while ( j<closure.size() ) {
+	public void deleteWildcardConfigsForAlt(@NotNull
+	ATNConfigSet closure, int ci, int alt) {
+		int j = ci + 1;
+		while (j < closure.size()) {
 			ATNConfig c = closure.get(j);
-			boolean isWildcard = c.state.getClass() == ATNState.class &&
-				c.state.transition(0).getClass() == WildcardTransition.class;
-			if ( c.alt == alt && isWildcard ) {
-				if ( debug ) {
+			boolean isWildcard = (c.state.getClass() == ATNState.class) && (c.state.transition(0).getClass() == WildcardTransition.class);
+			if ((c.alt == alt) && isWildcard) {
+				if (debug) {
 					System.out.format("deleteWildcardConfigsForAlt %s\n", c);
 				}
-
 				closure.remove(j);
+			} else {
+				j++;
 			}
-			else j++;
-		}
+		} 
 	}
 
 	@NotNull
-	protected ATNConfigSet computeStartState(@NotNull IntStream input,
-											 @NotNull ATNState p)
-	{
+	protected ATNConfigSet computeStartState(@NotNull
+	IntStream input, @NotNull
+	ATNState p) {
 		PredictionContext initialContext = EmptyPredictionContext.EMPTY;
 		ATNConfigSet configs = new ATNConfigSet();
-		for (int i=0; i<p.getNumberOfTransitions(); i++) {
+		for (int i = 0; i < p.getNumberOfTransitions(); i++) {
 			ATNState target = p.transition(i).target;
-			ATNConfig c = new ATNConfig(target, i+1, initialContext);
+			ATNConfig c = new ATNConfig(target, i + 1, initialContext);
 			closure(c, configs);
 		}
 		return configs;
 	}
 
-	protected void closure(@NotNull ATNConfig config, @NotNull ATNConfigSet configs) {
-		if ( debug ) {
-			System.out.println("closure("+config.toString(recog, true)+")");
+	protected void closure(@NotNull
+	ATNConfig config, @NotNull
+	ATNConfigSet configs) {
+		if (debug) {
+			System.out.println(("closure(" + config.toString(recog, true)) + ")");
 		}
-
 		// TODO? if ( closure.contains(t) ) return;
-
-		if ( config.state instanceof RuleStopState ) {
-			if ( debug ) {
-				if ( recog!=null ) {
+		if (config.state instanceof RuleStopState) {
+			if (debug) {
+				if (recog != null) {
 					System.out.format("closure at %s rule stop %s\n", recog.getRuleNames()[config.state.ruleIndex], config);
-				}
-				else {
+				} else {
 					System.out.format("closure at rule stop %s\n", config);
 				}
 			}
-
-			if ( config.context == null || config.context.isEmpty() ) {
+			if ((config.context == null) || config.context.isEmpty()) {
 				configs.add(config);
 				return;
 			}
-			if ( config.context!=null && !config.context.isEmpty() ) {
+			if ((config.context != null) && (!config.context.isEmpty())) {
 				for (SingletonPredictionContext ctx : config.context) {
-					if ( !ctx.isEmpty() ) {
-						PredictionContext newContext = ctx.parent; // "pop" invoking state
+					if (!ctx.isEmpty()) {
+			// "pop" invoking state
+						PredictionContext newContext = ctx.parent;
 						ATNState invokingState = atn.states.get(ctx.invokingState);
-						RuleTransition rt = (RuleTransition)invokingState.transition(0);
+						RuleTransition rt = ((RuleTransition) (invokingState.transition(0)));
 						ATNState retState = rt.followState;
 						ATNConfig c = new ATNConfig(retState, config.alt, newContext);
 						closure(c, configs);
@@ -540,73 +524,68 @@ public class LexerATNSimulator extends ATNSimulator {
 			}
 			return;
 		}
-
 		// optimization
-		if ( !config.state.onlyHasEpsilonTransitions() )	{
+		if (!config.state.onlyHasEpsilonTransitions()) {
 			configs.add(config);
 		}
-
 		ATNState p = config.state;
-		for (int i=0; i<p.getNumberOfTransitions(); i++) {
+		for (int i = 0; i < p.getNumberOfTransitions(); i++) {
 			Transition t = p.transition(i);
 			ATNConfig c = getEpsilonTarget(config, t);
-			if ( c!=null ) closure(c, configs);
+			if (c != null) {
+				closure(c, configs);
+			}
 		}
 	}
 
 	@Nullable
-	public ATNConfig getEpsilonTarget(@NotNull ATNConfig config, @NotNull Transition t) {
+	public ATNConfig getEpsilonTarget(@NotNull
+	ATNConfig config, @NotNull
+	Transition t) {
 		ATNState p = config.state;
 		ATNConfig c = null;
-		if ( t.getClass() == RuleTransition.class ) {
-			PredictionContext newContext =
-				new SingletonPredictionContext(config.context, p.stateNumber);
+		if (t.getClass() == RuleTransition.class) {
+			PredictionContext newContext = new SingletonPredictionContext(config.context, p.stateNumber);
 			c = new ATNConfig(config, t.target, newContext);
-		}
-		else if ( t.getClass() == PredicateTransition.class ) {
+		} else if (t.getClass() == PredicateTransition.class) {
 			if (recog == null) {
 				System.out.format("Predicates cannot be evaluated without a recognizer; assuming true.\n");
 			}
-
-			PredicateTransition pt = (PredicateTransition)t;
-			if ( recog == null || recog.sempred(null, pt.ruleIndex, pt.predIndex) ) {
+			PredicateTransition pt = ((PredicateTransition) (t));
+			if ((recog == null) || recog.sempred(null, pt.ruleIndex, pt.predIndex)) {
 				c = new ATNConfig(config, t.target, pt.getPredicate());
 			}
-		}
-		// ignore actions; just exec one per rule upon accept
-		else if ( t.getClass() == ActionTransition.class ) {
+		} else if (t.getClass() == ActionTransition.class) {
 			c = new ATNConfig(config, t.target);
-			c.lexerActionIndex = ((ActionTransition)t).actionIndex;
-		}
-		else if ( t.isEpsilon() ) {
+			c.lexerActionIndex = ((ActionTransition) (t)).actionIndex;
+		} else if (t.isEpsilon()) {
 			c = new ATNConfig(config, t.target);
 		}
 		return c;
 	}
 
-	protected int failOverToATN(@NotNull CharStream input, @NotNull DFAState s) {
+	protected int failOverToATN(@NotNull
+	CharStream input, @NotNull
+	DFAState s) {
 		traceFailOverToATN();
-
-		if ( dfa_debug ) {
+		if (dfa_debug) {
 			System.out.format("no edge for %s\n", getTokenName(input.LA(1)));
-			System.out.format("ATN exec upon %s at DFA state %d = %s\n",
-							  input.getText(Interval.of(startIndex, input.index())), s.stateNumber, s.configset);
+			System.out.format("ATN exec upon %s at DFA state %d = %s\n", input.getText(Interval.of(startIndex, input.index())), s.stateNumber, s.configset);
 		}
-
 		int ttype = execATN(input, s.configset, s);
-
-		if ( dfa_debug ) {
-			System.out.format("back from DFA update, ttype=%d, dfa[mode %d]=\n%s\n",
-				ttype, mode, dfa[mode].toLexerString());
+		if (dfa_debug) {
+			System.out.format("back from DFA update, ttype=%d, dfa[mode %d]=\n%s\n", ttype, mode, dfa[mode].toLexerString());
 		}
-
 		// action already executed by ATN
 		// we've updated DFA, exec'd action, and have our deepest answer
 		tracePredict(ttype);
 		return ttype;
 	}
 
-	protected void markAcceptState(@NotNull ExecState state, @NotNull CharStream input, @NotNull DFAState dfaState) {
+	protected void markAcceptState(@NotNull
+	ExecState state, @NotNull
+	CharStream input, @NotNull
+	DFAState dfaState) {
 		state.index = input.index();
 		state.line = line;
 		state.charPos = charPositionInLine;
@@ -614,7 +593,10 @@ public class LexerATNSimulator extends ATNSimulator {
 		state.state = dfaState;
 	}
 
-	protected void markAcceptState(@NotNull ExecState state, @NotNull CharStream input, @NotNull ATNConfig config) {
+	protected void markAcceptState(@NotNull
+	ExecState state, @NotNull
+	CharStream input, @NotNull
+	ATNConfig config) {
 		state.index = input.index();
 		state.line = line;
 		state.charPos = charPositionInLine;
@@ -622,22 +604,18 @@ public class LexerATNSimulator extends ATNSimulator {
 		state.state = null;
 	}
 
-	protected DFAState addDFAEdge(@NotNull DFAState from,
-								  int t,
-								  @NotNull ATNConfigSet q)
-	{
+	protected DFAState addDFAEdge(@NotNull
+	DFAState from, int t, @NotNull
+	ATNConfigSet q) {
 		DFAState to = addDFAState(q);
-
 		// even if we can add the states, we can't add an edge for labels out of range
-		if (t < 0 || t > MAX_DFA_EDGE) {
+		if ((t < 0) || (t > MAX_DFA_EDGE)) {
 			return to;
 		}
-
-//		System.out.println("MOVE "+p+" -> "+q+" upon "+getTokenName(t));
-		if (from == null || to == null) {
+		// System.out.println("MOVE "+p+" -> "+q+" upon "+getTokenName(t));
+		if ((from == null) || (to == null)) {
 			return to;
 		}
-
 		addDFAEdge(from, t, to);
 		return to;
 	}
@@ -648,10 +626,10 @@ public class LexerATNSimulator extends ATNSimulator {
 			//  make room for tokens 1..n and -1 masquerading as index 0
 			p.edges = new DFAState[MAX_DFA_EDGE+1]; // TODO: make adaptive
 		}
-//		if ( t==Token.EOF ) {
-//			System.out.println("state "+p+" has EOF edge");
-//			t = 0;
-//		}
+	//		if ( t==Token.EOF ) {
+	//			System.out.println("state "+p+" has EOF edge");
+	//			t = 0;
+	//		}
 		p.edges[t] = q; // connect
 	}
 
@@ -678,34 +656,33 @@ public class LexerATNSimulator extends ATNSimulator {
 		test them, we cannot cash the DFA state target of ID.
 	 */
 	@Nullable
-	protected DFAState addDFAState(@NotNull ATNConfigSet configs) {
+	protected DFAState addDFAState(@NotNull
+	ATNConfigSet configs) {
 		DFAState proposed = new DFAState(configs);
 		DFAState existing = dfa[mode].states.get(proposed);
-		if ( existing!=null ) return existing;
-
+		if (existing != null) {
+			return existing;
+		}
 		DFAState newState = proposed;
-
 		ATNConfig firstConfigWithRuleStopState = null;
 		boolean traversedPredicate = false;
 		for (ATNConfig c : configs) {
-			if ( firstConfigWithRuleStopState==null &&
-				 c.state instanceof RuleStopState )
-			{
+			if ((firstConfigWithRuleStopState == null) && (c.state instanceof RuleStopState)) {
 				firstConfigWithRuleStopState = c;
 			}
-			if ( c.semanticContext!=null && c.semanticContext!=SemanticContext.NONE ) {
+			if ((c.semanticContext != null) && (c.semanticContext != SemanticContext.NONE)) {
 				traversedPredicate = true;
 			}
 		}
-
-		if ( firstConfigWithRuleStopState!=null ) {
+		if (firstConfigWithRuleStopState != null) {
 			newState.isAcceptState = true;
 			newState.lexerRuleIndex = firstConfigWithRuleStopState.state.ruleIndex;
 			newState.lexerActionIndex = firstConfigWithRuleStopState.lexerActionIndex;
 			newState.prediction = atn.ruleToTokenType[newState.lexerRuleIndex];
 		}
-
-		if ( traversedPredicate ) return null; // cannot cache
+		if (traversedPredicate) {
+			return null;
+		}// cannot cache
 
 		newState.stateNumber = dfa[mode].states.size();
 		newState.configset = new ATNConfigSet();
@@ -721,7 +698,8 @@ public class LexerATNSimulator extends ATNSimulator {
 
 	/** Get the text of the current token */
 	@NotNull
-	public String getText(@NotNull CharStream input) {
+	public String getText(@NotNull
+	CharStream input) {
 		return input.getText(Interval.of(startIndex, input.index()));
 	}
 
@@ -733,11 +711,12 @@ public class LexerATNSimulator extends ATNSimulator {
 		return charPositionInLine;
 	}
 
-	public void consume(@NotNull CharStream input) {
+	public void consume(@NotNull
+	CharStream input) {
 		int curChar = input.LA(1);
-		if ( curChar=='\n' ) {
+		if (curChar == '\n') {
 			line++;
-			charPositionInLine=0;
+			charPositionInLine = 0;
 		} else {
 			charPositionInLine++;
 		}
@@ -945,12 +924,11 @@ public class LexerATNSimulator extends ATNSimulator {
 	}
 
 	private void traceBeginMatchSlow(CharStream input, int mode) {
-		traceByteIntSlow(LexerOpCode.BeginMatch, (byte)mode, input.index());
+		traceByteIntSlow(LexerOpCode.BeginMatch, ((byte) (mode)), input.index());
 	}
 
 	private void traceConsumeSlow(CharStream input, int c) {
 		assert traceStream != null;
-
 		if (!traceFailed) {
 			traceIntIntSlow(LexerOpCode.Consume, c, input.index());
 		}
@@ -958,13 +936,13 @@ public class LexerATNSimulator extends ATNSimulator {
 
 	private void traceEmitSlow(Token token) {
 		assert traceStream != null;
-
-		if (token != null && !traceFailed) {
+		if ((token != null) && (!traceFailed)) {
 			traceIntIntIntIntSlow(LexerOpCode.Emit, token.getStartIndex(), token.getStopIndex(), token.getType(), token.getChannel());
 		}
 	}
 
 	public enum LexerOpCode {
+
 		BeginMatch(5),
 		EndMatch(0),
 		MatchATN(0),
@@ -972,15 +950,12 @@ public class LexerATNSimulator extends ATNSimulator {
 		FailOverToATN(0),
 		AcceptState(4),
 		Predict(4),
-
 		Seek(4),
 		Consume(8),
 		Lookahead1(0),
-
 		PushMode(1),
 		PopMode(0),
 		Emit(16);
-
 		private final int argumentSize;
 
 		private LexerOpCode(int argumentSize) {
