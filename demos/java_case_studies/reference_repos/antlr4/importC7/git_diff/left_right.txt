diff --git a/java_case_studies/reference_repos/antlr4/importC7/left.java b/java_case_studies/reference_repos/antlr4/importC7/right.java
index affdda6..1873550 100644
--- a/java_case_studies/reference_repos/antlr4/importC7/left.java
+++ b/java_case_studies/reference_repos/antlr4/importC7/right.java
@@ -33,9 +33,11 @@ import org.antlr.v4.runtime.CharStream;
 import org.antlr.v4.runtime.IntStream;
 import org.antlr.v4.runtime.Lexer;
 import org.antlr.v4.runtime.LexerNoViableAltException;
+import org.antlr.v4.runtime.RuleContext;
 import org.antlr.v4.runtime.Token;
 import org.antlr.v4.runtime.dfa.DFA;
 import org.antlr.v4.runtime.dfa.DFAState;
+import org.antlr.v4.runtime.misc.Interval;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.misc.Nullable;
 
@@ -44,6 +46,8 @@ import java.io.OutputStream;
 
 /** "dup" of ParserInterpreter */
 public class LexerATNSimulator extends ATNSimulator {
+	public static final RuleContext EMPTY_LEXER_RULE_CONTEXT = new RuleContext();
+
 	public static boolean debug = false;
 	public static boolean dfa_debug = false;
 	public static final int MAX_DFA_EDGE = 127; // forces unicode to stay in ATN
@@ -494,7 +498,7 @@ public class LexerATNSimulator extends ATNSimulator {
 	protected ATNConfigSet computeStartState(@NotNull IntStream input,
 											 @NotNull ATNState p)
 	{
-		PredictionContext initialContext = EmptyPredictionContext.EMPTY;
+		RuleContext initialContext = EMPTY_LEXER_RULE_CONTEXT;
 		ATNConfigSet configs = new ATNConfigSet();
 		for (int i=0; i<p.getNumberOfTransitions(); i++) {
 			ATNState target = p.transition(i).target;
@@ -525,18 +529,12 @@ public class LexerATNSimulator extends ATNSimulator {
 				configs.add(config);
 				return;
 			}
-			if ( config.context!=null && !config.context.isEmpty() ) {
-				for (SingletonPredictionContext ctx : config.context) {
-					if ( !ctx.isEmpty() ) {
-						PredictionContext newContext = ctx.parent; // "pop" invoking state
-						ATNState invokingState = atn.states.get(ctx.invokingState);
-						RuleTransition rt = (RuleTransition)invokingState.transition(0);
-						ATNState retState = rt.followState;
-						ATNConfig c = new ATNConfig(retState, config.alt, newContext);
-						closure(c, configs);
-					}
-				}
-			}
+			RuleContext newContext = config.context.parent; // "pop" invoking state
+			ATNState invokingState = atn.states.get(config.context.invokingState);
+			RuleTransition rt = (RuleTransition)invokingState.transition(0);
+			ATNState retState = rt.followState;
+			ATNConfig c = new ATNConfig(retState, config.alt, newContext);
+			closure(c, configs);
 			return;
 		}
 
@@ -558,8 +556,8 @@ public class LexerATNSimulator extends ATNSimulator {
 		ATNState p = config.state;
 		ATNConfig c = null;
 		if ( t.getClass() == RuleTransition.class ) {
-			PredictionContext newContext =
-				new SingletonPredictionContext(config.context, p.stateNumber);
+			RuleContext newContext =
+				new RuleContext(config.context, p.stateNumber);
 			c = new ATNConfig(config, t.target, newContext);
 		}
 		else if ( t.getClass() == PredicateTransition.class ) {
@@ -589,7 +587,7 @@ public class LexerATNSimulator extends ATNSimulator {
 		if ( dfa_debug ) {
 			System.out.format("no edge for %s\n", getTokenName(input.LA(1)));
 			System.out.format("ATN exec upon %s at DFA state %d = %s\n",
-							  input.substring(startIndex, input.index()), s.stateNumber, s.configset);
+							  input.getText(Interval.of(startIndex, input.index())), s.stateNumber, s.configset);
 		}
 
 		int ttype = execATN(input, s.configset, s);
@@ -721,7 +719,7 @@ public class LexerATNSimulator extends ATNSimulator {
 	/** Get the text of the current token */
 	@NotNull
 	public String getText(@NotNull CharStream input) {
-		return input.substring(this.startIndex, input.index());
+		return input.getText(Interval.of(startIndex, input.index()));
 	}
 
 	public int getLine() {
