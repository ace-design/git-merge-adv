diff --git a/java_case_studies/reference_repos/antlr4/importC1/left.java b/java_case_studies/reference_repos/antlr4/importC1/right.java
index 8238c47..c4b8e25 100644
--- a/java_case_studies/reference_repos/antlr4/importC1/left.java
+++ b/java_case_studies/reference_repos/antlr4/importC1/right.java
@@ -58,6 +58,7 @@ import org.antlr.v4.runtime.misc.IntegerList;
 import org.antlr.v4.runtime.misc.Interval;
 import org.antlr.v4.runtime.misc.NotNull;
 import org.antlr.v4.runtime.misc.Nullable;
+import org.antlr.v4.runtime.misc.Pair;
 import org.antlr.v4.runtime.tree.ParseTree;
 import org.antlr.v4.semantics.SemanticPipeline;
 import org.antlr.v4.tool.ANTLRMessage;
@@ -486,28 +487,36 @@ public abstract class BaseTest {
 		return output;
 	}
 
-	protected String execParser(String grammarFileName,
-								String grammarStr,
-								String parserName,
-								String lexerName,
-								String startRuleName,
-								String input, boolean debug)
+	public ParseTree execParser(String startRuleName, String input,
+								String parserName, String lexerName)
+		throws Exception
 	{
-		boolean success = rawGenerateAndBuildRecognizer(grammarFileName,
-														grammarStr,
-														parserName,
-														lexerName,
-														"-visitor");
-		assertTrue(success);
-		writeFile(tmpdir, "input", input);
-		return rawExecRecognizer(parserName,
-								 lexerName,
-								 startRuleName,
-								 debug);
+		Pair<Parser, Lexer> pl = getParserAndLexer(input, parserName, lexerName);
+		Parser parser = pl.a;
+		return execStartRule(startRuleName, parser);
 	}
 
-	public ParseTree execParser(String startRuleName, String input,
-								String parserName, String lexerName)
+	public ParseTree execStartRule(String startRuleName, Parser parser)
+		throws IllegalAccessException, InvocationTargetException,
+			   NoSuchMethodException
+	{
+		Method startRule = null;
+		Object[] args = null;
+		try {
+			startRule = parser.getClass().getMethod(startRuleName);
+		}
+		catch (NoSuchMethodException nsme) {
+			// try with int _p arg for recursive func
+			startRule = parser.getClass().getMethod(startRuleName, int.class);
+			args = new Integer[] {0};
+		}
+		ParseTree result = (ParseTree)startRule.invoke(parser, args);
+//		System.out.println("parse tree = "+result.toStringTree(parser));
+		return result;
+	}
+
+	public Pair<Parser, Lexer> getParserAndLexer(String input,
+												 String parserName, String lexerName)
 		throws Exception
 	{
 		final Class<? extends Lexer> lexerClass = loadLexerClassFromTempDir(lexerName);
@@ -523,20 +532,7 @@ public abstract class BaseTest {
 		Constructor<? extends Parser> pctor = pc.getConstructor(TokenStream.class);
 		CommonTokenStream tokens = new CommonTokenStream(lexer);
 		Parser parser = pctor.newInstance(tokens);
-
-		Method startRule = null;
-		Object[] args = null;
-		try {
-			startRule = parserClass.getMethod(startRuleName);
-		}
-		catch (NoSuchMethodException nsme) {
-			// try with int _p arg for recursive func
-			startRule = parserClass.getMethod(startRuleName, int.class);
-			args = new Integer[] {0};
-		}
-		ParseTree result = (ParseTree)startRule.invoke(parser, args);
-		System.out.println("parse tree = "+result.toStringTree(parser));
-		return result;
+		return new Pair<Parser, Lexer>(parser, lexer);
 	}
 
 	public Class<?> loadClassFromTempDir(String name) throws Exception {
@@ -547,11 +543,31 @@ public abstract class BaseTest {
 	}
 
 	public Class<? extends Lexer> loadLexerClassFromTempDir(String name) throws Exception {
-		return (Class<? extends Lexer>)loadClassFromTempDir(name);
+		return loadClassFromTempDir(name).asSubclass(Lexer.class);
 	}
 
 	public Class<? extends Parser> loadParserClassFromTempDir(String name) throws Exception {
-		return (Class<? extends Parser>)loadClassFromTempDir(name);
+		return loadClassFromTempDir(name).asSubclass(Parser.class);
+	}
+
+	protected String execParser(String grammarFileName,
+								String grammarStr,
+								String parserName,
+								String lexerName,
+								String startRuleName,
+								String input, boolean debug)
+	{
+		boolean success = rawGenerateAndBuildRecognizer(grammarFileName,
+														grammarStr,
+														parserName,
+														lexerName,
+														"-visitor");
+		assertTrue(success);
+		writeFile(tmpdir, "input", input);
+		return rawExecRecognizer(parserName,
+								 lexerName,
+								 startRuleName,
+								 debug);
 	}
 
 	/** Return true if all is well */
