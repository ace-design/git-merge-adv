diff --git a/java_case_studies/reference_repos/openhtmltopdf/importC2/desired.java b/java_case_studies/reference_repos/openhtmltopdf/importC2/jdime.java
index d68d0f1..776236d 100644
--- a/java_case_studies/reference_repos/openhtmltopdf/importC2/desired.java
+++ b/java_case_studies/reference_repos/openhtmltopdf/importC2/jdime.java
@@ -1,10 +1,8 @@
 package com.openhtmltopdf.objects.pdf;
-
 import java.awt.*;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Map;
-
 import org.apache.pdfbox.cos.COSArray;
 import org.apache.pdfbox.cos.COSName;
 import org.apache.pdfbox.cos.COSStream;
@@ -13,60 +11,65 @@ import org.apache.pdfbox.pdmodel.PDPage;
 import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;
 import org.apache.pdfbox.util.Charsets;
 import org.w3c.dom.Element;
-
 import com.openhtmltopdf.extend.OutputDevice;
 import com.openhtmltopdf.pdfboxout.PdfBoxOutputDevice;
 import com.openhtmltopdf.render.RenderingContext;
 
-public class MergeBackgroundPdfDrawer extends PdfDrawerBase
-{
+public class MergeBackgroundPdfDrawer extends PdfDrawerBase {
 
-    @Override
-    public Map<Shape, String> drawObject(Element e, double x, double y, double width, double height,
-            OutputDevice outputDevice, RenderingContext ctx, int dotsPerPixel)
-    {
+<<<<<<< left.java
+  private final Map<PDFBoxDeviceReference, SoftReference<Map<String, PDFormXObject>>> formMap = new HashMap<>();
+=======
+>>>>>>> Unknown file: This is a bug in JDime.
 
-        /*
-         * We can only do something if this is a PDF.
-         */
-        if (!(outputDevice instanceof PdfBoxOutputDevice))
-            return null;
-
-        PdfBoxOutputDevice pdfBoxOutputDevice = (PdfBoxOutputDevice) outputDevice;
 
+  @Override public Map<Shape, String> drawObject(Element e, double x, double y, double width, double height, OutputDevice outputDevice, RenderingContext ctx, int dotsPerPixel) {
+    if (!(outputDevice instanceof PdfBoxOutputDevice)) {
+      return null;
+    }
+    PdfBoxOutputDevice pdfBoxOutputDevice = (PdfBoxOutputDevice) outputDevice;
 
-        try
-        {
-            LayerUtility layerUtility = new LayerUtility(pdfBoxOutputDevice.getWriter());
-            PDFormXObject pdFormXObject = importPageAsXForm(ctx,e, pdfBoxOutputDevice, layerUtility);
-            PDPage page = pdfBoxOutputDevice.getPage();
+<<<<<<< left.java
+    if (map == null) {
+      map = new HashMap<>();
+      formMap.put(new PDFBoxDeviceReference(pdfBoxOutputDevice), new SoftReference<>(map));
+    }
+=======
+>>>>>>> Unknown file: This is a bug in JDime.
 
-            /*
-             * This ensures that the Contents of the page is a COSArray. The first entry in
-             * the array is just a save state (e.g. 'q'). We can override it to add the
-             * XForm.
-             */
-            layerUtility.wrapInSaveRestore(page);
-            COSArray cosArray = (COSArray) page.getCOSObject()
-                    .getDictionaryObject(COSName.CONTENTS);
-            COSStream saveStateAndPlacePageBackgroundStream = (COSStream) cosArray.get(0);
-            OutputStream saveAndPlaceStream = saveStateAndPlacePageBackgroundStream
-                    .createOutputStream();
-            saveAndPlaceStream.write("q\n".getBytes(Charsets.US_ASCII));
-            COSName name = page.getResources().add(pdFormXObject);
-            name.writePDF(saveAndPlaceStream);
-            saveAndPlaceStream.write(' ');
-            saveAndPlaceStream.write("Do\n".getBytes(Charsets.US_ASCII));
-            saveAndPlaceStream.write("Q\n".getBytes(Charsets.US_ASCII));
-            saveAndPlaceStream.write("q\n".getBytes(Charsets.US_ASCII));
-            saveAndPlaceStream.close();
+    try {
+      LayerUtility layerUtility = new LayerUtility(pdfBoxOutputDevice.getWriter());
 
+<<<<<<< left.java
+      if (pdFormXObject == null) {
+        try (InputStream inputStream = new URL(url).openStream()) {
+          PDFParser pdfParser = new PDFParser(new RandomAccessBuffer(inputStream));
+          pdfParser.parse();
+          pdFormXObject = layerUtility.importPageAsForm(pdfParser.getPDDocument(), pdfpage - 1);
+          pdfParser.getPDDocument().close();
         }
-        catch (IOException e1)
-        {
-            e1.printStackTrace();
-        }
-        return null;
-    }
+        map.put(url, pdFormXObject);
+      }
+=======
+      PDFormXObject pdFormXObject = importPageAsXForm(ctx, e, pdfBoxOutputDevice, layerUtility);
+>>>>>>> right.java
 
-}
+      PDPage page = pdfBoxOutputDevice.getPage();
+      layerUtility.wrapInSaveRestore(page);
+      COSArray cosArray = (COSArray) page.getCOSObject().getDictionaryObject(COSName.CONTENTS);
+      COSStream saveStateAndPlacePageBackgroundStream = (COSStream) cosArray.get(0);
+      OutputStream saveAndPlaceStream = saveStateAndPlacePageBackgroundStream.createOutputStream();
+      saveAndPlaceStream.write("q\n".getBytes(Charsets.US_ASCII));
+      COSName name = page.getResources().add(pdFormXObject);
+      name.writePDF(saveAndPlaceStream);
+      saveAndPlaceStream.write(' ');
+      saveAndPlaceStream.write("Do\n".getBytes(Charsets.US_ASCII));
+      saveAndPlaceStream.write("Q\n".getBytes(Charsets.US_ASCII));
+      saveAndPlaceStream.write("q\n".getBytes(Charsets.US_ASCII));
+      saveAndPlaceStream.close();
+    } catch (IOException e1) {
+      e1.printStackTrace();
+    }
+    return null;
+  }
+}
\ No newline at end of file
