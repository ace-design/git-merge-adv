diff --git a/java_case_studies/reference_repos/Jest/conflict11/base.java b/java_case_studies/reference_repos/Jest/conflict11/right.java
index 60178b2..eb7145c 100755
--- a/java_case_studies/reference_repos/Jest/conflict11/base.java
+++ b/java_case_studies/reference_repos/Jest/conflict11/right.java
@@ -1,28 +1,21 @@
 package io.searchbox.client.http;
 
 
-import io.searchbox.Action;
+import com.google.gson.Gson;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonSyntaxException;
+import io.searchbox.action.Action;
 import io.searchbox.client.AbstractJestClient;
 import io.searchbox.client.JestClient;
 import io.searchbox.client.JestResult;
 import io.searchbox.client.JestResultHandler;
 import io.searchbox.client.http.apache.HttpDeleteWithEntity;
 import io.searchbox.client.http.apache.HttpGetWithEntity;
-
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.nio.charset.Charset;
-import java.util.Map.Entry;
-import java.util.concurrent.ExecutionException;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.StatusLine;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
-import org.apache.http.client.methods.HttpHead;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.client.methods.HttpPut;
-import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.methods.*;
 import org.apache.http.concurrent.FutureCallback;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
@@ -32,10 +25,11 @@ import org.apache.http.util.EntityUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.gson.Gson;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonSyntaxException;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
+import java.util.Map.Entry;
+import java.util.concurrent.ExecutionException;
 
 
 /**
@@ -49,7 +43,8 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
     private CloseableHttpAsyncClient asyncClient;
     private Charset entityEncoding = Charset.forName("utf-8");
 
-    public JestResult execute(Action clientRequest) throws IOException {
+    @Override
+    public <T extends JestResult> T execute(Action<T> clientRequest) throws IOException {
 
         String elasticSearchRestUrl = getRequestURL(getElasticSearchServer(), clientRequest.getURI());
 
@@ -77,8 +72,9 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
         return deserializeResponse(response, clientRequest);
     }
 
-    public void executeAsync(final Action clientRequest, final JestResultHandler<JestResult> resultHandler)
-            throws ExecutionException, InterruptedException, IOException {
+    @Override
+    public <T extends JestResult> void executeAsync(final Action<T> clientRequest, final JestResultHandler<T> resultHandler)
+    throws ExecutionException, InterruptedException, IOException {
 
         synchronized (this) {
             if (!asyncClient.isRunning()) {
@@ -101,7 +97,7 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
             @Override
             public void completed(final HttpResponse response) {
                 try {
-                    JestResult jestResult = deserializeResponse(response, clientRequest);
+                    T jestResult = deserializeResponse(response, clientRequest);
                     resultHandler.completed(jestResult);
                 } catch (IOException e) {
                     log.error("Exception occurred while serializing the response. Exception: " + e.getMessage());
@@ -120,6 +116,7 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
 
     }
 
+    @Override
     public void shutdownClient() {
         super.shutdownClient();
         try {
@@ -180,13 +177,14 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
         }
     }
 
-    private JestResult deserializeResponse(HttpResponse response, Action clientRequest) throws IOException {
+    private <T extends JestResult> T deserializeResponse(HttpResponse response, Action<T> clientRequest) throws IOException {
         StatusLine statusLine = response.getStatusLine();
-        return createNewElasticSearchResult(
+        return clientRequest.createNewElasticSearchResult(
                 response.getEntity() != null ? EntityUtils.toString(response.getEntity()) : null,
                 statusLine.getStatusCode(),
                 statusLine.getReasonPhrase(),
-                clientRequest);
+                gson
+        );
     }
 
     public CloseableHttpClient getHttpClient() {
