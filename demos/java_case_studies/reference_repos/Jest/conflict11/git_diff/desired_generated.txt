diff --git a/java_case_studies/reference_repos/Jest/conflict11/desired.java b/java_case_studies/demo_results/MethodUnion/Jest-conflict11.java
old mode 100755
new mode 100644
index 9e83391..4d7cf15
--- a/java_case_studies/reference_repos/Jest/conflict11/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/Jest-conflict11.java
@@ -1,6 +1,4 @@
 package io.searchbox.client.http;
-
-
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
@@ -20,27 +18,54 @@ import org.apache.http.concurrent.FutureCallback;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
+import org.apache.http.client.methods.HttpHead;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.util.EntityUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
 import java.util.Map.Entry;
 import java.util.concurrent.ExecutionException;
 
+public class JestHttpClient extends AbstractJestClient implements JestClient{
+
+    final static Logger log = LoggerFactory.getLogger(JestHttpClient.class);,
+    private CloseableHttpClient httpClient;,
+    private CloseableHttpAsyncClient asyncClient;,
+    private Charset entityEncoding = Charset.forName("utf-8");,
+
+    public JestResult execute(Action clientRequest) throws IOException {
+
+        String elasticSearchRestUrl = getRequestURL(getElasticSearchServer(), clientRequest.getURI());
+
+        HttpUriRequest request = constructHttpMethod(clientRequest.getRestMethodName(), elasticSearchRestUrl, clientRequest.getData(gson));
+
+        // add headers added to action
+        if (!clientRequest.getHeaders().isEmpty()) {
+            for (Entry<String, Object> header : clientRequest.getHeaders().entrySet()) {
+                request.addHeader(header.getKey(), header.getValue().toString());
+            }
+        }
 
-/**
- * @author Dogukan Sonmez
- * @author cihat keser
- */
-public class JestHttpClient extends AbstractJestClient implements JestClient {
+        HttpResponse response = httpClient.execute(request);
 
-    final static Logger log = LoggerFactory.getLogger(JestHttpClient.class);
-    private CloseableHttpClient httpClient;
-    private CloseableHttpAsyncClient asyncClient;
-    private Charset entityEncoding = Charset.forName("utf-8");
+        // If head method returns no content, it is added according to response code thanks to https://github.com/hlassiege
+        if (request.getMethod().equalsIgnoreCase("HEAD")) {
+            if (response.getEntity() == null) {
+                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
+                    response.setEntity(new StringEntity("{\"ok\" : true, \"found\" : true}"));
+                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
+                    response.setEntity(new StringEntity("{\"ok\" : false, \"found\" : false}"));
+                }
+            }
+        }
+        return deserializeResponse(response, clientRequest);
+    }
 
     @Override
     public <T extends JestResult> T execute(Action<T> clientRequest) throws IOException {
@@ -71,6 +96,49 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
         return deserializeResponse(response, clientRequest);
     }
 
+    public void executeAsync(final Action clientRequest, final JestResultHandler<JestResult> resultHandler)
+            throws ExecutionException, InterruptedException, IOException {
+
+        synchronized (this) {
+            if (!asyncClient.isRunning()) {
+                asyncClient.start();
+            }
+        }
+
+        String elasticSearchRestUrl = getRequestURL(getElasticSearchServer(), clientRequest.getURI());
+
+        final HttpUriRequest request = constructHttpMethod(clientRequest.getRestMethodName(), elasticSearchRestUrl, clientRequest.getData(gson));
+
+        // add headers added to action
+        if (!clientRequest.getHeaders().isEmpty()) {
+            for (Entry<String, Object> header : clientRequest.getHeaders().entrySet()) {
+                request.addHeader(header.getKey(), header.getValue() + "");
+            }
+        }
+
+        asyncClient.execute(request, new FutureCallback<HttpResponse>() {
+            @Override
+            public void completed(final HttpResponse response) {
+                try {
+                    JestResult jestResult = deserializeResponse(response, clientRequest);
+                    resultHandler.completed(jestResult);
+                } catch (IOException e) {
+                    log.error("Exception occurred while serializing the response. Exception: " + e.getMessage());
+                }
+            }
+
+            @Override
+            public void failed(final Exception ex) {
+                resultHandler.failed(ex);
+            }
+
+            @Override
+            public void cancelled() {
+            }
+        });
+
+    }
+
     @Override
     public <T extends JestResult> void executeAsync(final Action<T> clientRequest, final JestResultHandler<T> resultHandler)
     throws ExecutionException, InterruptedException, IOException {
@@ -115,6 +183,25 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
 
     }
 
+    @Override
+            public void completed(final HttpResponse response) {
+                try {
+                    T jestResult = deserializeResponse(response, clientRequest);
+                    resultHandler.completed(jestResult);
+                } catch (IOException e) {
+                    log.error("Exception occurred while serializing the response. Exception: " + e.getMessage());
+                }
+            }
+
+    @Override
+            public void failed(final Exception ex) {
+                resultHandler.failed(ex);
+            }
+
+    @Override
+            public void cancelled() {
+            }
+
     @Override
     public void shutdownClient() {
         super.shutdownClient();
@@ -176,6 +263,15 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
         }
     }
 
+    private JestResult deserializeResponse(HttpResponse response, Action clientRequest) throws IOException {
+        StatusLine statusLine = response.getStatusLine();
+        return createNewElasticSearchResult(
+                response.getEntity() != null ? EntityUtils.toString(response.getEntity()) : null,
+                statusLine.getStatusCode(),
+                statusLine.getReasonPhrase(),
+                clientRequest);
+    }
+
     private <T extends JestResult> T deserializeResponse(HttpResponse response, Action<T> clientRequest) throws IOException {
         StatusLine statusLine = response.getStatusLine();
         return clientRequest.createNewElasticSearchResult(
@@ -217,4 +313,5 @@ public class JestHttpClient extends AbstractJestClient implements JestClient {
     public void setGson(Gson gson) {
         this.gson = gson;
     }
-}
+
+}
\ No newline at end of file
