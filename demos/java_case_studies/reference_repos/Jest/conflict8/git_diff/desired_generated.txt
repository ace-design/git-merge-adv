diff --git a/java_case_studies/reference_repos/Jest/conflict8/desired.java b/java_case_studies/demo_results/MethodUnion/Jest-conflict8.java
old mode 100755
new mode 100644
index 1f3c32b..2e3af0e
--- a/java_case_studies/reference_repos/Jest/conflict8/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/Jest-conflict8.java
@@ -1,12 +1,10 @@
 package io.searchbox.client;
-
 import com.google.gson.Gson;
 import io.searchbox.client.config.HttpClientConfig;
 import io.searchbox.client.config.discovery.NodeChecker;
 import io.searchbox.client.config.idle.HttpReapableConnectionManager;
 import io.searchbox.client.config.idle.IdleConnectionReaper;
 import io.searchbox.client.http.JestHttpClient;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpHost;
 import org.apache.http.client.AuthCache;
@@ -36,16 +34,12 @@ import org.apache.http.nio.conn.SchemeIOSessionStrategy;
 import org.apache.http.nio.reactor.IOReactorException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import java.util.Map;
 
-/**
- * @author Dogukan Sonmez
- */
-public class JestClientFactory {
+public class JestClientFactory{
 
-    final static Logger log = LoggerFactory.getLogger(JestClientFactory.class);
-    private HttpClientConfig httpClientConfig;
+    final static Logger log = LoggerFactory.getLogger(JestClientFactory.class);,
+    private HttpClientConfig httpClientConfig;,
 
     public JestClient getObject() {
         JestHttpClient client = new JestHttpClient();
@@ -106,6 +100,7 @@ public class JestClientFactory {
         return client;
     }
 
+
     public void setHttpClientConfig(HttpClientConfig httpClientConfig) {
         this.httpClientConfig = httpClientConfig;
     }
@@ -146,6 +141,7 @@ public class JestClientFactory {
      * }
      * </pre>
      */
+
     protected HttpClientBuilder configureHttpClient(final HttpClientBuilder builder) {
         return builder;
     }
@@ -153,16 +149,17 @@ public class JestClientFactory {
     /**
      * Extension point for async client
      */
+
     protected HttpAsyncClientBuilder configureHttpClient(final HttpAsyncClientBuilder builder) {
         return builder;
     }
 
     // Extension point
+
     protected HttpRoutePlanner getRoutePlanner() {
         return httpClientConfig.getHttpRoutePlanner();
     }
 
-    // Extension point
     protected RequestConfig getRequestConfig() {
         return RequestConfig.custom()
                 .setConnectTimeout(httpClientConfig.getConnTimeout())
@@ -170,7 +167,6 @@ public class JestClientFactory {
                 .build();
     }
 
-    // Extension point
     protected NHttpClientConnectionManager getAsyncConnectionManager() {
         PoolingNHttpClientConnectionManager retval;
 
@@ -209,7 +205,6 @@ public class JestClientFactory {
         return retval;
     }
 
-    // Extension point
     protected HttpClientConnectionManager getConnectionManager() {
         HttpClientConnectionManager retval;
 
@@ -243,12 +238,10 @@ public class JestClientFactory {
         return retval;
     }
 
-    // Extension point
     protected NodeChecker createNodeChecker(JestHttpClient client, HttpClientConfig httpClientConfig) {
         return new NodeChecker(client, httpClientConfig);
     }
 
-    // Extension point
     protected HttpClientContext createPreemptiveAuthContext(HttpHost targetHost) {
         HttpClientContext context = HttpClientContext.create();
         context.setCredentialsProvider(httpClientConfig.getCredentialsProvider());
@@ -265,4 +258,4 @@ public class JestClientFactory {
         return authCache;
     }
 
-}
+}
\ No newline at end of file
