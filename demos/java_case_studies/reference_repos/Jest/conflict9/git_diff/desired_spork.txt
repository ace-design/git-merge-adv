diff --git a/java_case_studies/reference_repos/Jest/conflict9/desired.java b/java_case_studies/reference_repos/Jest/conflict9/spork_result.java
index 403b718..2385509 100644
--- a/java_case_studies/reference_repos/Jest/conflict9/desired.java
+++ b/java_case_studies/reference_repos/Jest/conflict9/spork_result.java
@@ -2,34 +2,41 @@ package io.searchbox.client;
 
 import com.google.gson.*;
 import io.searchbox.annotations.JestId;
-import io.searchbox.cloning.CloneUtils;
 import io.searchbox.annotations.JestVersion;
-import org.apache.commons.lang3.StringUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import io.searchbox.cloning.CloneUtils;
 import java.lang.reflect.Field;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import org.apache.commons.lang3.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * @author Dogukan Sonmez
  */
 public class JestResult {
-
     public static final String ES_METADATA_ID = "es_metadata_id";
+
     public static final String ES_METADATA_VERSION = "es_metadata_version";
+
     private static final Logger log = LoggerFactory.getLogger(JestResult.class);
 
     protected JsonObject jsonObject;
+
     protected String jsonString;
+
     protected String pathToResult;
+
     protected int responseCode;
+
     protected boolean isSucceeded;
+
     protected String errorMessage;
+
     protected Gson gson;
 
     private JestResult() {
@@ -179,7 +186,6 @@ public class JestResult {
 
     protected List<JsonElement> extractSource(boolean addEsMetadataFields) {
         List<JsonElement> sourceList = new ArrayList<JsonElement>();
-
         if (jsonObject != null) {
             String[] keys = getKeys();
             if (keys == null) {
@@ -188,10 +194,9 @@ public class JestResult {
                 String sourceKey = keys[keys.length - 1];
                 JsonElement obj = jsonObject.get(keys[0]);
                 if (keys.length > 1) {
-                    for (int i = 1; i < keys.length - 1; i++) {
-                        obj = ((JsonObject) obj).get(keys[i]);
+                    for (int i = 1; i < (keys.length - 1); i++) {
+                        obj = ((JsonObject) (obj)).get(keys[i]);
                     }
-
                     if (obj.isJsonObject()) {
                         JsonElement source = obj.getAsJsonObject().get(sourceKey);
                         if (source != null) {
@@ -203,7 +208,7 @@ public class JestResult {
                                 JsonObject currentObj = element.getAsJsonObject();
                                 JsonObject source = currentObj.getAsJsonObject(sourceKey);
                                 if (source != null) {
-                                    JsonObject copy = (JsonObject)CloneUtils.deepClone(source);
+                                    JsonObject copy = ((JsonObject) (CloneUtils.deepClone(source)));
                                     if (addEsMetadataFields) {
                                         copy.add(ES_METADATA_ID, currentObj.get("_id"));
                                         copy.add(ES_METADATA_VERSION, currentObj.get("_version"));
@@ -214,7 +219,7 @@ public class JestResult {
                         }
                     }
                 } else if (obj != null) {
-                    JsonElement copy = (JsonElement)CloneUtils.deepClone(obj);
+                    JsonElement copy = ((JsonElement) (CloneUtils.deepClone(obj)));
                     if (addEsMetadataFields && copy.isJsonObject()) {
                         JsonElement objId = jsonObject.get("_id");
                         if (objId != null) {
@@ -229,17 +234,14 @@ public class JestResult {
                 }
             }
         }
-
         return sourceList;
     }
 
     protected <T> T createSourceObject(JsonElement source, Class<T> type) {
         T obj = null;
         try {
-
             String json = source.toString();
             obj = gson.fromJson(json, type);
-
             // Check if JestId is visible
             Field[] fields = type.getDeclaredFields();
             boolean idFieldFound = false;
@@ -257,8 +259,7 @@ public class JestResult {
                     }
                 }
             }
-
-        } catch (Exception e) {
+        } catch (java.lang.Exception e) {
             log.error("Unhandled exception occurred while converting source to the object ." + type.getCanonicalName(), e);
         }
         return obj;
@@ -270,11 +271,11 @@ public class JestResult {
             Object value = field.get(obj);
             if (value == null) {
                 Class<?> fieldType = field.getType();
-                JsonElement element = ((JsonObject) source).get(fieldname);
+                JsonElement element = ((JsonObject) (source)).get(fieldname);
                 field.set(obj, getAs(element, fieldType));
                 return true;
             }
-        } catch (IllegalAccessException e) {
+        } catch (java.lang.IllegalAccessException e) {
             log.error("Unhandled exception occurred while setting annotated field from source");
         }
         return false;
@@ -333,5 +334,4 @@ public class JestResult {
     protected String[] getKeys() {
         return pathToResult == null ? null : pathToResult.split("/");
     }
-
 }
