diff --git a/java_case_studies/reference_repos/Jest/conflict13/desired.java b/java_case_studies/demo_results/MethodUnion/Jest-conflict13.java
old mode 100755
new mode 100644
index 293efea..f316bd6
--- a/java_case_studies/reference_repos/Jest/conflict13/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/Jest-conflict13.java
@@ -1,36 +1,23 @@
 package io.searchbox.client;
-
-
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
 import io.searchbox.Action;
 import io.searchbox.client.config.RoundRobinServerList;
 import io.searchbox.client.config.ServerList;
 import io.searchbox.client.config.discovery.NodeChecker;
-
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-
 import io.searchbox.client.config.exception.NoServerConfiguredException;
 import io.searchbox.client.util.PaddedAtomicReference;
 import org.apache.http.StatusLine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import java.util.LinkedHashSet;
+import java.util.Set;
 
-import com.google.common.collect.Iterators;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParser;
-
-/**
- * @author Dogukan Sonmez
- */
-
-
-public abstract class AbstractJestClient implements JestClient {
-
-    final static Logger log = LoggerFactory.getLogger(AbstractJestClient.class);
-
-    private final PaddedAtomicReference<ServerList> listOfServers = new PaddedAtomicReference<ServerList>();
+public abstract class AbstractJestClient implements JestClient{
 
-    private NodeChecker nodeChecker;
+    final static Logger log = LoggerFactory.getLogger(AbstractJestClient.class);,
+    private final PaddedAtomicReference<ServerList> listOfServers = new PaddedAtomicReference<ServerList>();,
+    private NodeChecker nodeChecker;,
 
     public void setNodeChecker(NodeChecker nodeChecker) {
         this.nodeChecker = nodeChecker;
@@ -38,10 +25,20 @@ public abstract class AbstractJestClient implements JestClient {
 
     public LinkedHashSet<String> getServers() {
         ServerList server = listOfServers.get();
-        if(server!=null) return new LinkedHashSet<String>(server.getServers());
+        if (server != null) return new LinkedHashSet<String>(server.getServers());
         else return null;
     }
 
+    public void setServers(Set<String> servers) {
+        try {
+            RoundRobinServerList serverList = new RoundRobinServerList(servers);
+            listOfServers.set(serverList);
+        } catch (NoServerConfiguredException noServers) {
+            listOfServers.set(null);
+            log.warn("No servers are currently available for the client to talk to.");
+        }
+    }
+
     public void setServers(LinkedHashSet<String> servers) {
         try {
             RoundRobinServerList serverList = new RoundRobinServerList(servers);
@@ -63,7 +60,7 @@ public abstract class AbstractJestClient implements JestClient {
 
     protected String getElasticSearchServer() {
         ServerList serverList = listOfServers.get();
-        if(serverList!=null) return serverList.getServer();
+        if (serverList != null) return serverList.getServer();
         else throw new NoServerConfiguredException("No Server is assigned to client to connect");
     }
 
@@ -97,22 +94,32 @@ public abstract class AbstractJestClient implements JestClient {
     }
 
     protected JsonObject convertJsonStringToMapObject(String jsonTxt) {
+<<<<<<< left_content.java
         if (jsonTxt != null && !jsonTxt.trim().isEmpty()) {
             try {
                 return new JsonParser().parse(jsonTxt).getAsJsonObject();
             } catch (Exception e) {
                 log.error("An exception occurred while converting json string to map object");
             }
+=======
+        if (jsonTxt == null || jsonTxt.trim().isEmpty()) return null;
+        try {
+            return new JsonParser().parse(jsonTxt).getAsJsonObject();
+        } catch (Exception e) {
+            log.error("An exception occurred while converting json string to map object");
+>>>>>>> right_content.java
         }
         return new JsonObject();
     }
 
+
     protected String getRequestURL(String elasticSearchServer, String uri) {
         StringBuilder sb = new StringBuilder(elasticSearchServer);
 
-        if(uri.length()>0 && uri.charAt(0)=='/') sb.append(uri);
+        if (uri.length() > 0 && uri.charAt(0) == '/') sb.append(uri);
         else sb.append('/').append(uri);
 
         return sb.toString();
     }
+
 }
\ No newline at end of file
