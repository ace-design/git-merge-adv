diff --git a/java_case_studies/reference_repos/Jest/conflict13/base.java b/java_case_studies/reference_repos/Jest/conflict13/left.java
index 8048a21..b8ee106 100644
--- a/java_case_studies/reference_repos/Jest/conflict13/base.java
+++ b/java_case_studies/reference_repos/Jest/conflict13/left.java
@@ -1,23 +1,20 @@
 package io.searchbox.client;
 
 
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
 import io.searchbox.Action;
 import io.searchbox.client.config.RoundRobinServerList;
 import io.searchbox.client.config.ServerList;
 import io.searchbox.client.config.discovery.NodeChecker;
-
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-
 import io.searchbox.client.config.exception.NoServerConfiguredException;
 import io.searchbox.client.util.PaddedAtomicReference;
 import org.apache.http.StatusLine;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.Iterators;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParser;
+import java.util.LinkedHashSet;
+import java.util.Set;
 
 /**
  * @author Dogukan Sonmez
@@ -38,15 +35,15 @@ public abstract class AbstractJestClient implements JestClient {
 
     public LinkedHashSet<String> getServers() {
         ServerList server = listOfServers.get();
-        if(server!=null) return new LinkedHashSet<String>(server.getServers());
+        if (server != null) return new LinkedHashSet<String>(server.getServers());
         else return null;
     }
 
-    public void setServers(LinkedHashSet<String> servers) {
+    public void setServers(Set<String> servers) {
         try {
             RoundRobinServerList serverList = new RoundRobinServerList(servers);
             listOfServers.set(serverList);
-        } catch(NoServerConfiguredException noServers) {
+        } catch (NoServerConfiguredException noServers) {
             listOfServers.set(null);
             log.warn("No servers are currently available for the client to talk to.");
         }
@@ -63,7 +60,7 @@ public abstract class AbstractJestClient implements JestClient {
 
     protected String getElasticSearchServer() {
         ServerList serverList = listOfServers.get();
-        if(serverList!=null) return serverList.getServer();
+        if (serverList != null) return serverList.getServer();
         else throw new NoServerConfiguredException("No Server is assigned to client to connect");
     }
 
@@ -90,8 +87,8 @@ public abstract class AbstractJestClient implements JestClient {
     }
 
     protected JsonObject convertJsonStringToMapObject(String jsonTxt) {
-      if(jsonTxt == null || jsonTxt.trim().isEmpty())return null;
-      try {
+        if (jsonTxt == null || jsonTxt.trim().isEmpty()) return null;
+        try {
             return new JsonParser().parse(jsonTxt).getAsJsonObject();
         } catch (Exception e) {
             log.error("An exception occurred while converting json string to map object");
@@ -102,7 +99,7 @@ public abstract class AbstractJestClient implements JestClient {
     protected String getRequestURL(String elasticSearchServer, String uri) {
         StringBuilder sb = new StringBuilder(elasticSearchServer);
 
-        if(uri.length()>0 && uri.charAt(0)=='/') sb.append(uri);
+        if (uri.length() > 0 && uri.charAt(0) == '/') sb.append(uri);
         else sb.append('/').append(uri);
 
         return sb.toString();
