diff --git a/java_case_studies/reference_repos/Jest/conflict7/desired.java b/java_case_studies/demo_results/MethodUnion/Jest-conflict7.java
index c4e7366..5dc0ed7 100644
--- a/java_case_studies/reference_repos/Jest/conflict7/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/Jest-conflict7.java
@@ -1,49 +1,37 @@
 package io.searchbox.client.config.discovery;
-
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.AbstractScheduledService;
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
-
 import io.searchbox.client.JestClient;
 import io.searchbox.client.JestResult;
 import io.searchbox.client.config.ClientConfig;
 import io.searchbox.cluster.NodesInfo;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpHost;
 import org.apache.http.conn.HttpHostConnectException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import java.util.LinkedHashSet;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-/**
- * Discovers new nodes by calling NodesInfo API on the next available server
- * and parses the <code>nodes</code> object in response to get http publish
- * address.
- */
-public class NodeChecker extends AbstractScheduledService {
-
-    private final static Logger log = LoggerFactory.getLogger(NodeChecker.class);
-    private final static String PUBLISH_ADDRESS_KEY = "http_address";
-    private final static Pattern INETSOCKETADDRESS_PATTERN = Pattern.compile("(?:inet\\[)?(?:(?:[^:]+)?\\/)?([^:]+):(\\d+)\\]?");
+public class NodeChecker extends AbstractScheduledService{
 
-    private final NodesInfo action;
-
-    protected JestClient client;
-    protected Scheduler scheduler;
-    protected String defaultScheme;
-    protected Set<String> bootstrapServerList;
-    protected Set<String> discoveredServerList;
+    private final static Logger log = LoggerFactory.getLogger(NodeChecker.class);,
+    private final static String PUBLISH_ADDRESS_KEY = "http_address";,
+    private final static Pattern INETSOCKETADDRESS_PATTERN = Pattern.compile("(?:inet\\[)?(?:(?:[^:]+)?\\/)?([^:]+):(\\d+)\\]?");,
+    private final NodesInfo action;,
+    protected JestClient client;,
+    protected Scheduler scheduler;,
+    protected String defaultScheme;,
 
     public NodeChecker(JestClient jestClient, ClientConfig clientConfig) {
         action = new NodesInfo.Builder()
@@ -59,6 +47,19 @@ public class NodeChecker extends AbstractScheduledService {
         );
 		this.bootstrapServerList = ImmutableSet.copyOf(clientConfig.getServerList());
     }
+    protected Set<String> bootstrapServerList;,
+    protected Set<String> discoveredServerList;,
+
+    public NodeChecker(JestClient jestClient, String defaultScheme, Long discoveryFrequency, TimeUnit discoveryFrequencyTimeUnit, Set<String> servers) {
+        this.client = jestClient;
+        this.defaultScheme = defaultScheme;
+        this.scheduler = Scheduler.newFixedDelaySchedule(
+                0l,
+                discoveryFrequency,
+                discoveryFrequencyTimeUnit
+        );
+		this.bootstrapServerList = ImmutableSet.copyOf(servers);
+    }
 
     @Override
     protected void runOneIteration() throws Exception {
@@ -146,10 +147,19 @@ public class NodeChecker extends AbstractScheduledService {
         return executor;
     }
 
+    @Override public void terminated(State from) {
+                executor.shutdown();
+            }
+
+    @Override public void failed(State from, Throwable failure) {
+                executor.shutdown();
+            }
+
     /**
      * Converts the Elasticsearch reported publish address in the format "inet[<hostname>:<port>]" or
      * "inet[<hostname>/<hostaddress>:<port>]" to a normalized http address in the form "http://host:port".
      */
+
     protected String getHttpAddress(String httpAddress) {
         Matcher resolvedMatcher = INETSOCKETADDRESS_PATTERN.matcher(httpAddress);
         if (resolvedMatcher.matches()) {
@@ -159,4 +169,4 @@ public class NodeChecker extends AbstractScheduledService {
         return null;
     }
 
-}
+}
\ No newline at end of file
