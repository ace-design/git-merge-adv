diff --git a/java_case_studies/reference_repos/Jest/conflict7/base.java b/java_case_studies/reference_repos/Jest/conflict7/right.java
index 1af8270..e7fe7bc 100644
--- a/java_case_studies/reference_repos/Jest/conflict7/base.java
+++ b/java_case_studies/reference_repos/Jest/conflict7/right.java
@@ -16,11 +16,9 @@ import org.slf4j.LoggerFactory;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ThreadFactory;
 import java.util.LinkedHashSet;
 import java.util.Map.Entry;
 import java.util.Set;
-import java.util.concurrent.TimeUnit;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -35,7 +33,7 @@ public class NodeChecker extends AbstractScheduledService {
     private final static String PUBLISH_ADDRESS_KEY = "http_address";
     private final static Pattern INETSOCKETADDRESS_PATTERN = Pattern.compile("(?:inet\\[)?(?:(?:[^:]+)?\\/)?([^:]+):(\\d+)\\]?");
 
-    private final NodesInfo action = new NodesInfo.Builder().withHttp().build();
+    private final NodesInfo action;
 
     protected JestClient client;
     protected Scheduler scheduler;
@@ -43,19 +41,18 @@ public class NodeChecker extends AbstractScheduledService {
     protected Set<String> bootstrapServerList;
 
     public NodeChecker(JestClient jestClient, ClientConfig clientConfig) {
-        this(jestClient, clientConfig.getDefaultSchemeForDiscoveredNodes(), clientConfig.getDiscoveryFrequency(), clientConfig.getDiscoveryFrequencyTimeUnit(),
-				clientConfig.getServerList());
-    }
-
-    public NodeChecker(JestClient jestClient, String defaultScheme, Long discoveryFrequency, TimeUnit discoveryFrequencyTimeUnit, Set<String> servers) {
+        action = new NodesInfo.Builder()
+                .withHttp()
+                .addNode(clientConfig.getDiscoveryFilter())
+                .build();
         this.client = jestClient;
-        this.defaultScheme = defaultScheme;
+        this.defaultScheme = clientConfig.getDefaultSchemeForDiscoveredNodes();
         this.scheduler = Scheduler.newFixedDelaySchedule(
                 0l,
-                discoveryFrequency,
-                discoveryFrequencyTimeUnit
+                clientConfig.getDiscoveryFrequency(),
+                clientConfig.getDiscoveryFrequencyTimeUnit()
         );
-		this.bootstrapServerList = ImmutableSet.copyOf(servers);
+		this.bootstrapServerList = ImmutableSet.copyOf(clientConfig.getServerList());
     }
 
     @Override
