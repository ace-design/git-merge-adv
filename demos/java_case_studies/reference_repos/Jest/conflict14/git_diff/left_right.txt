diff --git a/java_case_studies/reference_repos/Jest/conflict14/left.java b/java_case_studies/reference_repos/Jest/conflict14/right.java
index 7eb03ec..840df9b 100644
--- a/java_case_studies/reference_repos/Jest/conflict14/left.java
+++ b/java_case_studies/reference_repos/Jest/conflict14/right.java
@@ -2,7 +2,7 @@ package io.searchbox.core;
 
 
 import io.searchbox.AbstractAction;
-import io.searchbox.Action;
+import io.searchbox.AbstractMultiIndexActionBuilder;
 import io.searchbox.core.search.sort.Sort;
 import io.searchbox.params.SearchType;
 import org.apache.commons.lang.StringUtils;
@@ -10,106 +10,77 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.util.Collection;
-import java.util.LinkedHashSet;
+import java.util.LinkedList;
 import java.util.List;
 
 /**
  * @author Dogukan Sonmez
+ * @author cihat keser
  */
-
-
-public class Search extends AbstractAction implements Action {
+public class Search extends AbstractAction {
 
     final static Logger log = LoggerFactory.getLogger(Search.class);
 
-    final protected LinkedHashSet<String> indexSet = new LinkedHashSet<String>();
+    private Search() {
+    }
 
-    final protected LinkedHashSet<String> typeSet = new LinkedHashSet<String>();
+    private Search(Builder builder) {
+        this.indexName = builder.getJoinedIndexNames();
+        this.typeName = builder.getJoinedIndexTypes();
 
-    public Search(String query) {
-        setData(query);
-    }
+        String data;
+        if (builder.sortList.size() > 0) {
+            StringBuilder sorting = new StringBuilder("\"sort\": [");
+            sorting.append(StringUtils.join(builder.sortList, ","));
+            sorting.append("],");
 
-    public Search(String query, List<Sort> sortList) {
-        String sorting = StringUtils.join(sortList, ",");
-        if (sortList.size() > 0) {
-            sorting = "\"sort\": [" + sorting + "],";
-            setData(query.replaceFirst("\\{", "\\{" + sorting));
+            data = builder.query.replaceFirst("\\{", "\\{" + sorting.toString());
         } else {
-            setData(query);
+            data = builder.query;
         }
-    }
-
-    protected Search() {
-    }
-
-    public void addIndex(String index) {
-        if (StringUtils.isNotBlank(index)) indexSet.add(index);
-    }
-
-    public void addType(String type) {
-        if (StringUtils.isNotBlank(type)) typeSet.add(type);
-    }
-
-    public boolean removeIndex(String index) {
-        return indexSet.remove(index);
-    }
-
-    public boolean removeType(String type) {
-        return typeSet.remove(type);
-    }
+        this.setData(data);
 
-    public void clearAllIndex() {
-        indexSet.clear();
-    }
+        if (builder.searchType != null) {
+            this.addParameter("search_type", builder.searchType.getValue());
+        }
 
-    public void clearAllType() {
-        typeSet.clear();
+        setURI(buildURI());
     }
 
-    public void addIndex(Collection<String> index) {
-        indexSet.addAll(index);
-    }
+    public static class Builder extends AbstractMultiIndexActionBuilder<Search> {
+        private String query;
+        private List<Sort> sortList = new LinkedList<Sort>();
+        private SearchType searchType;
 
-    public void addType(Collection<String> type) {
-        typeSet.addAll(type);
-    }
+        public Builder(String query) {
+            this.query = query;
+        }
 
-    public boolean isIndexExist(String index) {
-        return indexSet.contains(index);
-    }
+        public Builder addSort(Sort sort) {
+            sortList.add(sort);
+            return this;
+        }
 
-    public boolean isTypeExist(String type) {
-        return typeSet.contains(type);
-    }
+        public Builder addSort(Collection<Sort> sorts) {
+            sortList.addAll(sorts);
+            return this;
+        }
 
-    public int indexSize() {
-        return indexSet.size();
-    }
+        public Builder setSearchType(SearchType searchType) {
+            this.searchType = searchType;
+            return this;
+        }
 
-    public int typeSize() {
-        return typeSet.size();
+        @Override
+        public Search build() {
+            return new Search(this);
+        }
     }
 
-    public String getURI() {
+    @Override
+    protected String buildURI() {
         StringBuilder sb = new StringBuilder();
-        String indexQuery = createCommaSeparatedItemList(indexSet);
-        String typeQuery = createCommaSeparatedItemList(typeSet);
-
-        if (indexQuery.length() == 0 && typeQuery.length() > 0) {
-            sb.append("_all/").append(typeQuery).append("/");
-
-        } else if (indexQuery.length() > 0 && typeQuery.length() > 0) {
-            sb.append(indexQuery).append("/").append(typeQuery).append("/");
-
-        } else if (indexQuery.length() > 0 && typeQuery.length() == 0) {
-            sb.append(indexQuery).append("/");
-        }
-        sb.append("_search");
-        String queryString = buildQueryString();
-        if (StringUtils.isNotBlank(queryString)) sb.append(queryString);
-
-        log.debug("Created URI for search action is : " + sb.toString());
+        sb.append(super.buildURI()).append("/_search");
         return sb.toString();
     }
 
@@ -122,16 +93,4 @@ public class Search extends AbstractAction implements Action {
     public String getRestMethodName() {
         return "POST";
     }
-
-    public void setSearchType(SearchType searchType) {
-        this.addParameter("search_type", searchType.getValue());
-    }
-
-    public void setScroll(String time) {
-        this.addParameter("scroll", time);
-    }
-
-    public void setSize(Number size) {
-        this.addParameter("size", size);
-    }
 }
