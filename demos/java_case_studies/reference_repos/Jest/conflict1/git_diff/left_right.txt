diff --git a/java_case_studies/reference_repos/Jest/conflict1/left.java b/java_case_studies/reference_repos/Jest/conflict1/right.java
index 471bf86..4253b0e 100644
--- a/java_case_studies/reference_repos/Jest/conflict1/left.java
+++ b/java_case_studies/reference_repos/Jest/conflict1/right.java
@@ -8,9 +8,13 @@ import com.google.gson.JsonParser;
 import com.google.gson.JsonSyntaxException;
 
 import io.searchbox.action.AbstractAction;
+import io.searchbox.action.AbstractMultiINodeActionBuilder;
 import io.searchbox.action.AbstractMultiIndexActionBuilder;
 import io.searchbox.action.AbstractMultiTypeActionBuilder;
-import io.searchbox.client.config.ElasticsearchVersion;
+import io.searchbox.strings.StringUtils;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
 
 /**
  * @author Bartosz Polnik
@@ -22,11 +26,20 @@ public class Cat extends AbstractAction<CatResult> {
     protected <T extends AbstractAction.Builder<Cat, ? extends Builder> & CatBuilder> Cat(T builder) {
         super(builder);
         this.operationPath = builder.operationPath();
+        setURI(buildURI());
     }
 
     @Override
-    protected String buildURI(ElasticsearchVersion elasticsearchVersion) {
-        String uriSuffix = super.buildURI(elasticsearchVersion);
+    protected String buildURI() {
+        String uriSuffix = super.buildURI();
+        try {
+            if (!StringUtils.isBlank(nodes)) {
+                uriSuffix += URLEncoder.encode(nodes, CHARSET);
+            }
+        } catch (UnsupportedEncodingException e) {
+            log.error("Error occurred while adding nodes to uri", e);
+        }
+
         return "_cat/" + this.operationPath + (uriSuffix.isEmpty() ? "" : "/") + uriSuffix;
     }
 
@@ -166,6 +179,30 @@ public class Cat extends AbstractAction<CatResult> {
         }
     }
 
+    public static class AllocationBuilder extends AbstractMultiINodeActionBuilder<Cat, AllocationBuilder> implements CatBuilder {
+        private static final String operationPath = "allocation";
+
+        public AllocationBuilder() {
+            setHeader("accept", "application/json");
+            setHeader("content-type", "application/json");
+        }
+
+        @Override
+        public Cat build() {
+            return new Cat(this);
+        }
+
+        @Override
+        public String operationPath() {
+            return operationPath;
+        }
+
+        @Override
+        public String getJoinedNodes() {
+            return nodes.isEmpty() ? null : Joiner.on(',').join(nodes); 
+        }
+    }
+
     protected interface CatBuilder {
         String operationPath();
     }
