diff --git a/java_case_studies/reference_repos/Jest/conflict1/desired.java b/java_case_studies/reference_repos/Jest/conflict1/spork_result.java
index 185139d..0cd1b9c 100644
--- a/java_case_studies/reference_repos/Jest/conflict1/desired.java
+++ b/java_case_studies/reference_repos/Jest/conflict1/spork_result.java
@@ -6,7 +6,6 @@ import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import com.google.gson.JsonSyntaxException;
-
 import io.searchbox.action.AbstractAction;
 import io.searchbox.action.AbstractMultiINodeActionBuilder;
 import io.searchbox.action.AbstractMultiIndexActionBuilder;
@@ -16,11 +15,13 @@ import io.searchbox.strings.StringUtils;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 
+
 /**
  * @author Bartosz Polnik
  */
 public class Cat extends AbstractAction<CatResult> {
     private final static String PATH_TO_RESULT = "result";
+
     private final String operationPath;
 
     protected <T extends AbstractAction.Builder<Cat, ? extends Builder> & CatBuilder> Cat(T builder) {
@@ -38,7 +39,7 @@ public class Cat extends AbstractAction<CatResult> {
         } catch (UnsupportedEncodingException e) {
             log.error("Error occurred while adding nodes to uri", e);
         }
-        return "_cat/" + this.operationPath + (uriSuffix.isEmpty() ? "" : "/") + uriSuffix;
+        return (("_cat/" + this.operationPath) + (uriSuffix.isEmpty() ? "" : "/")) + uriSuffix;
     }
 
     @Override
@@ -93,6 +94,7 @@ public class Cat extends AbstractAction<CatResult> {
 
     public static class AliasesBuilder extends AbstractMultiIndexActionBuilder<Cat, AliasesBuilder> implements CatBuilder {
         private static final String operationPath = "aliases";
+
         public AliasesBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -111,6 +113,7 @@ public class Cat extends AbstractAction<CatResult> {
 
     public static class ShardsBuilder extends AbstractMultiIndexActionBuilder<Cat, ShardsBuilder> implements CatBuilder {
         private static final String operationPath = "shards";
+
         public ShardsBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -138,6 +141,7 @@ public class Cat extends AbstractAction<CatResult> {
 
     public static class SegmentsBuilder extends AbstractMultiIndexActionBuilder<Cat, SegmentsBuilder> implements CatBuilder {
         private static final String operationPath = "segments";
+
         public SegmentsBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -161,6 +165,7 @@ public class Cat extends AbstractAction<CatResult> {
 
     public static class NodesBuilder extends AbstractAction.Builder<Cat, NodesBuilder> implements CatBuilder {
         private static final String operationPath = "nodes";
+
         public NodesBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -197,11 +202,11 @@ public class Cat extends AbstractAction<CatResult> {
 
         @Override
         public String getJoinedNodes() {
-            return nodes.isEmpty() ? null : Joiner.on(',').join(nodes); 
+            return nodes.isEmpty() ? null : Joiner.on(',').join(nodes);
         }
     }
 
     protected interface CatBuilder {
-        String operationPath();
+        public abstract String operationPath();
     }
 }
