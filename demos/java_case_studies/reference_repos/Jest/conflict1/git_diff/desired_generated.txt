diff --git a/java_case_studies/reference_repos/Jest/conflict1/desired.java b/java_case_studies/demo_results/MethodUnion/Jest-conflict1.java
index 185139d..91404b6 100644
--- a/java_case_studies/reference_repos/Jest/conflict1/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/Jest-conflict1.java
@@ -1,27 +1,23 @@
 package io.searchbox.core;
-
 import com.google.common.base.Joiner;
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import com.google.gson.JsonSyntaxException;
-
 import io.searchbox.action.AbstractAction;
-import io.searchbox.action.AbstractMultiINodeActionBuilder;
 import io.searchbox.action.AbstractMultiIndexActionBuilder;
 import io.searchbox.action.AbstractMultiTypeActionBuilder;
+import io.searchbox.action.AbstractMultiINodeActionBuilder;
 import io.searchbox.client.config.ElasticsearchVersion;
 import io.searchbox.strings.StringUtils;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 
-/**
- * @author Bartosz Polnik
- */
-public class Cat extends AbstractAction<CatResult> {
-    private final static String PATH_TO_RESULT = "result";
-    private final String operationPath;
+public class Cat extends AbstractAction<CatResult>{
+
+    private final static String PATH_TO_RESULT = "result";,
+    private final String operationPath;,
 
     protected <T extends AbstractAction.Builder<Cat, ? extends Builder> & CatBuilder> Cat(T builder) {
         super(builder);
@@ -31,6 +27,12 @@ public class Cat extends AbstractAction<CatResult> {
     @Override
     protected String buildURI(ElasticsearchVersion elasticsearchVersion) {
         String uriSuffix = super.buildURI(elasticsearchVersion);
+        return "_cat/" + this.operationPath + (uriSuffix.isEmpty() ? "" : "/") + uriSuffix;
+    }
+
+    @Override
+    protected String buildURI() {
+        String uriSuffix = super.buildURI();
         try {
             if (!StringUtils.isBlank(nodes)) {
                 uriSuffix += URLEncoder.encode(nodes, CHARSET);
@@ -38,6 +40,7 @@ public class Cat extends AbstractAction<CatResult> {
         } catch (UnsupportedEncodingException e) {
             log.error("Error occurred while adding nodes to uri", e);
         }
+
         return "_cat/" + this.operationPath + (uriSuffix.isEmpty() ? "" : "/") + uriSuffix;
     }
 
@@ -72,8 +75,9 @@ public class Cat extends AbstractAction<CatResult> {
         }
     }
 
-    public static class IndicesBuilder extends AbstractMultiTypeActionBuilder<Cat, IndicesBuilder> implements CatBuilder {
-        private static final String operationPath = "indices";
+    public static class IndicesBuilder extends AbstractMultiTypeActionBuilder<Cat, IndicesBuilder> implements CatBuilder{
+
+        private static final String operationPath = "indices";,
 
         public IndicesBuilder() {
             setHeader("accept", "application/json");
@@ -89,10 +93,12 @@ public class Cat extends AbstractAction<CatResult> {
         public String operationPath() {
             return operationPath;
         }
+
     }
+    public static class AliasesBuilder extends AbstractMultiIndexActionBuilder<Cat, AliasesBuilder> implements CatBuilder{
+
+        private static final String operationPath = "aliases";,
 
-    public static class AliasesBuilder extends AbstractMultiIndexActionBuilder<Cat, AliasesBuilder> implements CatBuilder {
-        private static final String operationPath = "aliases";
         public AliasesBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -107,10 +113,12 @@ public class Cat extends AbstractAction<CatResult> {
         public String operationPath() {
             return operationPath;
         }
+
     }
+    public static class ShardsBuilder extends AbstractMultiIndexActionBuilder<Cat, ShardsBuilder> implements CatBuilder{
+
+        private static final String operationPath = "shards";,
 
-    public static class ShardsBuilder extends AbstractMultiIndexActionBuilder<Cat, ShardsBuilder> implements CatBuilder {
-        private static final String operationPath = "shards";
         public ShardsBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -134,10 +142,12 @@ public class Cat extends AbstractAction<CatResult> {
                 return null;
             }
         }
+
     }
+    public static class SegmentsBuilder extends AbstractMultiIndexActionBuilder<Cat, SegmentsBuilder> implements CatBuilder{
+
+        private static final String operationPath = "segments";,
 
-    public static class SegmentsBuilder extends AbstractMultiIndexActionBuilder<Cat, SegmentsBuilder> implements CatBuilder {
-        private static final String operationPath = "segments";
         public SegmentsBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -157,10 +167,12 @@ public class Cat extends AbstractAction<CatResult> {
         public String getJoinedIndices() {
             return indexNames.size() > 0 ? Joiner.on(',').join(indexNames) : null;
         }
+
     }
+    public static class NodesBuilder extends AbstractAction.Builder<Cat, NodesBuilder> implements CatBuilder{
+
+        private static final String operationPath = "nodes";,
 
-    public static class NodesBuilder extends AbstractAction.Builder<Cat, NodesBuilder> implements CatBuilder {
-        private static final String operationPath = "nodes";
         public NodesBuilder() {
             setHeader("accept", "application/json");
             setHeader("content-type", "application/json");
@@ -175,10 +187,17 @@ public class Cat extends AbstractAction<CatResult> {
         public String operationPath() {
             return operationPath;
         }
+
     }
+    protected interface CatBuilder{
 
-    public static class AllocationBuilder extends AbstractMultiINodeActionBuilder<Cat, AllocationBuilder> implements CatBuilder {
-        private static final String operationPath = "allocation";
+
+        String operationPath();
+
+    }
+    public static class AllocationBuilder extends AbstractMultiINodeActionBuilder<Cat, AllocationBuilder> implements CatBuilder{
+
+        private static final String operationPath = "allocation";,
 
         public AllocationBuilder() {
             setHeader("accept", "application/json");
@@ -199,9 +218,6 @@ public class Cat extends AbstractAction<CatResult> {
         public String getJoinedNodes() {
             return nodes.isEmpty() ? null : Joiner.on(',').join(nodes); 
         }
-    }
 
-    protected interface CatBuilder {
-        String operationPath();
     }
-}
+}
\ No newline at end of file
