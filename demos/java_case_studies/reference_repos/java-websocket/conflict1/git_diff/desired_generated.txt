diff --git a/java_case_studies/reference_repos/java-websocket/conflict1/desired.java b/java_case_studies/demo_results/MethodUnion/java-websocket-conflict1.java
index 742395a..f3862d0 100644
--- a/java_case_studies/reference_repos/java-websocket/conflict1/desired.java
+++ b/java_case_studies/demo_results/MethodUnion/java-websocket-conflict1.java
@@ -1,5 +1,4 @@
 package org.java_websocket.client;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -11,7 +10,6 @@ import java.nio.ByteBuffer;
 import java.nio.channels.NotYetConnectedException;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
-
 import org.java_websocket.WebSocket;
 import org.java_websocket.WebSocketAdapter;
 import org.java_websocket.WebSocketImpl;
@@ -25,54 +23,42 @@ import org.java_websocket.handshake.HandshakeImpl1Client;
 import org.java_websocket.handshake.Handshakedata;
 import org.java_websocket.handshake.ServerHandshake;
 
-/**
- * A subclass must implement at least <var>onOpen</var>, <var>onClose</var>, and <var>onMessage</var> to be
- * useful. At runtime the user is expected to establish a connection via {@link #connect()}, then receive events like {@link #onMessage(String)} via the overloaded methods and to {@link #send(String)} data to the server.
- */
-public abstract class WebSocketClient extends WebSocketAdapter implements Runnable, WebSocket {
+public abstract class WebSocketClient extends WebSocketAdapter implements Runnable, WebSocket{
+
 
-	/**
+    /**
 	 * The URI this channel is supposed to connect to.
 	 */
-	protected URI uri = null;
-
-	private WebSocketImpl engine = null;
-
-	private Socket socket = null;
-
-	private InputStream istream;
-
-	private OutputStream ostream;
-
-	private Proxy proxy = Proxy.NO_PROXY;
-
-	private Thread writeThread;
-
-	private Draft draft;
-
-	private Map<String,String> headers;
-
-	private CountDownLatch connectLatch = new CountDownLatch( 1 );
-
-	private CountDownLatch closeLatch = new CountDownLatch( 1 );
-
-	private int connectTimeout = 0;
-
-	/** This open a websocket connection as specified by rfc6455 */
-	public WebSocketClient( URI serverURI ) {
+    protected URI uri = null;,
+    private WebSocketImpl engine = null;,
+    private Socket socket = null;,
+    private InputStream istream;,
+    private OutputStream ostream;,
+    private Proxy proxy = Proxy.NO_PROXY;,
+    private Thread writeThread;,
+    private Draft draft;,
+    private Map<String,String> headers;,
+    private CountDownLatch connectLatch = new CountDownLatch( 1 );,
+    private CountDownLatch closeLatch = new CountDownLatch( 1 );,
+    private int connectTimeout = 0;,
+
+    /** This open a websocket connection as specified by rfc6455 */
+
+    public WebSocketClient( URI serverURI ) {
 		this( serverURI, new Draft_17() );
 	}
 
-	/**
+    /**
 	 * Constructs a WebSocketClient instance and sets it to the connect to the
 	 * specified URI. The channel does not attampt to connect automatically. The connection
 	 * will be established once you call <var>connect</var>.
 	 */
-	public WebSocketClient( URI serverUri , Draft draft ) {
+
+    public WebSocketClient( URI serverUri , Draft draft ) {
 		this( serverUri, draft, null, 0 );
 	}
 
-	public WebSocketClient( URI serverUri , Draft protocolDraft , Map<String,String> httpHeaders , int connectTimeout ) {
+    public WebSocketClient( URI serverUri , Draft protocolDraft , Map<String,String> httpHeaders , int connectTimeout ) {
 		if( serverUri == null ) {
 			throw new IllegalArgumentException();
 		} else if( protocolDraft == null ) {
@@ -85,77 +71,84 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 		this.engine = new WebSocketImpl( this, protocolDraft );
 	}
 
-	/**
+    /**
 	 * Returns the URI that this WebSocketClient is connected to.
 	 */
-	public URI getURI() {
+
+    public URI getURI() {
 		return uri;
 	}
 
-	/**
+    /**
 	 * Returns the protocol version this channel uses.<br>
 	 * For more infos see https://github.com/TooTallNate/Java-WebSocket/wiki/Drafts
 	 */
-	public Draft getDraft() {
+
+    public Draft getDraft() {
 		return draft;
 	}
 
-	/**
+    /**
 	 * Initiates the websocket connection. This method does not block.
 	 */
-	public void connect() {
+
+    public void connect() {
 		if( writeThread != null )
 			throw new IllegalStateException( "WebSocketClient objects are not reuseable" );
 		writeThread = new Thread( this );
 		writeThread.start();
 	}
 
-	/**
+    /**
 	 * Same as <code>connect</code> but blocks until the websocket connected or failed to do so.<br>
 	 * Returns whether it succeeded or not.
 	 **/
-	public boolean connectBlocking() throws InterruptedException {
+
+    public boolean connectBlocking() throws InterruptedException {
 		connect();
 		connectLatch.await();
 		return engine.isOpen();
 	}
 
-	/**
+    /**
 	 * Initiates the websocket close handshake. This method does not block<br>
 	 * In oder to make sure the connection is closed use <code>closeBlocking</code>
 	 */
-	public void close() {
+
+    public void close() {
 		if( writeThread != null ) {
 			engine.close( CloseFrame.NORMAL );
 		}
 	}
 
-	public void closeBlocking() throws InterruptedException {
+    public void closeBlocking() throws InterruptedException {
 		close();
 		closeLatch.await();
 	}
 
-	/**
+    /**
 	 * Sends <var>text</var> to the connected websocket server.
 	 * 
 	 * @param text
 	 *            The string which will be transmitted.
 	 */
-	public void send( String text ) throws NotYetConnectedException {
+
+    public void send( String text ) throws NotYetConnectedException {
 		engine.send( text );
 	}
 
-	/**
+    /**
 	 * Sends binary <var> data</var> to the connected webSocket server.
 	 * 
 	 * @param data
 	 *            The byte-Array of data to send to the WebSocket server.
 	 */
-	public void send( byte[] data ) throws NotYetConnectedException {
+
+    public void send( byte[] data ) throws NotYetConnectedException {
 		engine.send( data );
 	}
 
-	public void run() {
+    public void run() {
 		try {
 			if( socket == null ) {
 				socket = new Socket( proxy );
@@ -194,7 +187,8 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 		}
 		assert ( socket.isClosed() );
 	}
-	private int getPort() {
+
+    private int getPort() {
 		int port = uri.getPort();
 		if( port == -1 ) {
 			String scheme = uri.getScheme();
@@ -203,13 +197,18 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 			} else if( scheme.equals( "ws" ) ) {
 				return WebSocket.DEFAULT_PORT;
 			} else {
+<<<<<<< left_content.java
 				throw new RuntimeException( "unknown scheme: " + scheme );
+=======
+				throw new RuntimeException( "unknown scheme" + scheme );
+>>>>>>> right_content.java
 			}
 		}
 		return port;
 	}
 
-	private void sendHandshake() throws InvalidHandshakeException {
+
+    private void sendHandshake() throws InvalidHandshakeException {
 		String path;
 		String part1 = uri.getRawPath();
 		String part2 = uri.getRawQuery();
@@ -233,44 +232,48 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 		engine.startHandshake( handshake );
 	}
 
-	/**
+    /**
 	 * This represents the state of the connection.
 	 */
-	public READYSTATE getReadyState() {
+
+    public READYSTATE getReadyState() {
 		return engine.getReadyState();
 	}
 
-	/**
+    /**
 	 * Calls subclass' implementation of <var>onMessage</var>.
 	 */
-	@Override
+
+    @Override
 	public final void onWebsocketMessage( WebSocket conn, String message ) {
 		onMessage( message );
 	}
 
-	@Override
+    @Override
 	public final void onWebsocketMessage( WebSocket conn, ByteBuffer blob ) {
 		onMessage( blob );
 	}
 
-	@Override
+    @Override
 	public void onWebsocketMessageFragment( WebSocket conn, Framedata frame ) {
 		onFragment( frame );
 	}
 
-	/**
+    /**
 	 * Calls subclass' implementation of <var>onOpen</var>.
 	 */
-	@Override
+
+    @Override
 	public final void onWebsocketOpen( WebSocket conn, Handshakedata handshake ) {
 		connectLatch.countDown();
 		onOpen( (ServerHandshake) handshake );
 	}
 
-	/**
+    /**
 	 * Calls subclass' implementation of <var>onClose</var>.
 	 */
-	@Override
+
+    @Override
 	public final void onWebsocketClose( WebSocket conn, int code, String reason, boolean remote ) {
 		connectLatch.countDown();
 		closeLatch.countDown();
@@ -285,65 +288,74 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 		onClose( code, reason, remote );
 	}
 
-	/**
+    /**
 	 * Calls subclass' implementation of <var>onIOError</var>.
 	 */
-	@Override
+
+    @Override
 	public final void onWebsocketError( WebSocket conn, Exception ex ) {
 		onError( ex );
 	}
 
-	@Override
+    @Override
 	public final void onWriteDemand( WebSocket conn ) {
 		// nothing to do
 	}
 
-	@Override
+    @Override
 	public void onWebsocketCloseInitiated( WebSocket conn, int code, String reason ) {
 		onCloseInitiated( code, reason );
 	}
 
-	@Override
+    @Override
 	public void onWebsocketClosing( WebSocket conn, int code, String reason, boolean remote ) {
 		onClosing( code, reason, remote );
 	}
 
-	public void onCloseInitiated( int code, String reason ) {
+    public void onCloseInitiated( int code, String reason ) {
 	}
 
-	public void onClosing( int code, String reason, boolean remote ) {
+    public void onClosing( int code, String reason, boolean remote ) {
 	}
 
-	public WebSocket getConnection() {
+    public WebSocket getConnection() {
 		return engine;
 	}
 
-	@Override
+    @Override
 	public InetSocketAddress getLocalSocketAddress( WebSocket conn ) {
 		if( socket != null )
 			return (InetSocketAddress) socket.getLocalSocketAddress();
 		return null;
 	}
 
-	@Override
+    @Override
 	public InetSocketAddress getRemoteSocketAddress( WebSocket conn ) {
 		if( socket != null )
 			return (InetSocketAddress) socket.getRemoteSocketAddress();
 		return null;
 	}
 
-	// ABTRACT METHODS /////////////////////////////////////////////////////////
-	public abstract void onOpen( ServerHandshake handshakedata );
-	public abstract void onMessage( String message );
-	public abstract void onClose( int code, String reason, boolean remote );
-	public abstract void onError( Exception ex );
-	public void onMessage( ByteBuffer bytes ) {
+    // ABTRACT METHODS /////////////////////////////////////////////////////////
+
+    public abstract void onOpen( ServerHandshake handshakedata );
+
+    public abstract void onMessage( String message );
+
+    public abstract void onClose( int code, String reason, boolean remote );
+
+    public abstract void onError( Exception ex );
+
+    public void onMessage( ByteBuffer bytes ) {
 	}
-	public void onFragment( Framedata frame ) {
+
+    public void onFragment( Framedata frame ) {
 	}
 
-	private class WebsocketWriteThread implements Runnable {
-		@Override
+    private class WebsocketWriteThread implements Runnable{
+
+
+        @Override
 		public void run() {
 			Thread.currentThread().setName( "WebsocketWriteThread" );
 			try {
@@ -358,97 +370,100 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 				// this thread is regularly terminated via an interrupt
 			}
 		}
-	}
 
-	public void setProxy( Proxy proxy ) {
+    }
+    public void setProxy( Proxy proxy ) {
 		if( proxy == null )
 			throw new IllegalArgumentException();
 		this.proxy = proxy;
 	}
 
-	/**
+    /**
 	 * Accepts bound and unbound sockets.<br>
 	 * This method must be called before <code>connect</code>.
 	 * If the given socket is not yet bound it will be bound to the uri specified in the constructor.
 	 **/
-	public void setSocket( Socket socket ) {
+
+    public void setSocket( Socket socket ) {
 		if( this.socket != null ) {
 			throw new IllegalStateException( "socket has already been set" );
 		}
 		this.socket = socket;
 	}
 
-	@Override
+    @Override
 	public void sendFragmentedFrame( Opcode op, ByteBuffer buffer, boolean fin ) {
 		engine.sendFragmentedFrame( op, buffer, fin );
 	}
 
-	@Override
+    @Override
 	public boolean isOpen() {
 		return engine.isOpen();
 	}
 
-	@Override
+    @Override
 	public boolean isFlushAndClose() {
 		return engine.isFlushAndClose();
 	}
 
-	@Override
+    @Override
 	public boolean isClosed() {
 		return engine.isClosed();
 	}
 
-	@Override
+    @Override
 	public boolean isClosing() {
 		return engine.isClosing();
 	}
 
-	@Override
+    @Override
 	public boolean isConnecting() {
 		return engine.isConnecting();
 	}
 
-	@Override
+    @Override
 	public boolean hasBufferedData() {
 		return engine.hasBufferedData();
 	}
 
-	@Override
+    @Override
 	public void close( int code ) {
 		engine.close();
 	}
 
-	@Override
+    @Override
 	public void close( int code, String message ) {
 		engine.close( code, message );
 	}
 
-	@Override
+    @Override
 	public void closeConnection( int code, String message ) {
 		engine.closeConnection( code, message );
 	}
 
-	@Override
+    @Override
 	public void send( ByteBuffer bytes ) throws IllegalArgumentException , NotYetConnectedException {
 		engine.send( bytes );
 	}
 
-	@Override
+    @Override
 	public void sendFrame( Framedata framedata ) {
 		engine.sendFrame( framedata );
 	}
 
-	@Override
+    @Override
 	public InetSocketAddress getLocalSocketAddress() {
 		return engine.getLocalSocketAddress();
 	}
-	@Override
+
+    @Override
 	public InetSocketAddress getRemoteSocketAddress() {
 		return engine.getRemoteSocketAddress();
 	}
-	
-	@Override
+
+    @Override
 	public String getResourceDescriptor() {
 		return uri.getPath();
 	}
-}
+
+}
\ No newline at end of file
