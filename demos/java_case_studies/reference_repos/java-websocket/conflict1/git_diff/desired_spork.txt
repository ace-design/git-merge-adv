diff --git a/java_case_studies/reference_repos/java-websocket/conflict1/desired.java b/java_case_studies/reference_repos/java-websocket/conflict1/spork_result.java
index 742395a..35b4fd3 100644
--- a/java_case_studies/reference_repos/java-websocket/conflict1/desired.java
+++ b/java_case_studies/reference_repos/java-websocket/conflict1/spork_result.java
@@ -11,7 +11,6 @@ import java.nio.ByteBuffer;
 import java.nio.channels.NotYetConnectedException;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
-
 import org.java_websocket.WebSocket;
 import org.java_websocket.WebSocketAdapter;
 import org.java_websocket.WebSocketImpl;
@@ -19,18 +18,18 @@ import org.java_websocket.drafts.Draft;
 import org.java_websocket.drafts.Draft_17;
 import org.java_websocket.exceptions.InvalidHandshakeException;
 import org.java_websocket.framing.CloseFrame;
-import org.java_websocket.framing.Framedata;
 import org.java_websocket.framing.Framedata.Opcode;
+import org.java_websocket.framing.Framedata;
 import org.java_websocket.handshake.HandshakeImpl1Client;
 import org.java_websocket.handshake.Handshakedata;
 import org.java_websocket.handshake.ServerHandshake;
 
+
 /**
  * A subclass must implement at least <var>onOpen</var>, <var>onClose</var>, and <var>onMessage</var> to be
  * useful. At runtime the user is expected to establish a connection via {@link #connect()}, then receive events like {@link #onMessage(String)} via the overloaded methods and to {@link #send(String)} data to the server.
  */
-public abstract class WebSocketClient extends WebSocketAdapter implements Runnable, WebSocket {
-
+public abstract class WebSocketClient extends WebSocketAdapter implements Runnable , WebSocket {
 	/**
 	 * The URI this channel is supposed to connect to.
 	 */
@@ -50,7 +49,7 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 
 	private Draft draft;
 
-	private Map<String,String> headers;
+	private Map<String, String> headers;
 
 	private CountDownLatch connectLatch = new CountDownLatch( 1 );
 
@@ -58,9 +57,11 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 
 	private int connectTimeout = 0;
 
-	/** This open a websocket connection as specified by rfc6455 */
-	public WebSocketClient( URI serverURI ) {
-		this( serverURI, new Draft_17() );
+	/**
+	 * This open a websocket connection as specified by rfc6455
+	 */
+	public WebSocketClient(URI serverURI) {
+		this(serverURI, new Draft_17());
 	}
 
 	/**
@@ -68,21 +69,21 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 	 * specified URI. The channel does not attampt to connect automatically. The connection
 	 * will be established once you call <var>connect</var>.
 	 */
-	public WebSocketClient( URI serverUri , Draft draft ) {
-		this( serverUri, draft, null, 0 );
+	public WebSocketClient(URI serverUri, Draft draft) {
+		this(serverUri, draft, null, 0);
 	}
 
-	public WebSocketClient( URI serverUri , Draft protocolDraft , Map<String,String> httpHeaders , int connectTimeout ) {
-		if( serverUri == null ) {
+	public WebSocketClient(URI serverUri, Draft protocolDraft, Map<String, String> httpHeaders, int connectTimeout) {
+		if (serverUri == null) {
 			throw new IllegalArgumentException();
-		} else if( protocolDraft == null ) {
-			throw new IllegalArgumentException( "null as draft is permitted for `WebSocketServer` only!" );
+		} else if (protocolDraft == null) {
+			throw new IllegalArgumentException("null as draft is permitted for `WebSocketServer` only!");
 		}
 		this.uri = serverUri;
 		this.draft = protocolDraft;
 		this.headers = httpHeaders;
 		this.connectTimeout = connectTimeout;
-		this.engine = new WebSocketImpl( this, protocolDraft );
+		this.engine = new WebSocketImpl(this, protocolDraft);
 	}
 
 	/**
@@ -157,53 +158,57 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 
 	public void run() {
 		try {
-			if( socket == null ) {
-				socket = new Socket( proxy );
-			} else if( socket.isClosed() ) {
+			if (socket == null) {
+				socket = new Socket(proxy);
+			} else if (socket.isClosed()) {
 				throw new IOException();
 			}
-			if( !socket.isBound() )
-				socket.connect( new InetSocketAddress( uri.getHost(), getPort() ), connectTimeout );
+			if (!socket.isBound()) {
+				socket.connect(new InetSocketAddress(uri.getHost(), getPort()), connectTimeout);
+			}
 			istream = socket.getInputStream();
 			ostream = socket.getOutputStream();
-
 			sendHandshake();
-		} catch ( /*IOException | SecurityException | UnresolvedAddressException | InvalidHandshakeException | ClosedByInterruptException | SocketTimeoutException */Exception e ) {
-			onWebsocketError( engine, e );
-			engine.closeConnection( CloseFrame.NEVER_CONNECTED, e.getMessage() );
+		} catch (java.lang.Exception e) {
+			onWebsocketError(engine, e);
+			engine.closeConnection(CloseFrame.NEVER_CONNECTED, e.getMessage());
 			return;
 		}
-
-		writeThread = new Thread( new WebsocketWriteThread() );
+		writeThread = new Thread(new WebsocketWriteThread());
 		writeThread.start();
-
-		byte[] rawbuffer = new byte[ WebSocketImpl.RCVBUF ];
+		byte[] rawbuffer = new byte[WebSocketImpl.RCVBUF];
 		int readBytes;
-
 		try {
-			while ( !isClosing() && !isClosed() && ( readBytes = istream.read( rawbuffer ) ) != -1 ) {
-				engine.decode( ByteBuffer.wrap( rawbuffer, 0, readBytes ) );
-			}
+			while (((!isClosing()) && (!isClosed())) && ((readBytes = istream.read(rawbuffer)) != (-1))) {
+				engine.decode(ByteBuffer.wrap(rawbuffer, 0, readBytes));
+			} 
 			engine.eot();
-		} catch ( IOException e ) {
+		} catch (IOException e) {
 			engine.eot();
-		} catch ( RuntimeException e ) {
+		} catch (java.lang.RuntimeException e) {
 			// this catch case covers internal errors only and indicates a bug in this websocket implementation
-			onError( e );
-			engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() );
+			onError(e);
+			engine.closeConnection(CloseFrame.ABNORMAL_CLOSE, e.getMessage());
 		}
-		assert ( socket.isClosed() );
+		assert socket.isClosed();
 	}
+
 	private int getPort() {
 		int port = uri.getPort();
-		if( port == -1 ) {
+		if (port == (-1)) {
 			String scheme = uri.getScheme();
-			if( scheme.equals( "wss" ) ) {
+			if (scheme.equals("wss")) {
 				return WebSocket.DEFAULT_WSS_PORT;
-			} else if( scheme.equals( "ws" ) ) {
+			} else if (scheme.equals("ws")) {
 				return WebSocket.DEFAULT_PORT;
 			} else {
-				throw new RuntimeException( "unknown scheme: " + scheme );
+				throw new RuntimeException(
+<<<<<<< LEFT
+unknown scheme
+=======
+unknown scheme: 
+>>>>>>> RIGHT
+				 + scheme);
 			}
 		}
 		return port;
@@ -213,24 +218,25 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 		String path;
 		String part1 = uri.getRawPath();
 		String part2 = uri.getRawQuery();
-		if( part1 == null || part1.length() == 0 )
+		if ((part1 == null) || (part1.length() == 0)) {
 			path = "/";
-		else
+		} else {
 			path = part1;
-		if( part2 != null )
+		}
+		if (part2 != null) {
 			path += "?" + part2;
+		}
 		int port = getPort();
-		String host = uri.getHost() + ( port != WebSocket.DEFAULT_PORT ? ":" + port : "" );
-
+		String host = uri.getHost() + (port != WebSocket.DEFAULT_PORT ? ":" + port : "");
 		HandshakeImpl1Client handshake = new HandshakeImpl1Client();
-		handshake.setResourceDescriptor( path );
-		handshake.put( "Host", host );
-		if( headers != null ) {
-			for( Map.Entry<String,String> kv : headers.entrySet() ) {
-				handshake.put( kv.getKey(), kv.getValue() );
+		handshake.setResourceDescriptor(path);
+		handshake.put("Host", host);
+		if (headers != null) {
+			for (Map.Entry<String, String> kv : headers.entrySet()) {
+				handshake.put(kv.getKey(), kv.getValue());
 			}
 		}
-		engine.startHandshake( handshake );
+		engine.startHandshake(handshake);
 	}
 
 	/**
@@ -334,27 +340,32 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 
 	// ABTRACT METHODS /////////////////////////////////////////////////////////
 	public abstract void onOpen( ServerHandshake handshakedata );
+
 	public abstract void onMessage( String message );
+
 	public abstract void onClose( int code, String reason, boolean remote );
+
 	public abstract void onError( Exception ex );
+
 	public void onMessage( ByteBuffer bytes ) {
 	}
+
 	public void onFragment( Framedata frame ) {
 	}
 
 	private class WebsocketWriteThread implements Runnable {
 		@Override
 		public void run() {
-			Thread.currentThread().setName( "WebsocketWriteThread" );
+			Thread.currentThread().setName("WebsocketWriteThread");
 			try {
-				while ( !Thread.interrupted() ) {
+				while (!Thread.interrupted()) {
 					ByteBuffer buffer = engine.outQueue.take();
-					ostream.write( buffer.array(), 0, buffer.limit() );
+					ostream.write(buffer.array(), 0, buffer.limit());
 					ostream.flush();
-				}
-			} catch ( IOException e ) {
+				} 
+			} catch (IOException e) {
 				engine.eot();
-			} catch ( InterruptedException e ) {
+			} catch (java.lang.InterruptedException e) {
 				// this thread is regularly terminated via an interrupt
 			}
 		}
@@ -442,11 +453,12 @@ public abstract class WebSocketClient extends WebSocketAdapter implements Runnab
 	public InetSocketAddress getLocalSocketAddress() {
 		return engine.getLocalSocketAddress();
 	}
+
 	@Override
 	public InetSocketAddress getRemoteSocketAddress() {
 		return engine.getRemoteSocketAddress();
 	}
-	
+
 	@Override
 	public String getResourceDescriptor() {
 		return uri.getPath();
