diff --git a/java_case_studies/reference_repos/adt4j/conflict1/desired.java b/java_case_studies/reference_repos/adt4j/conflict1/spork_result.java
index 924ce00..9cc3571 100644
--- a/java_case_studies/reference_repos/adt4j/conflict1/desired.java
+++ b/java_case_studies/reference_repos/adt4j/conflict1/spork_result.java
@@ -31,23 +31,24 @@ package com.github.sviperll.adt4j;
 
 import com.github.sviperll.Throwables;
 import com.github.sviperll.adt4j.model.Stage0ValueClassModel;
-import com.github.sviperll.adt4j.model.Stage1ValueClassModel;
 import com.github.sviperll.adt4j.model.Stage0ValueClassModelFactory;
+import com.github.sviperll.adt4j.model.Stage1ValueClassModel;
 import com.github.sviperll.adt4j.model.util.GenerationResult;
+import com.github.sviperll.adt4j.model.util.SourceCodeValidationException;
 import com.github.sviperll.meta.FilerCodeWriter;
 import com.helger.jcodemodel.JCodeModel;
 import com.helger.jcodemodel.JDefinedClass;
 import com.helger.jcodemodel.JPackage;
-import com.helger.jcodemodel.meta.JCodeModelJavaxLangModelAdapter;
 import com.helger.jcodemodel.meta.CodeModelBuildingException;
+import com.helger.jcodemodel.meta.JCodeModelJavaxLangModelAdapter;
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.logging.Logger;
@@ -60,56 +61,60 @@ import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
+
 @SupportedAnnotationTypes("com.github.sviperll.adt4j.GenerateValueClassForVisitor")
 @SupportedSourceVersion(SourceVersion.RELEASE_7)
 public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
     private static final Logger logger = Logger.getLogger(GenerateValueClassForVisitorProcessor.class.getName());
+
     private static final DefaultVisitorImplementation DEFAULT_VISITOR_IMPLEMENTATION = new DefaultVisitorImplementation();
 
     private final Set<String> remainingElements = new HashSet<>();
+
     private final Map<String, List<String>> errorMap = new TreeMap<>();
 
     @Override
-    public boolean process(Set<? extends TypeElement> annotations,
-                           RoundEnvironment roundEnv) {
+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
         try {
             if (roundEnv.processingOver()) {
                 Set<TypeElement> elements = new HashSet<TypeElement>();
-                for (String path: remainingElements) {
+                for (String path : remainingElements) {
                     TypeElement typeElement = processingEnv.getElementUtils().getTypeElement(path);
-                    if (typeElement == null)
+                    if (typeElement == null) {
                         processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Unable to find type " + path);
-                    else
+                    } else {
                         elements.add(typeElement);
+                    }
                 }
                 ElementProcessor elementProcessor = new ElementProcessor(elements, new JCodeModel());
                 elementProcessor.generateClasses();
                 elementProcessor.writeGeneratedCode();
-                for (Entry<String, List<String>> errors: errorMap.entrySet()) {
+                for (Entry<String, List<String>> errors : errorMap.entrySet()) {
                     TypeElement typeElement = processingEnv.getElementUtils().getTypeElement(errors.getKey());
-                    for (String error: errors.getValue()) {
+                    for (String error : errors.getValue()) {
                         processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, error, typeElement);
                     }
                 }
             } else {
                 Set<TypeElement> elements = new HashSet<>();
-                for (Element element: roundEnv.getElementsAnnotatedWith(GenerateValueClassForVisitor.class)) {
-                    elements.add((TypeElement)element);
+                for (Element element : roundEnv.getElementsAnnotatedWith(GenerateValueClassForVisitor.class)) {
+                    elements.add(((TypeElement) (element)));
                 }
                 Set<String> elementsFromPreviousRound = new HashSet<>(remainingElements);
                 remainingElements.clear();
-                for (String path: elementsFromPreviousRound) {
+                for (String path : elementsFromPreviousRound) {
                     TypeElement typeElement = processingEnv.getElementUtils().getTypeElement(path);
-                    if (typeElement == null)
+                    if (typeElement == null) {
                         remainingElements.add(path);
-                    else
+                    } else {
                         elements.add(typeElement);
+                    }
                 }
                 ElementProcessor elementProcessor = new ElementProcessor(elements, new JCodeModel());
                 elementProcessor.generateClassesWithoutErrors();
                 elementProcessor.writeGeneratedCode();
             }
-        } catch (Exception ex) {
+        } catch (java.lang.Exception ex) {
             processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, Throwables.render(ex));
         }
         return true;
@@ -117,7 +122,9 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
 
     private class ElementProcessor {
         private final Set<? extends TypeElement> elements;
+
         private final JCodeModel jCodeModel;
+
         ElementProcessor(Set<? extends TypeElement> elements, JCodeModel jCodeModel) {
             this.elements = elements;
             this.jCodeModel = jCodeModel;
@@ -158,8 +165,8 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
             Iterator<JPackage> iterator = jCodeModel.packages();
             while (iterator.hasNext()) {
                 JPackage pkg = iterator.next();
-                for (JDefinedClass klass: pkg.classes()) {
-                    if (!klass.isHidden() && klass.containsErrorTypes() && generatedClasses.containsKey(klass.fullName())) {
+                for (JDefinedClass klass : pkg.classes()) {
+                    if (((!klass.isHidden()) && klass.containsErrorTypes()) && generatedClasses.containsKey(klass.fullName())) {
                         TypeElement sourceElement = generatedClasses.get(klass.fullName());
                         List<String> errors = new ArrayList<>();
                         errors.addAll(errorMap.get(sourceElement.getQualifiedName().toString()));
@@ -167,7 +174,7 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
                         errorMap.put(sourceElement.getQualifiedName().toString(), errors);
                     }
                 }
-            }
+            } 
         }
 
         void writeGeneratedCode() {
@@ -178,7 +185,7 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
                 } finally {
                     try {
                         writer.close();
-                    } catch (Exception ex) {
+                    } catch (java.lang.Exception ex) {
                         processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, Throwables.render(ex));
                     }
                 }
@@ -191,7 +198,7 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
             Map<String, Stage0ValueClassModel> result = new TreeMap<>();
             JCodeModel bootJCodeModel = new JCodeModel();
             Stage0ValueClassModelFactory stage0Processor = Stage0ValueClassModelFactory.createFactory(jCodeModel);
-            for (TypeElement element: elements) {
+            for (TypeElement element : elements) {
                 Visitor visitorAnnotation = element.getAnnotation(Visitor.class);
                 if (visitorAnnotation == null) {
                     visitorAnnotation = DEFAULT_VISITOR_IMPLEMENTATION;
@@ -211,7 +218,7 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
 
         private Map<String, Stage1ValueClassModel> processStage1(Map<String, Stage0ValueClassModel> stage0Results) throws RuntimeException {
             Map<String, Stage1ValueClassModel> result = new TreeMap<>();
-            for (TypeElement element: elements) {
+            for (TypeElement element : elements) {
                 List<String> errors = new ArrayList<>();
                 Visitor visitorAnnotation = element.getAnnotation(Visitor.class);
                 if (visitorAnnotation == null) {
@@ -224,20 +231,20 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
                 } catch (CodeModelBuildingException ex) {
                     throw new RuntimeException("Unexpected exception", ex);
                 }
-
                 Stage0ValueClassModel stage0Model = stage0Results.get(element.getQualifiedName().toString());
                 GenerationResult<Stage1ValueClassModel> model = stage0Model.createStage1Model(visitorModel, visitorAnnotation);
                 errors.addAll(model.errors());
                 errorMap.put(element.getQualifiedName().toString(), errors);
-                if (model.result() != null)
+                if (model.result() != null) {
                     result.put(element.getQualifiedName().toString(), model.result());
+                }
             }
             return result;
         }
 
         private Map<String, TypeElement> processStage2(Map<String, Stage1ValueClassModel> stage1Results) {
             Map<String, TypeElement> result = new TreeMap<>();
-            for (TypeElement element: elements) {
+            for (TypeElement element : elements) {
                 List<String> errors = new ArrayList<>();
                 errors.addAll(errorMap.get(element.getQualifiedName().toString()));
                 Stage1ValueClassModel stage1Model = stage1Results.get(element.getQualifiedName().toString());
@@ -250,7 +257,6 @@ public class GenerateValueClassForVisitorProcessor extends AbstractProcessor {
             }
             return result;
         }
-
     }
 
     private static class DefaultVisitorImplementation implements Visitor {
