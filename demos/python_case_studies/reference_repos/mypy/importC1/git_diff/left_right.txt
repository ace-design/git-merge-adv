diff --git a/python_case_studies/reference_repos/mypy/importC1/left.py b/python_case_studies/reference_repos/mypy/importC1/right.py
index 6b3b2d4..7a8ad36 100644
--- a/python_case_studies/reference_repos/mypy/importC1/left.py
+++ b/python_case_studies/reference_repos/mypy/importC1/right.py
@@ -1,12 +1,12 @@
 """Type parser"""
 
-from typing import List, Tuple, Union, cast, Optional
+from typing import List, Tuple
 
 from mypy.types import (
-    Type, UnboundType, TupleType, UnionType, TypeList, AnyType, CallableType, StarType,
+    Type, UnboundType, TupleType, TypeList, CallableType, StarType,
     EllipsisType
 )
-from mypy.lex import Token, Name, StrLit, Break, lex
+from mypy.lex import Token, Name, StrLit, lex
 from mypy import nodes
 
 
@@ -14,11 +14,10 @@ none = Token('')  # Empty token
 
 
 class TypeParseError(Exception):
-    def __init__(self, token: Token, index: int, message: Optional[str] = None) -> None:
+    def __init__(self, token: Token, index: int) -> None:
         super().__init__()
         self.token = token
         self.index = index
-        self.message = message
 
 
 def parse_type(tok: List[Token], index: int) -> Tuple[Type, int]:
@@ -224,7 +223,6 @@ def parse_signature(tokens: List[Token]) -> Tuple[CallableType, int]:
     i += 1
     arg_types = []  # type: List[Type]
     arg_kinds = []  # type: List[int]
-    encountered_ellipsis = False
     while tokens[i].string != ')':
         if tokens[i].string == '*':
             arg_kinds.append(nodes.ARG_STAR)
@@ -237,16 +235,6 @@ def parse_signature(tokens: List[Token]) -> Tuple[CallableType, int]:
         arg, i = parse_type(tokens, i)
         arg_types.append(arg)
         next = tokens[i].string
-
-        # Check for ellipsis. If it exists, assert it's the only arg_type.
-        # Disallow '(..., int) -> None' for example.
-        if isinstance(arg, EllipsisType):
-            encountered_ellipsis = True
-        if encountered_ellipsis and len(arg_types) != 1:
-            raise TypeParseError(tokens[i], i,
-                                 "Ellipses cannot accompany other argument types"
-                                 " in function type signature.")
-
         if next not in ',)':
             raise TypeParseError(tokens[i], i)
         if next == ',':
@@ -259,5 +247,4 @@ def parse_signature(tokens: List[Token]) -> Tuple[CallableType, int]:
     return CallableType(arg_types,
                         arg_kinds,
                         [None] * len(arg_types),
-                        ret_type, None,
-                        is_ellipsis_args=encountered_ellipsis), i
+                        ret_type, None), i
