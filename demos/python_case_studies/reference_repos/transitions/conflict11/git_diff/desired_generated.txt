diff --git a/python_case_studies/reference_repos/transitions/conflict11/desired.py b/python_case_studies/demo_results/MethodUnion/transitions-conflict11.py
index 3613e2f..6743a41 100644
--- a/python_case_studies/reference_repos/transitions/conflict11/desired.py
+++ b/python_case_studies/demo_results/MethodUnion/transitions-conflict11.py
@@ -1,3 +1,12 @@
+import inspect
+import itertools
+import logging
+import sys
+import warnings
+from collections import OrderedDict,defaultdict,deque
+from functools import partial
+from six import string_types
+from utils import get_callable
 """
     transitions.core
     ----------------
@@ -13,23 +22,15 @@ except ImportError:
     # python2
     pass
 
-import inspect
-import itertools
-import logging
-import sys
-import warnings
 
-from collections import OrderedDict, defaultdict, deque
-from functools import partial
-from six import string_types
 
-from .utils import get_callable
 
 # make deprecation warnings of transition visible for module users
 warnings.filterwarnings(action='default', message=r"Starting from transitions version 0\.6\.0 .*")
 
 _LOGGER = logging.getLogger(__name__)
 _LOGGER.addHandler(logging.NullHandler())
+<<<<<<< left_content.py
 
 
 # PY3 callable check from nsi-iff/fluidity project
@@ -38,6 +39,8 @@ if sys.version_info >= (3,):
         return hasattr(obj, '__call__')
 else:
     callable = callable
+=======
+>>>>>>> right_content.py
 
 
 def listify(obj):
@@ -92,6 +95,16 @@ def _prep_ordered_arg(desired_length, arguments=None):
 
 class State(object):
     """A persistent representation of a state managed by a ``Machine``.
+<<<<<<< left_content.py
+
+    Attributes:
+        name (str): State name which is also assigned to the model(s).
+        on_enter (list): Callbacks executed when a state is entered.
+        on_exit (list): Callbacks executed when a state is entered.
+        ignore_invalid_triggers (bool): Indicates if unhandled/invalid triggers should raise an exception.
+    """
+
+=======
 
     Attributes:
         name (str): State name which is also assigned to the model(s).
@@ -100,6 +113,7 @@ class State(object):
         ignore_invalid_triggers (bool): Indicates if unhandled/invalid triggers should raise an exception.
     """
 
+>>>>>>> right_content.py
     # A list of dynamic methods which can be resolved by a ``Machine`` instance for convenience functions.
     # Dynamic methods for states must always start with `on_`!
     dynamic_methods = ['on_enter', 'on_exit']
@@ -988,14 +1002,14 @@ class Machine(object):
             the callable will be resolved from the passed model in event_data. This function is not intended to
             be called directly but through state and transition callback definitions.
         Args:
-<<<<<<< HEAD
+<<<<<<< left_content.py
             func (string, callable): The callback function.
                 1. First, if the func is callable, just call it
                 2. Second, we try to import string assuming it is a path to a func
                 3. Fallback to a model attribute
 =======
             func (callable or str): The callback function.
->>>>>>> upstream/master
+>>>>>>> right_content.py
             event_data (EventData): An EventData instance to pass to the
                 callback (if event sending is enabled) or to extract arguments
                 from (if event sending is disabled).
@@ -1105,3 +1119,4 @@ class MachineError(Exception):
 
     def __str__(self):
         return repr(self.value)
+
