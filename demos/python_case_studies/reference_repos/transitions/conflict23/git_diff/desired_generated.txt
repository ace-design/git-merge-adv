diff --git a/python_case_studies/reference_repos/transitions/conflict23/desired.py b/python_case_studies/demo_results/MethodUnion/transitions-conflict23.py
index 18e49e3..ac3afad 100644
--- a/python_case_studies/reference_repos/transitions/conflict23/desired.py
+++ b/python_case_studies/demo_results/MethodUnion/transitions-conflict23.py
@@ -1,5 +1,5 @@
-from ..core import Transition, Machine
-from .nesting import NestedState
+from core import Transition,Machine
+from nesting import NestedState
 import abc
 try:
     import pygraphviz as pgv
@@ -80,7 +80,7 @@ class AGraph(Diagram):
                 self.seen.append(state.name)
                 container.add_node(n=state.name, shape=shape)
 
-    def _add_edges(self, events, container):
+    def _add_edges(self, events, sub):
         for event in events.items():
             event = event[1]
             label = str(event.name)
@@ -95,18 +95,21 @@ class AGraph(Diagram):
                         src = src.children
 
                 for t in transitions[1]:
+<<<<<<< left_content.py
                     dst = self.machine.get_state(t.dest)
-                    lbl = self._transition_label(label, t)
                     lhead = ''
-
                     if hasattr(dst, 'children') and len(dst.children) > 0:
                         lhead = 'cluster_' + dst.name
                         dst = dst.children[0]
                         while len(dst.children) > 0:
                             dst = src.children
 
-                    if container.has_edge(src.name, dst.name) is False:
-                        container.add_edge(src.name, dst.name, label=label, ltail=ltail, lhead=lhead)
+                    if sub.has_edge(src.name, dst.name) is False:
+                        sub.add_edge(src.name, dst.name, label=label, ltail=ltail, lhead=lhead)
+=======
+                    dst = t.dest
+                    lbl = self._transition_label(label, t)
+                    container.add_edge(src, dst, label=lbl)
 
     def _transition_label(self, edge_label, tran):
         if self.machine.show_conditions and tran.conditions:
@@ -118,6 +121,7 @@ class AGraph(Diagram):
                 ),
             )
         return edge_label
+>>>>>>> right_content.py
 
     def get_graph(self, title=None):
         """ Generate a DOT graph with pygraphviz, returns an AGraph object
@@ -145,6 +149,52 @@ class AGraph(Diagram):
         return fsm_graph
 
 
+<<<<<<< left_content.py
+=======
+class AAGraph(AGraph):
+
+    def __init__(self, *args, **kwargs):
+        self.seen = []
+        super(AAGraph, self).__init__(*args, **kwargs)
+
+    def _add_nodes(self, states, container):
+        # to be able to process children recursively as well as the state dict of a machine
+        states = states.values() if isinstance(states, dict) else states
+        for state in states:
+            if state.name in self.seen:
+                continue
+            elif hasattr(state, 'children') and state.children is not None:
+                self.seen.append(state.name)
+                sub = container.add_subgraph(name="cluster_" + state.name, label=state.name)
+                self._add_nodes(state.children, sub)
+            else:
+                try:
+                    shape = self.style_attributes['node']['default']['shape']
+                except KeyError:
+                    shape = 'circle'
+
+                state = state.name
+                self.seen.append(state)
+                container.add_node(n=state, shape=shape)
+
+    def _add_edges(self, events, sub):
+        for event in events.items():
+            event = event[1]
+            label = str(event.name)
+
+            for transitions in event.transitions.items():
+                src = transitions[0]
+                for t in transitions[1]:
+                    dst = self.machine.get_state(t.dest)
+                    if hasattr(dst, 'children') and dst.children is not None:
+                        dst = dst.get_initial().name
+                    else:
+                        dst = dst.name
+                    lbl = self._transition_label(label, t)
+                    sub.add_edge(src, dst, label=lbl)
+
+
+>>>>>>> right_content.py
 class MachineGraphSupport(Machine):
     _pickle_blacklist = ['graph']
 
@@ -254,3 +304,4 @@ class TransitionGraphSupport(Transition):
             event_data.machine.set_edge_state(source.name, dest.name, state='previous')
 
         super(TransitionGraphSupport, self)._change_state(event_data)
+
