diff --git a/python_case_studies/reference_repos/transitions/conflict25/left.py b/python_case_studies/reference_repos/transitions/conflict25/right.py
index 7d72f2a..2e8c6e9 100644
--- a/python_case_studies/reference_repos/transitions/conflict25/left.py
+++ b/python_case_studies/reference_repos/transitions/conflict25/right.py
@@ -15,7 +15,7 @@ logger.addHandler(logging.NullHandler())
 class AAGraph(AGraph):
     seen = []
 
-    def _add_nodes(self, states, container):
+    def _add_nodes(self, states, container, initial_state=None):
         # to be able to process children recursively as well as the state dict of a machine
         states = states.values() if isinstance(states, dict) else states
         for state in states:
@@ -23,11 +23,14 @@ class AAGraph(AGraph):
                 continue
             elif state.children is not None:
                 self.seen.append(state.name)
-                sub = container.add_subgraph(name="cluster_"+state.name, label=state.name)
+                sub = container.add_subgraph(name="cluster_" + state.name, label=state.name)
                 self._add_nodes(state.children, sub)
             else:
+                if initial_state is None:
+                    initial_state = self.machine._initial
+
                 # We want the inital state to be a double circle (UML style)
-                if state.name == self.machine._initial:
+                if state.name == initial_state:
                     shape = 'doublecircle'
                 else:
                     shape = self.state_attributes['shape']
@@ -92,7 +95,7 @@ class NestedTransition(Transition):
             # The loop is ended if we reach a root state or if source's parent is part of the shared_parent string
             # E.g. for Foo_Bar_Baz1_A with shared_parent Foo_Ba, Foo will not be exited.
             if source_parent is None or (shared_parent is not None and shared_parent.startswith(source_parent)):
-                break;
+                break
             source_state = machine.get_state(source_parent)
 
         enter_queue = []
@@ -175,7 +178,7 @@ class HierarchicalMachine(Machine):
                 if state in remap:
                     continue
                 tmp_states.append(NestedState(prefix + state, on_enter=on_enter, on_exit=on_exit, parent=parent,
-                                  ignore_invalid_triggers=ignore))
+                                              ignore_invalid_triggers=ignore))
             elif isinstance(state, dict):
                 state = copy.deepcopy(state)
                 if 'ignore_invalid_triggers' not in state:
@@ -206,10 +209,8 @@ class HierarchicalMachine(Machine):
                     self._buffered_transitions.append((trans['trigger'], source, dest, trans.get('conditions', None),
                                                        trans.get('unless', None), trans.get('before', None),
                                                        trans.get('after', None)))
-            elif isinstance(state, NestedState):
+            else:
                 tmp_states.append(state)
-                if state.children:
-                    tmp_states.extend(self._flatten(state.children))
             new_states.extend(tmp_states)
         return new_states
 
@@ -229,13 +230,10 @@ class HierarchicalMachine(Machine):
                       'ignore_invalid_triggers': state.ignore_invalid_triggers}
                 if state.children is not None:
                     bp['children'] = self._to_blueprint(state.children)
-            elif isinstance(state, Machine):
-                # this happens if there
-                if len(states) > 1:
-                    raise ValueError("States arrays and nested machines cannot be mixed!")
+            elif isinstance(state, HierarchicalMachine):
+                if len(blueprints) > 0:
+                    raise ValueError
                 return state.blueprints['states']
-            else:
-                raise ValueError('Do not know state of type %s' % type(state))
 
             blueprints.append(bp)
         return blueprints
@@ -266,9 +264,13 @@ class HierarchicalMachine(Machine):
             bp_before = None
             bp_after = None
             if self.before_state_change:
-                bp_before = listify(before) + listify(self.before_state_change)
+                bp_before = listify(self.before_state_change)
+                bp_before.extend(listify(before))
+                bp_before = unify(bp_before)
             if self.after_state_change:
-                bp_after = listify(after) + listify(self.after_state_change)
+                bp_after = listify(after)
+                bp_after.extend(listify(self.after_state_change))
+                bp_after = unify(bp_after)
             self.blueprints['transitions'].append({'trigger': trigger, 'source': source, 'dest': dest,
                                                    'conditions': conditions, 'unless': unless, 'before': bp_before,
                                                    'after': bp_after})
@@ -321,10 +323,7 @@ class LockedMachine(Machine):
         return tmp
 
     def __getattr__(self, item):
-        try:
-            return super(LockedMachine, self).__getattribute__(item)
-        except AttributeError:
-            return super(LockedMachine, self).__getattr__(item)
+        return super(LockedMachine, self).__getattribute__(item)
 
 
 # Uses HSM as well as Mutex features
@@ -336,3 +335,17 @@ class LockedHierarchicalMachine(LockedMachine, HierarchicalMachine):
     @staticmethod
     def _create_transition(*args, **kwargs):
         return LockedNestedTransition(*args, **kwargs)
+
+
+# helper functions to filter duplicates in transition functions
+def unify(seq):
+    return list(_unify(seq))
+
+
+def _unify(seq):
+    seen = set()
+    for x in seq:
+        if x in seen:
+            continue
+        seen.add(x)
+        yield x
