diff --git a/python_case_studies/reference_repos/transitions/conflict12/desired.py b/python_case_studies/demo_results/MethodUnion/transitions-conflict12.py
index cdd3130..917b3b1 100644
--- a/python_case_studies/reference_repos/transitions/conflict12/desired.py
+++ b/python_case_studies/demo_results/MethodUnion/transitions-conflict12.py
@@ -1,3 +1,8 @@
+from threading import Timer
+import logging
+import inspect
+from core import MachineError,listify,State
+import itertools
 """
     transitions.extensions.states
     -----------------------------
@@ -5,11 +10,7 @@
     This module contains mix ins which can be used to extend state functionality.
 """
 
-from threading import Timer
-import logging
-import inspect
 
-from ..core import MachineError, listify, State
 
 _LOGGER = logging.getLogger(__name__)
 _LOGGER.addHandler(logging.NullHandler())
@@ -94,10 +95,16 @@ class Timeout(State):
             when the state is entered and self.timeout is larger than 0.
         """
         if self.timeout > 0:
+<<<<<<< left_content.py
             timer = Timer(self.timeout, self._process_timeout, args=(event_data,))
-            timer.setDaemon(True)
             timer.start()
             self.runner[id(event_data.model)] = timer
+=======
+            t = Timer(self.timeout, self._process_timeout, args=(event_data,))
+            t.setDaemon(True)
+            t.start()
+            self.runner[id(event_data.model)] = t
+>>>>>>> right_content.py
         super(Timeout, self).enter(event_data)
 
     def exit(self, event_data):
@@ -177,3 +184,4 @@ def add_state_features(*args):
 class VolatileObject(object):
     """ Empty Python object which can be used to assign attributes to."""
     pass
+
