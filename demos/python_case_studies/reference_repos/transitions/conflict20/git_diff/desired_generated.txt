diff --git a/python_case_studies/reference_repos/transitions/conflict20/desired.py b/python_case_studies/demo_results/MethodUnion/transitions-conflict20.py
index 77f3aae..5a5a959 100644
--- a/python_case_studies/reference_repos/transitions/conflict20/desired.py
+++ b/python_case_studies/demo_results/MethodUnion/transitions-conflict20.py
@@ -1,12 +1,12 @@
-from ..core import Transition, Machine
-from .nesting import NestedState
+from core import Transition,Machine
+from nesting import NestedState
 import abc
+import logging
 try:
     import pygraphviz as pgv
 except:
     pgv = None
 
-import logging
 logger = logging.getLogger(__name__)
 logger.addHandler(logging.NullHandler())
 
@@ -108,6 +108,7 @@ class AGraph(Diagram):
                         while len(dst.children) > 0:
                             dst = src.children
 
+<<<<<<< left_content.py
                     # special case in which parent to first child edge is resolved to a self reference.
                     # will be omitted for now. I have not found a solution for how to fix this yet since having
                     # cluster to node edges is a bit messy with dot.
@@ -118,6 +119,9 @@ class AGraph(Diagram):
                         edge.attr['label'] = edge.attr['label'] + ' || ' + edge_label
                     else:
                         container.add_edge(src.name, dst.name, label=edge_label, ltail=ltail, lhead=lhead)
+=======
+                    container.add_edge(src.name, dst.name, label=label, ltail=ltail, lhead=lhead)
+>>>>>>> right_content.py
 
     def _transition_label(self, edge_label, tran):
         if self.machine.show_conditions and tran.conditions:
@@ -271,3 +275,4 @@ class TransitionGraphSupport(Transition):
                     dest = dest.children[0]
             event_data.machine.set_edge_state(source.name, dest.name, state='previous')
         super(TransitionGraphSupport, self)._change_state(event_data)
+
