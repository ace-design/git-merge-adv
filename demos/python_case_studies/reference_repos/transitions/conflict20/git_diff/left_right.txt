diff --git a/python_case_studies/reference_repos/transitions/conflict20/left.py b/python_case_studies/reference_repos/transitions/conflict20/right.py
index 77f3aae..a7e45ea 100644
--- a/python_case_studies/reference_repos/transitions/conflict20/left.py
+++ b/python_case_studies/reference_repos/transitions/conflict20/right.py
@@ -99,7 +99,7 @@ class AGraph(Diagram):
 
                 for t in transitions[1]:
                     dst = self.machine.get_state(t.dest)
-                    edge_label = self._transition_label(label, t)
+                    label = self._transition_label(label, t)
                     lhead = ''
 
                     if hasattr(dst, 'children') and len(dst.children) > 0:
@@ -108,16 +108,7 @@ class AGraph(Diagram):
                         while len(dst.children) > 0:
                             dst = src.children
 
-                    # special case in which parent to first child edge is resolved to a self reference.
-                    # will be omitted for now. I have not found a solution for how to fix this yet since having
-                    # cluster to node edges is a bit messy with dot.
-                    if dst.name == src.name and transitions[0] != t.dest:
-                        continue
-                    elif container.has_edge(src.name, dst.name):
-                        edge = container.get_edge(src.name, dst.name)
-                        edge.attr['label'] = edge.attr['label'] + ' || ' + edge_label
-                    else:
-                        container.add_edge(src.name, dst.name, label=edge_label, ltail=ltail, lhead=lhead)
+                    container.add_edge(src.name, dst.name, label=label, ltail=ltail, lhead=lhead)
 
     def _transition_label(self, edge_label, tran):
         if self.machine.show_conditions and tran.conditions:
