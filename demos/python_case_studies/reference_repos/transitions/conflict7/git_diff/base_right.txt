diff --git a/python_case_studies/reference_repos/transitions/conflict7/base.py b/python_case_studies/reference_repos/transitions/conflict7/right.py
index 80a2314..7b1dce3 100644
--- a/python_case_studies/reference_repos/transitions/conflict7/base.py
+++ b/python_case_studies/reference_repos/transitions/conflict7/right.py
@@ -136,15 +136,13 @@ class State(object):
     def enter(self, event_data):
         """ Triggered when a state is entered. """
         _LOGGER.debug("%sEntering state %s. Processing callbacks...", event_data.machine.name, self.name)
-        for handle in self.on_enter:
-            event_data.machine.callback(handle, event_data)
+        event_data.machine.callbacks(self.on_enter, event_data)
         _LOGGER.info("%sEntered state %s", event_data.machine.name, self.name)
 
     def exit(self, event_data):
         """ Triggered when a state is exited. """
         _LOGGER.debug("%sExiting state %s. Processing callbacks...", event_data.machine.name, self.name)
-        for handle in self.on_exit:
-            event_data.machine.callback(handle, event_data)
+        event_data.machine.callbacks(self.on_exit, event_data)
         _LOGGER.info("%sExited state %s", event_data.machine.name, self.name)
 
     def add_callback(self, trigger, func):
@@ -222,6 +220,7 @@ class Transition(object):
 
     # A list of dynamic methods which can be resolved by a ``Machine`` instance for convenience functions.
     dynamic_methods = ['before', 'after', 'prepare']
+    condition_cls = Condition
 
     def __init__(self, source, dest, conditions=None, unless=None, before=None,
                  after=None, prepare=None):
@@ -250,10 +249,18 @@ class Transition(object):
         self.conditions = []
         if conditions is not None:
             for cond in listify(conditions):
-                self.conditions.append(Condition(cond))
+                self.conditions.append(self.condition_cls(cond))
         if unless is not None:
             for cond in listify(unless):
-                self.conditions.append(Condition(cond, target=False))
+                self.conditions.append(self.condition_cls(cond, target=False))
+
+    def _eval_conditions(self, event_data):
+        for cond in self.conditions:
+            if not cond.check(event_data):
+                _LOGGER.debug("%sTransition condition failed: %s() does not return %s. Transition halted.",
+                              event_data.machine.name, cond.func, cond.target)
+                return False
+        return True
 
     def execute(self, event_data):
         """ Execute the transition.
@@ -264,27 +271,21 @@ class Transition(object):
         """
         _LOGGER.debug("%sInitiating transition from state %s to state %s...",
                       event_data.machine.name, self.source, self.dest)
-        machine = event_data.machine
 
-        for func in self.prepare:
-            machine.callback(func, event_data)
-            _LOGGER.debug("Executed callback '%s' before conditions.", func)
+        event_data.machine.callbacks(self.prepare, event_data)
+        _LOGGER.debug("%sExecuted callbacks before conditions.", event_data.machine.name)
 
-        for cond in self.conditions:
-            if not cond.check(event_data):
-                _LOGGER.debug("%sTransition condition failed: %s() does not return %s. Transition halted.",
-                              event_data.machine.name, cond.func, cond.target)
-                return False
-        for func in itertools.chain(machine.before_state_change, self.before):
-            machine.callback(func, event_data)
-            _LOGGER.debug("%sExecuted callback '%s' before transition.", event_data.machine.name, func)
+        if not self._eval_conditions(event_data):
+            return False
+
+        event_data.machine.callbacks(itertools.chain(event_data.machine.before_state_change, self.before), event_data)
+        _LOGGER.debug("%sExecuted callback before transition.", event_data.machine.name)
 
         if self.dest:  # if self.dest is None this is an internal transition with no actual state change
             self._change_state(event_data)
 
-        for func in itertools.chain(self.after, machine.after_state_change):
-            machine.callback(func, event_data)
-            _LOGGER.debug("%sExecuted callback '%s' after transition.", event_data.machine.name, func)
+        event_data.machine.callbacks(itertools.chain(self.after, event_data.machine.after_state_change), event_data)
+        _LOGGER.debug("%sExecuted callback after transition.", event_data.machine.name)
         return True
 
     def _change_state(self, event_data):
@@ -423,9 +424,8 @@ class Event(object):
         return self._process(event_data)
 
     def _process(self, event_data):
-        for func in self.machine.prepare_event:
-            self.machine.callback(func, event_data)
-            _LOGGER.debug("Executed machine preparation callback '%s' before conditions.", func)
+        self.machine.callbacks(self.machine.prepare_event, event_data)
+        _LOGGER.debug("%sExecuted machine preparation callbacks before conditions.", self.machine.name)
 
         try:
             for trans in self.transitions[event_data.state.name]:
@@ -437,9 +437,9 @@ class Event(object):
             event_data.error = err
             raise
         finally:
-            for func in self.machine.finalize_event:
-                self.machine.callback(func, event_data)
-                _LOGGER.debug("Executed machine finalize callback '%s'.", func)
+            self.machine.callbacks(self.machine.finalize_event, event_data)
+            _LOGGER.debug("%sExecuted machine finalize callbacks", self.machine.name)
+
         return event_data.result
 
     def __repr__(self):
@@ -1011,6 +1011,12 @@ class Machine(object):
         """
         return all([getattr(model, trigger)(*args, **kwargs) for model in self.models])
 
+    def callbacks(self, funcs, event_data):
+        """ Triggers a list of callbacks """
+        for func in funcs:
+            self.callback(func, event_data)
+            _LOGGER.info("%sExecuted callback '%s'", self.name, func)
+
     def callback(self, func, event_data):
         """ Trigger a callback function with passed event_data parameters. In case func is a string,
             the callable will be resolved from the passed model in event_data. This function is not intended to
