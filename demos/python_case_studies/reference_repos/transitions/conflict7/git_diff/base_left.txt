diff --git a/python_case_studies/reference_repos/transitions/conflict7/base.py b/python_case_studies/reference_repos/transitions/conflict7/left.py
index 80a2314..1c01e56 100644
--- a/python_case_studies/reference_repos/transitions/conflict7/base.py
+++ b/python_case_studies/reference_repos/transitions/conflict7/left.py
@@ -50,24 +50,6 @@ def listify(obj):
     return obj if isinstance(obj, (list, tuple, EnumMeta)) else [obj]
 
 
-def _get_trigger(model, machine, trigger_name, *args, **kwargs):
-    """Convenience function added to the model to trigger events by name.
-    Args:
-        model (object): Model with assigned event trigger.
-        machine (Machine): The machine containing the evaluated events.
-        trigger_name (str): Name of the trigger to be called.
-        *args: Variable length argument list which is passed to the triggered event.
-        **kwargs: Arbitrary keyword arguments which is passed to the triggered event.
-    Returns:
-        bool: True if a transitions has been conducted or the trigger event has been queued.
-    """
-    try:
-        return machine.events[trigger_name].trigger(model, *args, **kwargs)
-    except KeyError:
-        pass
-    raise AttributeError("Do not know event named '%s'." % trigger_name)
-
-
 def _prep_ordered_arg(desired_length, arguments=None):
     """Ensure list of arguments passed to add_ordered_transitions has the proper length.
     Expands the given arguments and apply same condition, callback
@@ -94,7 +76,7 @@ class State(object):
     Attributes:
         name (str): State name which is also assigned to the model(s).
         on_enter (list): Callbacks executed when a state is entered.
-        on_exit (list): Callbacks executed when a state is entered.
+        on_exit (list): Callbacks executed when a state is exited.
         ignore_invalid_triggers (bool): Indicates if unhandled/invalid triggers should raise an exception.
     """
 
@@ -106,11 +88,11 @@ class State(object):
                  ignore_invalid_triggers=None):
         """
         Args:
-            name (string): The name of the state
-            on_enter (string, list): Optional callable(s) to trigger when a
+            name (str or Enum): The name of the state
+            on_enter (str or list): Optional callable(s) to trigger when a
                 state is entered. Can be either a string providing the name of
                 a callable, or a list of strings.
-            on_exit (string, list): Optional callable(s) to trigger when a
+            on_exit (str or list): Optional callable(s) to trigger when a
                 state is exited. Can be either a string providing the name of a
                 callable, or a list of strings.
             ignore_invalid_triggers (Boolean): Optional flag to indicate if
@@ -136,23 +118,21 @@ class State(object):
     def enter(self, event_data):
         """ Triggered when a state is entered. """
         _LOGGER.debug("%sEntering state %s. Processing callbacks...", event_data.machine.name, self.name)
-        for handle in self.on_enter:
-            event_data.machine.callback(handle, event_data)
-        _LOGGER.info("%sEntered state %s", event_data.machine.name, self.name)
+        event_data.machine.callbacks(self.on_enter, event_data)
+        _LOGGER.info("%sFinished processing state %s enter callbacks.", event_data.machine.name, self.name)
 
     def exit(self, event_data):
         """ Triggered when a state is exited. """
         _LOGGER.debug("%sExiting state %s. Processing callbacks...", event_data.machine.name, self.name)
-        for handle in self.on_exit:
-            event_data.machine.callback(handle, event_data)
-        _LOGGER.info("%sExited state %s", event_data.machine.name, self.name)
+        event_data.machine.callbacks(self.on_exit, event_data)
+        _LOGGER.info("%sFinished processing state %s exit callbacks.", event_data.machine.name, self.name)
 
     def add_callback(self, trigger, func):
         """ Add a new enter or exit callback.
         Args:
-            trigger (string): The type of triggering event. Must be one of
+            trigger (str): The type of triggering event. Must be one of
                 'enter' or 'exit'.
-            func (string): The name of the callback function.
+            func (str): The name of the callback function.
         """
         callback_list = getattr(self, 'on_' + trigger)
         callback_list.append(func)
@@ -174,7 +154,7 @@ class Condition(object):
     def __init__(self, func, target=True):
         """
         Args:
-            func (string): Name of the condition-checking callable
+            func (str): Name of the condition-checking callable
             target (bool): Indicates the target state--i.e., when True,
                 the condition-checking callback should return True to pass,
                 and when False, the callback should return False to pass.
@@ -220,8 +200,11 @@ class Transition(object):
             but only if condition checks have been successful.
     """
 
-    # A list of dynamic methods which can be resolved by a ``Machine`` instance for convenience functions.
     dynamic_methods = ['before', 'after', 'prepare']
+    """ A list of dynamic methods which can be resolved by a ``Machine`` instance for convenience functions. """
+    condition_cls = Condition
+    """ The class used to wrap condition checks. Can be replaced to alter condition resolution behaviour
+        (e.g. OR instead of AND for 'conditions' or AND instead of OR for 'unless') """
 
     def __init__(self, source, dest, conditions=None, unless=None, before=None,
                  after=None, prepare=None):
@@ -250,10 +233,18 @@ class Transition(object):
         self.conditions = []
         if conditions is not None:
             for cond in listify(conditions):
-                self.conditions.append(Condition(cond))
+                self.conditions.append(self.condition_cls(cond))
         if unless is not None:
             for cond in listify(unless):
-                self.conditions.append(Condition(cond, target=False))
+                self.conditions.append(self.condition_cls(cond, target=False))
+
+    def _eval_conditions(self, event_data):
+        for cond in self.conditions:
+            if not cond.check(event_data):
+                _LOGGER.debug("%sTransition condition failed: %s() does not return %s. Transition halted.",
+                              event_data.machine.name, cond.func, cond.target)
+                return False
+        return True
 
     def execute(self, event_data):
         """ Execute the transition.
@@ -264,41 +255,35 @@ class Transition(object):
         """
         _LOGGER.debug("%sInitiating transition from state %s to state %s...",
                       event_data.machine.name, self.source, self.dest)
-        machine = event_data.machine
 
-        for func in self.prepare:
-            machine.callback(func, event_data)
-            _LOGGER.debug("Executed callback '%s' before conditions.", func)
+        event_data.machine.callbacks(self.prepare, event_data)
+        _LOGGER.debug("%sExecuted callbacks before conditions.", event_data.machine.name)
 
-        for cond in self.conditions:
-            if not cond.check(event_data):
-                _LOGGER.debug("%sTransition condition failed: %s() does not return %s. Transition halted.",
-                              event_data.machine.name, cond.func, cond.target)
-                return False
-        for func in itertools.chain(machine.before_state_change, self.before):
-            machine.callback(func, event_data)
-            _LOGGER.debug("%sExecuted callback '%s' before transition.", event_data.machine.name, func)
+        if not self._eval_conditions(event_data):
+            return False
+
+        event_data.machine.callbacks(itertools.chain(event_data.machine.before_state_change, self.before), event_data)
+        _LOGGER.debug("%sExecuted callback before transition.", event_data.machine.name)
 
         if self.dest:  # if self.dest is None this is an internal transition with no actual state change
             self._change_state(event_data)
 
-        for func in itertools.chain(self.after, machine.after_state_change):
-            machine.callback(func, event_data)
-            _LOGGER.debug("%sExecuted callback '%s' after transition.", event_data.machine.name, func)
+        event_data.machine.callbacks(itertools.chain(self.after, event_data.machine.after_state_change), event_data)
+        _LOGGER.debug("%sExecuted callback after transition.", event_data.machine.name)
         return True
 
     def _change_state(self, event_data):
         event_data.machine.get_state(self.source).exit(event_data)
         event_data.machine.set_state(self.dest, event_data.model)
-        event_data.update(event_data.model.state)
+        event_data.update(getattr(event_data.model, event_data.machine.model_attribute))
         event_data.machine.get_state(self.dest).enter(event_data)
 
     def add_callback(self, trigger, func):
         """ Add a new before, after, or prepare callback.
         Args:
-            trigger (string): The type of triggering event. Must be one of
+            trigger (str): The type of triggering event. Must be one of
                 'before', 'after' or 'prepare'.
-            func (string): The name of the callback function.
+            func (str): The name of the callback function.
         """
         callback_list = getattr(self, trigger)
         callback_list.append(func)
@@ -351,7 +336,7 @@ class EventData(object):
         """ Updates the EventData object with the passed state.
 
         Attributes:
-            state (State or str or Enum): The state object or string to assign to EventData.
+            state (State, str or Enum): The state object, enum member or string to assign to EventData.
         """
 
         if not isinstance(state, State):
@@ -370,7 +355,7 @@ class Event(object):
     def __init__(self, name, machine):
         """
         Args:
-            name (string): The name of the event, which is also the name of the
+            name (str): The name of the event, which is also the name of the
                 triggering callable (e.g., 'advance' implies an advance()
                 method).
             machine (Machine): The current Machine instance.
@@ -408,7 +393,7 @@ class Event(object):
         """ Internal trigger function called by the ``Machine`` instance. This should not
         be called directly but via the public method ``Machine.trigger``.
         """
-        state = self.machine.get_state(model.state)
+        state = self.machine.get_model_state(model)
         if state.name not in self.transitions:
             msg = "%sCan't trigger event %s from state %s!" % (self.machine.name, self.name,
                                                                state.name)
@@ -423,9 +408,8 @@ class Event(object):
         return self._process(event_data)
 
     def _process(self, event_data):
-        for func in self.machine.prepare_event:
-            self.machine.callback(func, event_data)
-            _LOGGER.debug("Executed machine preparation callback '%s' before conditions.", func)
+        self.machine.callbacks(self.machine.prepare_event, event_data)
+        _LOGGER.debug("%sExecuted machine preparation callbacks before conditions.", self.machine.name)
 
         try:
             for trans in self.transitions[event_data.state.name]:
@@ -437,9 +421,9 @@ class Event(object):
             event_data.error = err
             raise
         finally:
-            for func in self.machine.finalize_event:
-                self.machine.callback(func, event_data)
-                _LOGGER.debug("Executed machine finalize callback '%s'.", func)
+            self.machine.callbacks(self.machine.finalize_event, event_data)
+            _LOGGER.debug("%sExecuted machine finalize callbacks", self.machine.name)
+
         return event_data.result
 
     def __repr__(self):
@@ -448,9 +432,9 @@ class Event(object):
     def add_callback(self, trigger, func):
         """ Add a new before or after callback to all available transitions.
         Args:
-            trigger (string): The type of triggering event. Must be one of
+            trigger (str): The type of triggering event. Must be one of
                 'before', 'after' or 'prepare'.
-            func (string): The name of the callback function.
+            func (str): The name of the callback function.
         """
         for trans in itertools.chain(*self.transitions.values()):
             trans.add_callback(trigger, func)
@@ -496,17 +480,17 @@ class Machine(object):
                  send_event=False, auto_transitions=True,
                  ordered_transitions=False, ignore_invalid_triggers=None,
                  before_state_change=None, after_state_change=None, name=None,
-                 queued=False, prepare_event=None, finalize_event=None, **kwargs):
+                 queued=False, prepare_event=None, finalize_event=None, model_attribute='state', **kwargs):
         """
         Args:
             model (object or list): The object(s) whose states we want to manage. If 'self',
                 the current Machine instance will be used the model (i.e., all
                 triggering events will be attached to the Machine itself). Note that an empty list
                 is treated like no model.
-            states (list): A list of valid states. Each element can be either a
-                string or a State instance. If string, a new generic State
-                instance will be created that has the same name as the string.
-            initial (string or State): The initial state of the passed model[s].
+            states (list or Enum): A list or enumeration of valid states. Each list element can be either a
+                string, an enum member or a State instance. If string or enum member, a new generic State
+                instance will be created that is named according to the string or enum member's name.
+            initial (str, Enum or State): The initial state of the passed model[s].
             transitions (list): An optional list of transitions. Each element
                 is a dictionary of named arguments to be passed onto the
                 Transition initializer.
@@ -570,6 +554,7 @@ class Machine(object):
         self.after_state_change = after_state_change
         self.finalize_event = finalize_event
         self.name = name + ": " if name is not None else ""
+        self.model_attribute = model_attribute
 
         self.models = []
 
@@ -601,12 +586,12 @@ class Machine(object):
         for mod in models:
             mod = self if mod == 'self' else mod
             if mod not in self.models:
-                self._checked_assignment(mod, 'trigger', partial(_get_trigger, mod, self))
+                self._checked_assignment(mod, 'trigger', partial(self._get_trigger, mod))
 
-                for trigger, _ in self.events.items():
+                for trigger in self.events:
                     self._add_trigger_to_model(trigger, mod)
 
-                for _, state in self.states.items():
+                for state in self.states.values():
                     self._add_model_to_state(state, mod)
 
                 self.set_state(initial, model=mod)
@@ -643,7 +628,7 @@ class Machine(object):
             if value.name not in self.states:
                 self.add_state(value)
             else:
-                assert self._has_state(value)
+                _ = self._has_state(value, raise_error=True)
             self._initial = value.name
         else:
             state_name = value.name if isinstance(value, Enum) else value
@@ -728,19 +713,24 @@ class Machine(object):
         Returns:
             bool: Whether the model's current state is state.
         """
-        return model.state == state
+        return getattr(model, self.model_attribute) == state
+
+    def get_model_state(self, model):
+        return self.get_state(getattr(model, self.model_attribute))
 
     def set_state(self, state, model=None):
         """
             Set the current state.
         Args:
-            state (str or Enum): value of setted state
+            state (str or Enum or State): value of state to be set
+            model (optional[object]): targeted model; if not set, all models will be set to 'state'
         """
-        state = self.get_state(state)
+        if not isinstance(state, State):
+            state = self.get_state(state)
         models = self.models if model is None else listify(model)
 
         for mod in models:
-            mod.state = state.value
+            setattr(mod, self.model_attribute, state.value)
 
     def add_state(self, *args, **kwargs):
         """ Alias for add_states. """
@@ -750,13 +740,12 @@ class Machine(object):
                    ignore_invalid_triggers=None, **kwargs):
         """ Add new state(s).
         Args:
-            states (list, string, dict, or State): a list, a State instance, the
-                name of a new state, or a dict with keywords to pass on to the
-                State initializer. If a list, each element can be of any of the
-                latter three types.
-            on_enter (string or list): callbacks to trigger when the state is
+            states (list, str, dict, Enum or State): a list, a State instance, the
+                name of a new state, an enumeration (member) or a dict with keywords to pass on to the
+                State initializer. If a list, each element can be a string, State or enumeration member.
+            on_enter (str or list): callbacks to trigger when the state is
                 entered. Only valid if first argument is string.
-            on_exit (string or list): callbacks to trigger when the state is
+            on_exit (str or list): callbacks to trigger when the state is
                 exited. Only valid if first argument is string.
             ignore_invalid_triggers: when True, any calls to trigger methods
                 that are not valid for the present state (e.g., calling an
@@ -788,10 +777,14 @@ class Machine(object):
             self.states[state.name] = state
             for model in self.models:
                 self._add_model_to_state(state, model)
-        # Add automatic transitions after all states have been created
-        if self.auto_transitions:
-            for state in self.states.keys():
-                self.add_transition('to_%s' % state, self.wildcard_all, state)
+            if self.auto_transitions:
+                for a_state in self.states.keys():
+                    # add all states as sources to auto transitions 'to_<state>' with dest <state>
+                    if a_state == state.name:
+                        self.add_transition('to_%s' % a_state, self.wildcard_all, a_state)
+                    # add auto transition with source <state> to <a_state>
+                    else:
+                        self.add_transition('to_%s' % a_state, state.name, a_state)
 
     def _add_model_to_state(self, state, model):
         self._checked_assignment(model, 'is_%s' % state.name, partial(self.is_state, state.value, model))
@@ -813,6 +806,28 @@ class Machine(object):
     def _add_trigger_to_model(self, trigger, model):
         self._checked_assignment(model, trigger, partial(self.events[trigger].trigger, model))
 
+    def _get_trigger(self, model, trigger_name, *args, **kwargs):
+        """Convenience function added to the model to trigger events by name.
+        Args:
+            model (object): Model with assigned event trigger.
+            machine (Machine): The machine containing the evaluated events.
+            trigger_name (str): Name of the trigger to be called.
+            *args: Variable length argument list which is passed to the triggered event.
+            **kwargs: Arbitrary keyword arguments which is passed to the triggered event.
+        Returns:
+            bool: True if a transitions has been conducted or the trigger event has been queued.
+        """
+        try:
+            event = self.events[trigger_name]
+        except KeyError:
+            state = self.get_model_state(model)
+            ignore = state.ignore_invalid_triggers if state.ignore_invalid_triggers is not None \
+                else self.ignore_invalid_triggers
+            if not ignore:
+                raise AttributeError("Do not know event named '%s'." % trigger_name)
+            return False
+        return event.trigger(model, *args, **kwargs)
+
     def get_triggers(self, *args):
         """ Collects all triggers FROM certain states.
         Args:
@@ -828,46 +843,56 @@ class Machine(object):
                        unless=None, before=None, after=None, prepare=None, **kwargs):
         """ Create a new Transition instance and add it to the internal list.
         Args:
-            trigger (string): The name of the method that will trigger the
+            trigger (str): The name of the method that will trigger the
                 transition. This will be attached to the currently specified
                 model (e.g., passing trigger='advance' will create a new
                 advance() method in the model that triggers the transition.)
-            source(string or list): The name of the source state--i.e., the state we
+            source(str or list): The name of the source state--i.e., the state we
                 are transitioning away from. This can be a single state, a
                 list of states or an asterisk for all states.
-            dest (string): The name of the destination State--i.e., the state
+            dest (str): The name of the destination State--i.e., the state
                 we are transitioning into. This can be a single state or an
                 equal sign to specify that the transition should be reflexive
                 so that the destination will be the same as the source for
                 every given source. If dest is None, this transition will be
                 an internal transition (exit/enter callbacks won't be processed).
-            conditions (string or list): Condition(s) that must pass in order
+            conditions (str or list): Condition(s) that must pass in order
                 for the transition to take place. Either a list providing the
                 name of a callable, or a list of callables. For the transition
                 to occur, ALL callables must return True.
-            unless (string, list): Condition(s) that must return False in order
+            unless (str or list): Condition(s) that must return False in order
                 for the transition to occur. Behaves just like conditions arg
                 otherwise.
-            before (string or list): Callables to call before the transition.
-            after (string or list): Callables to call after the transition.
-            prepare (string or list): Callables to call when the trigger is activated
+            before (str or list): Callables to call before the transition.
+            after (str or list): Callables to call after the transition.
+            prepare (str or list): Callables to call when the trigger is activated
             **kwargs: Additional arguments which can be passed to the created transition.
                 This is useful if you plan to extend Machine.Transition and require more parameters.
         """
+        if trigger == self.model_attribute:
+            raise ValueError("Trigger name cannot be same as model attribute name.")
         if trigger not in self.events:
             self.events[trigger] = self._create_event(trigger, self)
             for model in self.models:
                 self._add_trigger_to_model(trigger, model)
 
-        if isinstance(source, string_types):
-            source = list(self.states.keys()) if source == self.wildcard_all else [source]
+        if source == self.wildcard_all:
+            source = list(self.states.keys())
         else:
-            source = [s.name if self._has_state(s) or isinstance(s, Enum) else s for s in listify(source)]
+            # states are checked lazily which means we will only raise exceptions when the passed state
+            # is a State object because of potential confusion (see issue #155 for more details)
+            source = [s.name if isinstance(s, State) and self._has_state(s, raise_error=True) or hasattr(s, 'name') else
+                      s for s in listify(source)]
 
         for state in source:
-            _dest = state if dest == self.wildcard_same else dest
-            if _dest and self._has_state(_dest) or isinstance(_dest, Enum):
-                _dest = _dest.name
+            if dest == self.wildcard_same:
+                _dest = state
+            elif dest is not None:
+                if isinstance(dest, State):
+                    _ = self._has_state(dest, raise_error=True)
+                _dest = dest.name if hasattr(dest, 'name') else dest
+            else:
+                _dest = None
             _trans = self._create_transition(state, _dest, conditions, unless, before,
                                              after, prepare, **kwargs)
             self.events[trigger].add_transition(_trans)
@@ -895,23 +920,25 @@ class Machine(object):
                 transitions. E.g., ['A', 'B', 'C'] will generate transitions
                 for A --> B, B --> C, and C --> A (if loop is True). If states
                 is None, all states in the current instance will be used.
-            trigger (string): The name of the trigger method that advances to
+            trigger (str): The name of the trigger method that advances to
                 the next state in the sequence.
             loop (boolean): Whether or not to add a transition from the last
                 state to the first state.
             loop_includes_initial (boolean): If no initial state was defined in
                 the machine, setting this to True will cause the _initial state
-                placeholder to be included in the added transitions.
-            conditions (string or list): Condition(s) that must pass in order
+                placeholder to be included in the added transitions. This argument
+                has no effect if the states argument is passed without the
+                initial state included.
+            conditions (str or list): Condition(s) that must pass in order
                 for the transition to take place. Either a list providing the
                 name of a callable, or a list of callables. For the transition
                 to occur, ALL callables must return True.
-            unless (string, list): Condition(s) that must return False in order
+            unless (str or list): Condition(s) that must return False in order
                 for the transition to occur. Behaves just like conditions arg
                 otherwise.
-            before (string or list): Callables to call before the transition.
-            after (string or list): Callables to call after the transition.
-            prepare (string or list): Callables to call when the trigger is activated
+            before (str or list): Callables to call before the transition.
+            after (str or list): Callables to call after the transition.
+            prepare (str or list): Callables to call when the trigger is activated
             **kwargs: Additional arguments which can be passed to the created transition.
                 This is useful if you plan to extend Machine.Transition and require more parameters.
         """
@@ -930,8 +957,13 @@ class Machine(object):
         after = _prep_ordered_arg(len_transitions, after)
         prepare = _prep_ordered_arg(len_transitions, prepare)
         # reorder list so that the initial state is actually the first one
-        idx = states.index(self._initial)
-        states = states[idx:] + states[:idx]
+        try:
+            idx = states.index(self._initial)
+            states = states[idx:] + states[:idx]
+            first_in_loop = states[0 if loop_includes_initial else 1]
+        except ValueError:
+            # since initial is not part of states it shouldn't be part of the loop either
+            first_in_loop = states[0]
 
         for i in range(0, len(states) - 1):
             self.add_transition(trigger, states[i], states[i + 1],
@@ -944,7 +976,7 @@ class Machine(object):
         if loop:
             self.add_transition(trigger, states[-1],
                                 # omit initial if not loop_includes_initial
-                                states[0 if loop_includes_initial else 1],
+                                first_in_loop,
                                 conditions=conditions[-1],
                                 unless=unless[-1],
                                 before=before[-1],
@@ -955,12 +987,15 @@ class Machine(object):
     def get_transitions(self, trigger="", source="*", dest="*"):
         """ Return the transitions from the Machine.
         Args:
-            trigger (string): Trigger name of the transition.
-            source (string): Limits removal to transitions from a certain state.
-            dest (string): Limits removal to transitions to a certain state.
+            trigger (str): Trigger name of the transition.
+            source (str): Limits list to transitions from a certain state.
+            dest (str): Limits list to transitions to a certain state.
         """
         if trigger:
-            events = (self.events[trigger], )
+            try:
+                events = (self.events[trigger], )
+            except KeyError:
+                return []
         else:
             events = self.events.values()
         transitions = []
@@ -976,9 +1011,9 @@ class Machine(object):
     def remove_transition(self, trigger, source="*", dest="*"):
         """ Removes a transition from the Machine and all models.
         Args:
-            trigger (string): Trigger name of the transition.
-            source (string): Limits removal to transitions from a certain state.
-            dest (string): Limits removal to transitions to a certain state.
+            trigger (str): Trigger name of the transition.
+            source (str): Limits removal to transitions from a certain state.
+            dest (str): Limits removal to transitions to a certain state.
         """
         source = listify(source) if source != "*" else source
         dest = listify(dest) if dest != "*" else dest
@@ -1011,12 +1046,18 @@ class Machine(object):
         """
         return all([getattr(model, trigger)(*args, **kwargs) for model in self.models])
 
+    def callbacks(self, funcs, event_data):
+        """ Triggers a list of callbacks """
+        for func in funcs:
+            self.callback(func, event_data)
+            _LOGGER.info("%sExecuted callback '%s'", self.name, func)
+
     def callback(self, func, event_data):
         """ Trigger a callback function with passed event_data parameters. In case func is a string,
             the callable will be resolved from the passed model in event_data. This function is not intended to
             be called directly but through state and transition callback definitions.
         Args:
-            func (string, callable): The callback function.
+            func (str or callable): The callback function.
                 1. First, if the func is callable, just call it
                 2. Second, we try to import string assuming it is a path to a func
                 3. Fallback to a model attribute
@@ -1033,10 +1074,10 @@ class Machine(object):
 
     @staticmethod
     def resolve_callable(func, event_data):
-        """ Converts a model's method name or a path to a callable into a callable.
+        """ Converts a model's property name, method name or a path to a callable into a callable.
             If func is not a string it will be returned unaltered.
         Args:
-            func (string, callable): Method name or a path to a callable
+            func (str or callable): Property name, method name or a path to a callable
             event_data (EventData): Currently processed event
         Returns:
             callable function resolved from string or func
@@ -1044,6 +1085,10 @@ class Machine(object):
         if isinstance(func, string_types):
             try:
                 func = getattr(event_data.model, func)
+                if not callable(func):  # if a property or some other not callable attribute was passed
+                    def func_wrapper(*_, **__):  # properties cannot process parameters
+                        return func
+                    return func_wrapper
             except AttributeError:
                 try:
                     mod, name = func.rsplit('.', 1)
@@ -1056,14 +1101,12 @@ class Machine(object):
                                          "model nor imported from a module." % func)
         return func
 
-    def _has_state(self, state):
-        if isinstance(state, State):
-            if state in self.states.values():
-                return True
-            else:
-                raise ValueError('State %s has not been added to the machine' % state.name)
-        else:
-            return False
+    def _has_state(self, state, raise_error=False):
+        found = state in self.states.values()
+        if not found and raise_error:
+            msg = 'State %s has not been added to the machine' % (state.name if hasattr(state, 'name') else state)
+            raise ValueError(msg)
+        return found
 
     def _process(self, trigger):
 
@@ -1132,8 +1175,11 @@ class Machine(object):
                 state = self.get_state(target)
                 return partial(state.add_callback, callback_type[3:])
 
-        # Nothing matched
-        raise AttributeError("'{}' does not exist on <Machine@{}>".format(name, id(self)))
+        try:
+            return self.__getattribute__(name)
+        except AttributeError:
+            # Nothing matched
+            raise AttributeError("'{}' does not exist on <Machine@{}>".format(name, id(self)))
 
 
 class MachineError(Exception):
