diff --git a/python_case_studies/reference_repos/transitions/conflict4/base.py b/python_case_studies/reference_repos/transitions/conflict4/right.py
index 3b53f2c..95c3034 100644
--- a/python_case_studies/reference_repos/transitions/conflict4/base.py
+++ b/python_case_studies/reference_repos/transitions/conflict4/right.py
@@ -150,7 +150,7 @@ class NestedEvent(Event):
         Returns: boolean indicating whether or not a transition was
             successfully executed (True if successful, False if not).
         """
-        state_tree = _machine._build_state_tree(getattr(_model, _machine.model_attribute), _machine.state_cls.separator)
+        state_tree = _machine.build_state_tree(getattr(_model, _machine.model_attribute), _machine.state_cls.separator)
         state_tree = reduce(dict.get, _machine.get_global_name(join=False), state_tree)
         ordered_states = _resolve_order(state_tree)
         done = set()
@@ -276,7 +276,7 @@ class NestedTransition(Transition):
         dst_name_path = self.dest.split(event_data.machine.state_cls.separator)
         _ = machine.get_state(dst_name_path)
         model_states = listify(getattr(event_data.model, machine.model_attribute))
-        state_tree = machine._build_state_tree(model_states, machine.state_cls.separator)
+        state_tree = machine.build_state_tree(model_states, machine.state_cls.separator)
 
         scope = machine.get_global_name(join=False)
         src_name_path = event_data.source_path
@@ -887,11 +887,11 @@ class HierarchicalMachine(Machine):
             self._checked_assignment(model, trigger, trig_func)
 
     # converts a list of current states into a hierarchical state tree
-    def _build_state_tree(self, model_states, separator, tree=None):
+    def build_state_tree(self, model_states, separator, tree=None):
         tree = tree if tree is not None else OrderedDict()
         if isinstance(model_states, list):
             for state in model_states:
-                _ = self._build_state_tree(state, separator, tree)
+                _ = self.build_state_tree(state, separator, tree)
         else:
             tmp = tree
             if isinstance(model_states, (Enum, EnumMeta)):
@@ -911,7 +911,7 @@ class HierarchicalMachine(Machine):
                 res = self._get_enum_path(enum_state, prefix=prefix + [name])
                 if res:
                     return res
-        return []
+        raise ValueError("Could not find path of {0}.".format(enum_state))
 
     def _get_state_path(self, state, prefix=[]):
         if state in self.states.values():
@@ -1032,8 +1032,8 @@ class HierarchicalMachine(Machine):
 
     def _trigger_event(self, _model, _trigger, _state_tree, *args, **kwargs):
         if _state_tree is None:
-            _state_tree = self._build_state_tree(listify(getattr(_model, self.model_attribute)),
-                                                 self.state_cls.separator)
+            _state_tree = self.build_state_tree(listify(getattr(_model, self.model_attribute)),
+                                                self.state_cls.separator)
         res = {}
         for key, value in _state_tree.items():
             if value:
