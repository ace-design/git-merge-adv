diff --git a/python_case_studies/reference_repos/transitions/conflict19/desired.py b/python_case_studies/demo_results/MethodUnion/transitions-conflict19.py
index 7934877..c9667bf 100644
--- a/python_case_studies/reference_repos/transitions/conflict19/desired.py
+++ b/python_case_studies/demo_results/MethodUnion/transitions-conflict19.py
@@ -1,14 +1,14 @@
 import abc
+from core import Machine
+from core import Transition
+from nesting import NestedState
+import logging
 
-from ..core import Machine
-from ..core import Transition
-from .nesting import NestedState
 try:
     import pygraphviz as pgv
 except:
     pgv = None
 
-import logging
 logger = logging.getLogger(__name__)
 logger.addHandler(logging.NullHandler())
 
@@ -101,6 +101,10 @@ class AGraph(Diagram):
 
                 for t in transitions[1]:
                     dst = self.machine.get_state(t.dest)
+<<<<<<< left_content.py
+                    # label = self._transition_label(label, t)
+=======
+>>>>>>> right_content.py
                     edge_label = self._transition_label(label, t)
                     lhead = ''
 
@@ -110,6 +114,15 @@ class AGraph(Diagram):
                         while len(dst.children) > 0:
                             dst = src.children
 
+<<<<<<< left_content.py
+                    # if container.has_edge(src.name, dst.name) is False:
+                        # container.add_edge(src.name, dst.name, label=label, ltail=ltail, lhead=lhead)
+                    if dst.name == src.name and transitions[0] != t.dest:
+                        continue
+                    if container.has_edge(src.name, dst.name):
+                        edge = container.get_edge(src.name, dst.name)
+                        edge.attr['label'] = edge.attr['label'] + ' || ' + edge_label
+=======
                     # special case in which parent to first child edge is resolved to a self reference.
                     # will be omitted for now. I have not found a solution for how to fix this yet since having
                     # cluster to node edges is a bit messy with dot.
@@ -118,6 +131,7 @@ class AGraph(Diagram):
                     elif container.has_edge(src.name, dst.name):
                         edge = container.get_edge(src.name, dst.name)
                         edge.attr['label'] = edge.attr['label'] + ' | ' + edge_label
+>>>>>>> right_content.py
                     else:
                         container.add_edge(src.name, dst.name, label=edge_label, ltail=ltail, lhead=lhead)
 
@@ -273,3 +287,4 @@ class TransitionGraphSupport(Transition):
                     dest = dest.children[0]
             event_data.machine.set_edge_state(source.name, dest.name, state='previous')
         super(TransitionGraphSupport, self)._change_state(event_data)
+
