diff --git a/python_case_studies/reference_repos/errbot/conflict17/left.py b/python_case_studies/reference_repos/errbot/conflict17/right.py
index f362dac..880b546 100644
--- a/python_case_studies/reference_repos/errbot/conflict17/left.py
+++ b/python_case_studies/reference_repos/errbot/conflict17/right.py
@@ -3,6 +3,7 @@ import logging
 import re
 import time
 import sys
+from errbot import holder
 from errbot import PY3
 from errbot.backends.base import (
     Message, build_message, Identifier, Presence, ONLINE, AWAY,
@@ -11,6 +12,8 @@ from errbot.backends.base import (
 from errbot.errBot import ErrBot
 from errbot.utils import deprecated
 
+log = logging.getLogger(__name__)
+
 try:
     from functools import lru_cache
 except ImportError:
@@ -18,8 +21,8 @@ except ImportError:
 try:
     from slackclient import SlackClient
 except ImportError:
-    logging.exception("Could not start the Slack back-end")
-    logging.fatal(
+    log.exception("Could not start the Slack back-end")
+    log.fatal(
         "You need to install the slackclient package in order to use the Slack "
         "back-end. You should be able to install this package using: "
         "pip install slackclient"
@@ -28,8 +31,8 @@ except ImportError:
 except SyntaxError:
     if not PY3:
         raise
-    logging.exception("Could not start the Slack back-end")
-    logging.fatal(
+    log.exception("Could not start the Slack back-end")
+    log.fatal(
         "I cannot start the Slack back-end because I cannot import the SlackClient. "
         "Python 3 compatibility on SlackClient is still quite young, you may be "
         "running an old version or perhaps they released a version with a Python "
@@ -85,7 +88,7 @@ class SlackBackend(ErrBot):
         identity = config.BOT_IDENTITY
         self.token = identity.get('token', None)
         if not self.token:
-            logging.fatal(
+            log.fatal(
                 'You need to set your token (found under "Bot Integration" on Slack) in '
                 'the BOT_IDENTITY setting in your configuration. Without this token I '
                 'cannot connect to Slack.'
@@ -93,12 +96,12 @@ class SlackBackend(ErrBot):
             sys.exit(1)
         self.sc = SlackClient(self.token)
 
-        logging.debug("Verifying authentication token")
+        log.debug("Verifying authentication token")
         self.auth = self.api_call("auth.test", raise_errors=False)
         if not self.auth['ok']:
-            logging.fatal("Couldn't authenticate with Slack. Server said: %s" % self.auth['error'])
+            log.fatal("Couldn't authenticate with Slack. Server said: %s" % self.auth['error'])
             sys.exit(1)
-        logging.debug("Token accepted")
+        log.debug("Token accepted")
         self.jid = SlackIdentifier(
             node=self.auth["user_id"],
             domain=self.sc.server.domain,
@@ -132,33 +135,33 @@ class SlackBackend(ErrBot):
         return response
 
     def serve_forever(self):
-        logging.info("Connecting to Slack real-time-messaging API")
+        log.info("Connecting to Slack real-time-messaging API")
         if self.sc.rtm_connect():
-            logging.info("Connected")
+            log.info("Connected")
             try:
                 while True:
                     for message in self.sc.rtm_read():
                         if 'type' not in message:
-                            logging.debug("Ignoring non-event message: %s" % message)
+                            log.debug("Ignoring non-event message: %s" % message)
                             continue
 
                         event_type = message['type']
                         event_handler = getattr(self, '_%s_event_handler' % event_type, None)
                         if event_handler is None:
-                            logging.debug("No event handler available for %s, ignoring this event" % event_type)
+                            log.debug("No event handler available for %s, ignoring this event" % event_type)
                             continue
                         try:
-                            logging.debug("Processing slack event: %s" % message)
+                            log.debug("Processing slack event: %s" % message)
                             event_handler(message)
                         except Exception:
-                            logging.exception("%s event handler raised an exception" % event_type)
+                            log.exception("%s event handler raised an exception" % event_type)
                     time.sleep(1)
             except KeyboardInterrupt:
-                logging.info("Caught KeyboardInterrupt, shutting down..")
+                log.info("Caught KeyboardInterrupt, shutting down..")
             finally:
-                logging.debug("Trigger disconnect callback")
+                log.debug("Trigger disconnect callback")
                 self.disconnect_callback()
-                logging.debug("Trigger shutdown")
+                log.debug("Trigger shutdown")
                 self.shutdown()
         else:
             raise Exception('Connection failed, invalid token ?')
@@ -180,7 +183,7 @@ class SlackBackend(ErrBot):
         elif presence == 'away':
             status = AWAY
         else:
-            logging.error(
+            log.error(
                 "It appears the Slack API changed, I received an unknown presence type %s" % presence
             )
             status = ONLINE
@@ -190,16 +193,16 @@ class SlackBackend(ErrBot):
         """Event handler for the 'message' event"""
         channel = event['channel']
         if channel.startswith('C'):
-            logging.debug("Handling message from a public channel")
+            log.debug("Handling message from a public channel")
             message_type = 'groupchat'
         elif channel.startswith('G'):
-            logging.debug("Handling message from a private group")
+            log.debug("Handling message from a private group")
             message_type = 'groupchat'
         elif channel.startswith('D'):
-            logging.debug("Handling message from a user")
+            log.debug("Handling message from a user")
             message_type = 'chat'
         else:
-            logging.warning("Unknown message type! Unable to handle")
+            log.warning("Unknown message type! Unable to handle")
             return
 
         msg = Message(event['text'], type_=message_type)
@@ -290,10 +293,10 @@ class SlackBackend(ErrBot):
             else:
                 to_humanreadable = mess.to.resource
                 to_id = self.get_im_channel(self.username_to_userid(to_humanreadable))
-            logging.debug('Sending %s message to %s (%s)' % (mess.type, to_humanreadable, to_id))
+            log.debug('Sending %s message to %s (%s)' % (mess.type, to_humanreadable, to_id))
             self.sc.rtm_send_message(to_id, mess.body)
         except Exception:
-            logging.exception(
+            log.exception(
                 "An exception occurred while trying to send the following message "
                 "to %s: %s" % (to_humanreadable, mess.body)
             )
@@ -327,13 +330,13 @@ class SlackBackend(ErrBot):
 
     def query_room(self, room):
         if room.startswith('C') or room.startswith('G'):
-            return SlackRoom(domain=room, bot=self)
+            return SlackRoom(domain=room)
 
         m = SLACK_CLIENT_CHANNEL_HYPERLINK.match(room)
         if m is not None:
-            return SlackRoom(domain=m.groupdict()['id'], bot=self)
+            return SlackRoom(domain=m.groupdict()['id'])
 
-        return SlackRoom(name=room, bot=self)
+        return SlackRoom(name=room)
 
     def rooms(self):
         """
@@ -343,14 +346,14 @@ class SlackBackend(ErrBot):
             A list of :class:`~SlackRoom` instances.
         """
         channels = self.channels(joined_only=True, exclude_archived=True)
-        return [SlackRoom(domain=channel['id'], bot=self) for channel in channels]
+        return [SlackRoom(domain=channel['id']) for channel in channels]
 
     def groupchat_reply_format(self):
         return '@{0}: {1}'
 
 
 class SlackRoom(MUCRoom):
-    def __init__(self, jid=None, node='', domain='', resource='', name=None, bot=None):
+    def __init__(self, jid=None, node='', domain='', resource='', name=None):
         if jid is not None or node != '' or resource != '':
             raise ValueError("SlackRoom() only supports construction using domain or name")
         if domain != '' and name is not None:
@@ -362,11 +365,10 @@ class SlackRoom(MUCRoom):
             else:
                 self._name = name
         else:
-            self._name = bot.channelid_to_channelname(domain)
+            self._name = holder.bot.channelid_to_channelname(domain)
 
         self._id = None
-        self._bot = bot
-        self.sc = bot.sc
+        self.sc = holder.bot.sc
 
     def __str__(self):
         return "#%s" % self.name
@@ -376,7 +378,7 @@ class SlackRoom(MUCRoom):
         """
         The channel object exposed by SlackClient
         """
-        id = self.sc.server.channels.find(self.name)
+        id = holder.bot.sc.server.channels.find(self.name)
         if id is None:
             raise RoomDoesNotExistError(
                 "%s does not exist (or is a private group you don't have access to)" % str(self)
@@ -393,9 +395,9 @@ class SlackRoom(MUCRoom):
           * https://api.slack.com/methods/groups.list
         """
         if self.private:
-            return self._bot.api_call('groups.info', data={'channel': self.id})["group"]
+            return holder.bot.api_call('groups.info', data={'channel': self.id})["group"]
         else:
-            return self._bot.api_call('channels.info', data={'channel': self.id})["channel"]
+            return holder.bot.api_call('channels.info', data={'channel': self.id})["channel"]
 
     @property
     def private(self):
@@ -415,43 +417,43 @@ class SlackRoom(MUCRoom):
         return self._name
 
     def join(self, username=None, password=None):
-        logging.info("Joining channel %s" % str(self))
-        self._bot.api_call('channels.join', data={'name': self.name})
+        log.info("Joining channel %s" % str(self))
+        holder.bot.api_call('channels.join', data={'name': self.name})
 
     def leave(self, reason=None):
         if self.id.startswith('C'):
-            logging.info("Leaving channel %s (%s)" % (str(self), self.id))
-            self._bot.api_call('channels.leave', data={'channel': self.id})
+            log.info("Leaving channel %s (%s)" % (str(self), self.id))
+            holder.bot.api_call('channels.leave', data={'channel': self.id})
         else:
-            logging.info("Leaving group %s (%s)" % (str(self), self.id))
-            self._bot.api_call('groups.leave', data={'channel': self.id})
+            log.info("Leaving group %s (%s)" % (str(self), self.id))
+            holder.bot.api_call('groups.leave', data={'channel': self.id})
         self._id = None
 
     def create(self, private=False):
         if private:
-            logging.info("Creating group %s" % str(self))
-            self._bot.api_call('groups.create', data={'name': self.name})
+            log.info("Creating group %s" % str(self))
+            holder.bot.api_call('groups.create', data={'name': self.name})
         else:
-            logging.info("Creating channel %s" % str(self))
-            self._bot.api_call('channels.create', data={'name': self.name})
+            log.info("Creating channel %s" % str(self))
+            holder.bot.api_call('channels.create', data={'name': self.name})
 
     def destroy(self):
         if self.id.startswith('C'):
-            logging.info("Archiving channel %s (%s)" % (str(self), self.id))
-            self._bot.api_call('channels.archive', data={'channel': self.id})
+            log.info("Archiving channel %s (%s)" % (str(self), self.id))
+            holder.bot.api_call('channels.archive', data={'channel': self.id})
         else:
-            logging.info("Archiving group %s (%s)" % (str(self), self.id))
-            self._bot.api_call('groups.archive', data={'channel': self.id})
+            log.info("Archiving group %s (%s)" % (str(self), self.id))
+            holder.bot.api_call('groups.archive', data={'channel': self.id})
         self._id = None
 
     @property
     def exists(self):
-        channels = self._bot.channels(joined_only=False, exclude_archived=False)
+        channels = holder.bot.channels(joined_only=False, exclude_archived=False)
         return len([c for c in channels if c['name'] == self.name]) > 0
 
     @property
     def joined(self):
-        channels = self._bot.channels(joined_only=True)
+        channels = holder.bot.channels(joined_only=True)
         return len([c for c in channels if c['name'] == self.name]) > 0
 
     @property
@@ -464,11 +466,11 @@ class SlackRoom(MUCRoom):
     @topic.setter
     def topic(self, topic):
         if self.private:
-            logging.info("Setting topic of %s (%s) to '%s'" % (str(self), self.id, topic))
-            self._bot.api_call('groups.setTopic', data={'channel': self.id, 'topic': topic})
+            log.info("Setting topic of %s (%s) to '%s'" % (str(self), self.id, topic))
+            holder.bot.api_call('groups.setTopic', data={'channel': self.id, 'topic': topic})
         else:
-            logging.info("Setting topic of %s (%s) to '%s'" % (str(self), self.id, topic))
-            self._bot.api_call('channels.setTopic', data={'channel': self.id, 'topic': topic})
+            log.info("Setting topic of %s (%s) to '%s'" % (str(self), self.id, topic))
+            holder.bot.api_call('channels.setTopic', data={'channel': self.id, 'topic': topic})
 
     @property
     def purpose(self):
@@ -480,29 +482,29 @@ class SlackRoom(MUCRoom):
     @purpose.setter
     def purpose(self, purpose):
         if self.private:
-            logging.info("Setting purpose of %s (%s) to '%s'" % (str(self), self.id, purpose))
-            self._bot.api_call('groups.setPurpose', data={'channel': self.id, 'purpose': purpose})
+            log.info("Setting purpose of %s (%s) to '%s'" % (str(self), self.id, purpose))
+            holder.bot.api_call('groups.setPurpose', data={'channel': self.id, 'purpose': purpose})
         else:
-            logging.info("Setting purpose of %s (%s) to '%s'" % (str(self), self.id, purpose))
-            self._bot.api_call('channels.setPurpose', data={'channel': self.id, 'purpose': purpose})
+            log.info("Setting purpose of %s (%s) to '%s'" % (str(self), self.id, purpose))
+            holder.bot.api_call('channels.setPurpose', data={'channel': self.id, 'purpose': purpose})
 
     @property
     def occupants(self):
         members = self._channel_info['members']
         return [SlackMUCOccupant(
                 node=self.name,
-                domain=self._bot.sc.server.domain,
-                resource=self._bot.userid_to_username(m))
+                domain=holder.bot.sc.server.domain,
+                resource=holder.bot.userid_to_username(m))
                 for m in members]
 
     def invite(self, *args):
-        users = {user['name']: user['id'] for user in self._bot.api_call('users.list')['members']}
+        users = {user['name']: user['id'] for user in holder.bot.api_call('users.list')['members']}
         for user in args:
             if user not in users:
                 raise UserDoesNotExistError("User '%s' not found" % user)
-            logging.info("Inviting %s into %s (%s)" % (user, str(self), self.id))
+            log.info("Inviting %s into %s (%s)" % (user, str(self), self.id))
             method = 'groups.invite' if self.private else 'channels.invite'
-            response = self._bot.api_call(
+            response = holder.bot.api_call(
                 method,
                 data={'channel': self.id, 'user': users[user]},
                 raise_errors=False
