diff --git a/python_case_studies/reference_repos/errbot/conflict9/base.py b/python_case_studies/reference_repos/errbot/conflict9/left.py
index 27473cc..472e3ac 100644
--- a/python_case_studies/reference_repos/errbot/conflict9/base.py
+++ b/python_case_studies/reference_repos/errbot/conflict9/left.py
@@ -45,7 +45,9 @@ class Plugins(BotPlugin):
         """
         if not args.strip():
             return "You should have a repo name as argument"
-        repos = self._bot.get(self._bot.REPOS, {})
+
+        repos = self._bot.get_installed_plugin_repos()
+
         if args not in repos:
             return "This repo is not installed check with " + self._bot.prefix + "repos the list of installed ones"
 
@@ -57,22 +59,44 @@ class Plugins(BotPlugin):
 
         shutil.rmtree(plugin_path)
         repos.pop(args)
-        self[self._bot.REPOS] = repos
+        self._bot.set_plugin_repos(repos)
 
         return 'Plugins unloaded and repo %s removed' % args
 
+
     # noinspection PyUnusedLocal
     @botcmd(template='repos')
     def repos(self, mess, args):
         """ list the current active plugin repositories
         """
+
         installed_repos = self._bot.get_installed_plugin_repos()
+
         all_names = sorted(set([name for name in KNOWN_PUBLIC_REPOS] + [name for name in installed_repos]))
-        return {'repos': [
-            (repo_name in installed_repos, repo_name in KNOWN_PUBLIC_REPOS, repo_name,
-             KNOWN_PUBLIC_REPOS[repo_name][1]
-             if repo_name in KNOWN_PUBLIC_REPOS else installed_repos[repo_name])
-            for repo_name in all_names]}
+
+        repos = {'repos': []}
+
+        for repo_name in all_names:
+
+            installed = False
+            public = False
+
+            try:
+                description = KNOWN_PUBLIC_REPOS[repo_name].get('documentation', 'Unavailable')
+            except KeyError:
+                description = installed_repos[repo_name].get('path')
+
+            if repo_name in KNOWN_PUBLIC_REPOS:
+                public = True
+
+            if repo_name in installed_repos:
+                installed = True
+
+            # installed, public, name, desc
+            repos['repos'].append((installed, public, repo_name, description))
+
+        return repos
+
 
     @botcmd(split_args_with=' ', admin_only=True)
     def repos_update(self, mess, args):
@@ -90,7 +114,22 @@ class Plugins(BotPlugin):
                     'your system to be able to install git based plugins.')
 
         directories = set()
-        repos = self._bot.get(self._bot.REPOS, {})
+        repos = {}
+        _installed = self._bot.get_installed_plugin_repos()
+
+        # Fix to migrate exiting plugins into new format
+        for short_name, url in _installed.items():
+            name = ('/'.join(url.split('/')[-2:])).replace('.git', '')
+
+            t_installed = {name: {
+                'path': url,
+                'documentation': 'Unavilable',
+                'python': None,
+                'avatar_url': None,
+                }
+            }
+            repos.update(t_installed)
+
         core_to_update = 'all' in args or 'core' in args
         if core_to_update:
             directories.add(path.dirname(__file__))
