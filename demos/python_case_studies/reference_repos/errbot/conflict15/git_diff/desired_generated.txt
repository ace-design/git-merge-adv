diff --git a/python_case_studies/reference_repos/errbot/conflict15/desired.py b/python_case_studies/demo_results/MethodUnion/errbot-conflict15.py
index ad6b792..c758516 100644
--- a/python_case_studies/reference_repos/errbot/conflict15/desired.py
+++ b/python_case_studies/demo_results/MethodUnion/errbot-conflict15.py
@@ -8,12 +8,13 @@ import sys
 import os
 import pip
 from . import PY2
-from .botplugin import BotPlugin
-from .utils import version2array, PY3
-from .templating import remove_plugin_templates_path, add_plugin_templates_path
-from .version import VERSION
+from botplugin import BotPlugin
+from utils import version2array,PY3
+from templating import remove_plugin_templates_path,add_plugin_templates_path
+from version import VERSION
 from yapsy.PluginManager import PluginManager
-from .core_plugins.wsview import route
+from core_plugins.wsview import route
+from . import holder
 
 log = logging.getLogger(__name__)
 
@@ -77,6 +78,72 @@ def install_package(package):
         log.exception("Failed to load the dependent package")
 
 
+<<<<<<< left_content.py
+=======
+def update_plugin_places(path_list, extra_plugin_dir, autoinstall_deps=True):
+    builtins = get_preloaded_plugins(extra_plugin_dir)
+    paths = builtins + path_list
+    for entry in paths:
+        if entry not in sys.path:
+            sys.path.append(entry)  # so plugins can relatively import their submodules
+    dependencies_result = [check_dependencies(path) for path in paths]
+    deps_to_install = set()
+    if autoinstall_deps:
+        for result in dependencies_result:
+            if result:
+                deps_to_install.update(result[1])
+        if deps_to_install:
+            for dep in deps_to_install:
+                if dep.strip() != '':
+                    log.info("Trying to install an unmet dependency: '%s'" % dep)
+                    install_package(dep)
+        errors = []
+    else:
+        errors = [result[0] for result in dependencies_result if result is not None]
+    simplePluginManager.setPluginPlaces(chain(builtins, path_list))
+    all_candidates = []
+
+    def add_candidate(candidate):
+        all_candidates.append(candidate)
+
+    simplePluginManager.locatePlugins()
+    # noinspection PyBroadException
+    try:
+        simplePluginManager.loadPlugins(add_candidate)
+    except Exception as _:
+        log.exception("Error while loading plugins")
+
+    return all_candidates, errors
+
+
+def get_all_plugins():
+    log.debug("All plugins: %s" % ', '.join([plug.name for plug in simplePluginManager.getAllPlugins()]))
+    return simplePluginManager.getAllPlugins()
+
+
+def get_all_active_plugin_objects():
+    return [plug.plugin_object for plug in get_all_plugins() if hasattr(plug, 'is_activated') and plug.is_activated]
+
+
+def get_all_active_plugin_names():
+    return [p.name for p in get_all_plugins() if hasattr(p, 'is_activated') and p.is_activated]
+
+
+def get_all_plugin_names():
+    return [p.name for p in get_all_plugins()]
+
+
+def deactivate_all_plugins():
+    for name in get_all_active_plugin_names():
+        simplePluginManager.deactivatePluginByName(name, "bots")
+
+
+def global_restart():
+    python = sys.executable
+    os.execl(python, python, *sys.argv)
+
+
+>>>>>>> right_content.py
 def check_dependencies(path):
     """ This methods returns a pair of (message, packages missing).
     Or None if everything is OK.
@@ -260,9 +327,8 @@ class BotPluginManager(PluginManager):
                     deps_to_install.update(result[1])
             if deps_to_install:
                 for dep in deps_to_install:
-                    if dep.strip() != '':
-                        log.info("Trying to install an unmet dependency: '%s'" % dep)
-                        install_package(dep)
+                    log.info("Trying to install an unmet dependency: %s" % dep)
+                    install_package(dep)
             errors = []
         else:
             errors = [result[0] for result in dependencies_result if result is not None]
@@ -295,3 +361,4 @@ class BotPluginManager(PluginManager):
     def deactivate_all_plugins(self):
         for name in self.get_all_active_plugin_names():
             self.deactivatePluginByName(name, "bots")
+
