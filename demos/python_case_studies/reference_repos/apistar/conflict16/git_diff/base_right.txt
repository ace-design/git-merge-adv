diff --git a/python_case_studies/reference_repos/apistar/conflict16/base.py b/python_case_studies/reference_repos/apistar/conflict16/right.py
index e8ab936..01b94f7 100644
--- a/python_case_studies/reference_repos/apistar/conflict16/base.py
+++ b/python_case_studies/reference_repos/apistar/conflict16/right.py
@@ -1,8 +1,9 @@
+import inspect
 from collections import OrderedDict
 
 import click
 
-from apistar import commands, pipelines, routing
+from apistar import commands, pipelines, routing, schema
 
 
 class App(object):
@@ -24,10 +25,9 @@ class App(object):
         self.click = get_click_client(app=self)
 
 
-def get_wsgi_server(app):
+def get_wsgi_server(app, lookup_cache_size=10000):
     lookup = app.router.lookup
     lookup_cache = OrderedDict()  # FIFO Cache for URL lookups.
-    max_cache = 10000
 
     # Pre-fill the lookup cache for URLs without path arguments.
     for path, method, view in app.router.routes:
@@ -54,7 +54,7 @@ def get_wsgi_server(app):
                 (state['view'], pipeline, state['url_path_args']) = lookup_cache[lookup_key]
             except KeyError:
                 (state['view'], pipeline, state['url_path_args']) = lookup_cache[lookup_key] = lookup(path, method)
-                if len(lookup_cache) > max_cache:
+                if len(lookup_cache) > lookup_cache_size:
                     lookup_cache.pop(next(iter(lookup_cache)))
 
             for function, inputs, output, extra_kwargs in pipeline:
@@ -66,10 +66,7 @@ def get_wsgi_server(app):
                     kwargs.update(extra_kwargs)
 
                 # Call the function for each step in the pipeline.
-                if output is None:
-                    function(**kwargs)
-                else:
-                    state[output] = function(**kwargs)
+                state[output] = function(**kwargs)
         except Exception as exc:
             state['exception'] = exc
             pipelines.run_pipeline(app.router.exception_pipeline, state)
@@ -96,6 +93,41 @@ def get_click_client(app):
             click.echo(ctx.get_help())
 
     for command in app.commands:
+
+        command_signature = inspect.signature(command)
+        for param in reversed(command_signature.parameters.values()):
+            name = param.name.replace('_', '-')
+            annotation = param.annotation
+            kwargs = {}
+            if hasattr(annotation, 'default'):
+                kwargs['default'] = annotation.default
+            if hasattr(annotation, 'description'):
+                kwargs['help'] = annotation.description
+
+            if issubclass(annotation, (bool, schema.Boolean)):
+                kwargs['is_flag'] = True
+                kwargs['default'] = False
+            elif hasattr(annotation, 'choices'):
+                kwargs['type'] = click.Choice(annotation.choices)
+            elif hasattr(annotation, 'native_type'):
+                kwargs['type'] = annotation.native_type
+            elif annotation is inspect.Signature.empty:
+                kwargs['type'] = str
+            else:
+                kwargs['type'] = annotation
+
+            if 'default' in kwargs:
+                name = '--%s' % param.name.replace('_', '-')
+                option = click.option(name, **kwargs)
+                command = option(command)
+            else:
+                kwargs.pop('help', None)
+                argument = click.argument(param.name, **kwargs)
+                command = argument(command)
+
+        cmd_wrapper = click.command(help=command.__doc__)
+        command = cmd_wrapper(command)
+
         client.add_command(command)
 
     return client
