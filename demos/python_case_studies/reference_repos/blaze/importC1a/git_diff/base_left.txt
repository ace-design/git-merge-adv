diff --git a/python_case_studies/reference_repos/blaze/importC1a/base.py b/python_case_studies/reference_repos/blaze/importC1a/left.py
index 6cdb65a..fa5a885 100644
--- a/python_case_studies/reference_repos/blaze/importC1a/base.py
+++ b/python_case_studies/reference_repos/blaze/importC1a/left.py
@@ -104,18 +104,18 @@ def test_str_does_not_repr():
 
 
 def test_repr_of_scalar():
-    assert repr(t.amount.sum()) == '300'
+    assert expr_repr(t.amount.sum()) == '300'
 
 
 def test_mutable_backed_repr():
     mutable_backed_table = Data([[0]], fields=['col1'])
-    repr(mutable_backed_table)
+    expr_repr(mutable_backed_table)
 
 
 def test_dataframe_backed_repr():
     df = pd.DataFrame(data=[0], columns=['col1'])
     dataframe_backed_table = Data(df)
-    repr(dataframe_backed_table)
+    expr_repr(dataframe_backed_table)
 
 
 def test_dataframe_backed_repr_complex():
@@ -126,7 +126,7 @@ def test_dataframe_backed_repr_complex():
                        (5, 'Edith', -500)],
                       columns=['id', 'name', 'balance'])
     t = Data(df)
-    repr(t[t['balance'] < 0])
+    expr_repr(t[t['balance'] < 0])
 
 
 def test_repr_html_on_no_resources_symbol():
@@ -135,7 +135,7 @@ def test_repr_html_on_no_resources_symbol():
 
 
 def test_expr_repr_empty():
-    s = repr(t[t.amount > 1e9])
+    s = expr_repr(t[t.amount > 1e9])
     assert isinstance(s, str)
     assert 'amount' in s
 
@@ -217,7 +217,7 @@ def test_Data_attribute_repr():
     t = Data(CSV(example('accounts-datetimes.csv')))
     result = t.when.day
     expected = pd.DataFrame({'when_day': [1, 2, 3, 4, 5]})
-    assert repr(result) == repr(expected)
+    assert expr_repr(result) == repr(expected)
 
 
 def test_can_trivially_create_csv_Data():
@@ -276,14 +276,14 @@ def test_Data_on_json_is_concrete():
 
 def test_repr_on_nd_array_doesnt_err():
     d = Data(np.ones((2, 2, 2)))
-    repr(d + 1)
+    expr_repr(d + 1)
 
 
 def test_generator_reprs_concretely():
     x = [1, 2, 3, 4, 5, 6]
     d = Data(x)
     expr = d[d > 2] + 1
-    assert '4' in repr(expr)
+    assert '4' in expr_repr(expr)
 
 
 def test_incompatible_types():
@@ -339,7 +339,7 @@ def test_head_compute():
 
     # skip the header and the ... at the end of the repr
     expr = d.head(n)
-    s = repr(expr)
+    s = expr_repr(expr)
     assert '...' not in s
     result = s.split('\n')[1:]
     assert len(result) == n
@@ -349,48 +349,48 @@ def test_scalar_sql_compute():
     t = into('sqlite:///:memory:::t', data,
              dshape=dshape('var * {name: string, amount: int}'))
     d = Data(t)
-    assert repr(d.amount.sum()) == '300'
+    assert expr_repr(d.amount.sum()) == '300'
 
 
 def test_no_name_for_simple_data():
     d = Data([1, 2, 3])
-    assert repr(d) == '    \n0  1\n1  2\n2  3'
+    assert expr_repr(d) == '    \n0  1\n1  2\n2  3'
     assert not d._name
 
     d = Data(1)
     assert not d._name
-    assert repr(d) == '1'
+    assert expr_repr(d) == '1'
 
 
 def test_coerce_date_and_datetime():
     x = datetime.datetime.now().date()
     d = Data(x)
-    assert repr(d) == repr(x)
+    assert expr_repr(d) == repr(x)
 
     x = pd.Timestamp.now()
     d = Data(x)
-    assert repr(d) == repr(x)
+    assert expr_repr(d) == repr(x)
 
     x = np.nan
     d = Data(x, dshape='datetime')
-    assert repr(d) == repr(pd.NaT)
+    assert expr_repr(d) == repr(pd.NaT)
 
     x = float('nan')
     d = Data(x, dshape='datetime')
-    assert repr(d) == repr(pd.NaT)
+    assert expr_repr(d) == repr(pd.NaT)
 
 
 def test_coerce_timedelta():
     x = datetime.timedelta(days=1, hours=2, minutes=3)
     d = Data(x)
 
-    assert repr(d) == repr(x)
+    assert expr_repr(d) == repr(x)
 
 
 def test_highly_nested_repr():
     data = [[0, [[1, 2], [3]], 'abc']]
     d = Data(data)
-    assert 'abc' in repr(d.head())
+    assert 'abc' in expr_repr(d.head())
 
 
 def test_asarray_fails_on_different_column_names():
@@ -441,7 +441,7 @@ def test_csv_with_trailing_commas():
             # note the trailing space in the header
             f.write('a,b,c, \n1, 2, 3, ')
         csv = CSV(fn)
-        assert repr(Data(fn))
+        assert expr_repr(Data(fn))
         assert discover(csv).measure.names == [
             'a', 'b', 'c', ''
         ]
@@ -449,7 +449,7 @@ def test_csv_with_trailing_commas():
         with open(fn, 'wt') as f:
             f.write('a,b,c,\n1, 2, 3, ')  # NO trailing space in the header
         csv = CSV(fn)
-        assert repr(Data(fn))
+        assert expr_repr(Data(fn))
         assert discover(csv).measure.names == [
             'a', 'b', 'c', 'Unnamed: 3'
         ]
@@ -467,7 +467,7 @@ def test_pickle_roundtrip():
 
 def test_nameless_data():
     data = [('a', 1)]
-    assert repr(data) in repr(Data(data))
+    assert repr(data) in expr_repr(Data(data))
 
 
 def test_partially_bound_expr():
@@ -480,7 +480,7 @@ def test_partially_bound_expr():
     data = Data(df, name='data')
     a = symbol('a', 'int')
     expr = data.name[data.balance > a]
-    assert repr(expr) == 'data[data.balance > a].name'
+    assert expr_repr(expr) == 'data[data.balance > a].name'
 
 
 def test_isidentical_regr():
